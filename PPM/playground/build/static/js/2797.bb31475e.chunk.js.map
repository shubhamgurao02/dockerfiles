{"version":3,"file":"static/js/2797.bb31475e.chunk.js","mappings":"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","sources":["views/Customer/Qbrslpopup.js","views/Customer/QbrUpdate.js","views/Customer/QBR.js","../node_modules/@mui/icons-material/DownloadForOfflineRounded.js"],"sourcesContent":["import React from \"react\";\nimport { MdOutlinePlaylistAdd } from \"react-icons/md\";\nimport { AiFillDelete, AiFillWarning } from \"react-icons/ai\";\nimport Draggable from \"react-draggable\";\nimport { CModal, CModalBody, CModalHeader, CModalTitle } from \"@coreui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { BiSave, BiSearch, BiSelection } from \"react-icons/bi\";\nimport GlobalValidation from \"../ValidationComponent/GlobalValidation\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\nimport QbrUpdate from \"./QbrUpdate\";\n\nexport default function Qbrslpopup(props) {\n  const {\n    clickButtonPopUp,\n    setValueID,\n    valueID,\n    sethideSelectbutton,\n    hideSelectbutton,\n    setprolificspartId,\n    prolificspartId,\n    setClickButtonPopUp,\n    setFormEditData,\n    formEditData,\n    handleAddEmail,\n    details,\n    handleChange,\n    type,\n    onChangeState1,\n    finalState1,\n    setDisplayTextEmails,\n    setProlificsparticipantdata,\n    prolificsparticipantdata,\n    issueDetails,\n    editedData,\n    setValue,\n    value,\n    displayTextEmails,\n  } = props;\n  const [displayState1, setDisplayState1] = useState(null);\n  const [validationmessage, setValidationMessage] = useState(false);\n  // const [value, setValue] = useState({});\n  const ref = useRef([]);\n  const [storeprolificparticipantid, setStoreprolificparticipantid] = useState(\n    []\n  );\n\n  const addHandler = () => {\n    const newValue = prolificsparticipantdata.prolifics_participants\n      ? prolificsparticipantdata.prolifics_participants.name\n      : undefined;\n\n    let valid = GlobalValidation(ref);\n    if (valid) {\n      setValidationMessage(true);\n      return;\n    }\n\n    setValidationMessage(false);\n    sethideSelectbutton(false);\n    handleAddEmail();\n    const newValueID = prolificsparticipantdata.prolifics_participants\n      ? prolificsparticipantdata.prolifics_participants.id\n      : undefined;\n    // Add the new value to the array\n    setValue((prevValue) => [...prevValue, newValue]);\n    setValueID((prevValue) => [...prevValue, newValueID]);\n\n    DisplayList();\n  };\n  useEffect(() => {}, [value]);\n  useEffect(() => {\n    DisplayList();\n  }, [value]);\n\n  const handleSubmit = () => {\n    setClickButtonPopUp(false);\n  };\n\n  useEffect(() => {\n    DisplayList();\n  }, [finalState1]);\n\n  const checkedData = (e, data) => {\n    let initialData = displayTextEmails;\n    if (e.target.checked) {\n      initialData.push(data);\n    } else {\n      let index = initialData.indexOf(data);\n      initialData.splice(index, 1);\n    }\n    setDisplayTextEmails(initialData);\n  };\n  const DisplayList = () => {\n    if (value === undefined || value === null) {\n      return null; // or handle the case where value is undefined/null\n    }\n\n    setDisplayState1(() => {\n      return Object.keys(value).map((d, i) => {\n        return (\n          <div key={i}>\n            <input\n              type=\"checkbox\"\n              onClick={(e) => {\n                checkedData(e, value[d]);\n              }}\n            />\n            {value[d]}\n            <AiFillDelete\n              onClick={() => {\n                delete value[d];\n                DisplayList();\n              }}\n            />\n          </div>\n        );\n      });\n    });\n  };\n  const [isChecked, setIsChecked] = useState(\n    !!editedData?.prolificsParticipants\n  );\n  const handleCheckboxChange = () => {\n    setIsChecked((prevState) => !prevState);\n  };\n  const handleClear = () => {\n    setFormEditData((prevProps) => ({\n      ...prevProps,\n      prolifics_participants: null,\n    }));\n  };\n\n  return (\n    <div>\n      {/* <Draggable> */}\n      <CModal\n        size=\"sm\"\n        visible={clickButtonPopUp}\n        onClose={() => {\n          setClickButtonPopUp(false);\n        }}\n      >\n        <CModalHeader className=\"hgt22\" style={{ cursor: \"all-scroll\" }}>\n          <CModalTitle>\n            <span className=\"ft16\">Prolifics Participants</span>\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          {validationmessage == true ? (\n            <div className=\"statusMsg error\">\n              {\" \"}\n              <AiFillWarning /> Please Provide Resource\n            </div>\n          ) : (\n            \"\"\n          )}\n          <div className=\"group-content row\">\n            <div className=\" col-md-12 row mb-2\">\n              <div className=\"col-md-8\">\n                <div\n                  className=\"autocomplete\"\n                  ref={(ele) => {\n                    ref.current[0] = ele;\n                  }}\n                >\n                  {type == \"add\" ? (\n                    <div className=\"autoComplete-container\">\n                      <ReactSearchAutocomplete\n                        items={issueDetails}\n                        type=\"Text\"\n                        name=\"prolifics_participants\"\n                        id=\"prolifics_participants\"\n                        placeholder=\"Enter Resource Name\"\n                        issueDetails={issueDetails}\n                        className=\"AutoComplete\"\n                        onClear={handleClear}\n                        onSelect={(e) => {\n                          setProlificsparticipantdata((prevProps) => ({\n                            ...prevProps,\n                            prolifics_participants: e,\n                          }));\n                          setFormEditData((prevProps) => ({\n                            ...prevProps,\n                            prolifics_participants: e.id,\n                          }));\n                        }}\n                        showIcon={false}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"autoComplete-container\">\n                      <ReactSearchAutocomplete\n                        items={issueDetails}\n                        type=\"Text\"\n                        name=\"prolifics_participants\"\n                        id=\"prolifics_participants\"\n                        placeholder=\"Enter Resource Name\"\n                        issueDetails={issueDetails}\n                        className=\"AutoComplete\"\n                        onClear={handleClear}\n                        onSelect={(e) => {\n                          setProlificsparticipantdata((prevProps) => ({\n                            ...prevProps,\n                            prolifics_participants: e,\n                          }));\n                          setFormEditData((prevProps) => ({\n                            ...prevProps,\n                            prolifics_participants: e.id,\n                          }));\n                        }}\n                        // inputSearchString={editedData?.prolificsParticipants}\n                        showIcon={false}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary col-4\"\n                onClick={() => {\n                  addHandler();\n                }}\n                title=\"Add\"\n              >\n                <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n                <MdOutlinePlaylistAdd /> Add\n              </button>\n            </div>\n            {type == \"edit\" ? (\n              <div className=\"row\">\n                {displayState1}\n                {editedData?.prolificsParticipants &&\n                  editedData?.prolificsParticipants\n                    .split(\",\")\n                    .map((participant, index) => {\n                      const participantId = `checkbox${index}`;\n                      return (\n                        <label className=\"checkbox-container\" key={index}>\n                          <input\n                            type=\"checkbox\"\n                            id={participantId}\n                            checked={true} // Set checked attribute to true for all checkboxes\n                            onChange={null} // Disable the onChange event for all checkboxes\n                          />\n                          {participant.trim()}\n                          <span className=\"checkmark\"></span>\n                        </label>\n                      );\n                    })}\n              </div>\n            ) : (\n              <div className=\"row\">\n                {displayState1}\n                {displayTextEmails.length > 0 ? (\n                  <>\n                    <label className=\"checkbox-container\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"checkbox1\"\n                        checked={isChecked}\n                        onChange={handleCheckboxChange}\n                      />\n\n                      <span className=\"checkmark\"></span>\n                    </label>\n                  </>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            )}\n            <div className=\"col-md-1\"></div>\n\n            {type == \"edit\" ? (\n              <div>\n                {\" \"}\n                <button\n                  className=\" col-md-4 btn btn-primary\"\n                  onClick={handleSubmit}\n                  title=\"Select\"\n                >\n                  <BiSave /> Select\n                </button>{\" \"}\n              </div>\n            ) : (\n              <button\n                className=\" col-md-4 btn btn-primary\"\n                onClick={handleSubmit}\n                disabled={hideSelectbutton}\n                title=\"Select\"\n              >\n                <BiSave /> Select\n              </button>\n            )}\n          </div>\n        </CModalBody>\n      </CModal>\n      {/* </Draggable> */}\n      <QbrUpdate\n        prolificspartId={prolificspartId}\n        // selectedId={selectedId}\n        storeprolificparticipantid={storeprolificparticipantid}\n      />\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { environment } from \"../../environments/environment\";\nimport axios from \"axios\";\nimport { AiFillWarning } from \"react-icons/ai\";\nimport DatePicker from \"react-datepicker\";\nimport { CModalHeader } from \"@coreui/react\";\nimport { CModalBody } from \"@coreui/react\";\nimport { CModal } from \"@coreui/react\";\nimport Draggable from \"react-draggable\";\nimport moment from \"moment\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { MdCreate } from \"react-icons/md\";\nimport { CModalTitle } from \"@coreui/react\";\nimport DownloadForOfflineRoundedIcon from \"@mui/icons-material/DownloadForOfflineRounded\";\n\nimport GlobalValidation from \"../ValidationComponent/GlobalValidation\";\nimport Qbrslpopup from \"./Qbrslpopup\";\nimport { FaSave } from \"react-icons/fa\";\nexport default function QbrUpdate(props) {\n  const {\n    buttonPopups,\n    documentId,\n    setDcoumentId,\n    setButtonPopups,\n    customerId,\n    storeprolificparticipantid,\n    issueDetails,\n    editId,\n    type,\n    data,\n    editedData,\n    setEditedData,\n    setAddmsg,\n    selectedId,\n    setEditAddmsg,\n    setData,\n  } = props;\n  const baseUrl = environment.baseUrl;\n\n  ///------------\n  const getData = () => {\n    axios\n      .get(baseUrl + `/customersms/Qbr/getQbrDetails?cid=${customerId}`)\n\n      .then((res) => {\n        const GetData = res.data;\n        for (let i = 0; i < GetData.length; i++) {\n          GetData[i][\"SNo\"] = i + 1;\n        }\n        for (let i = 0; i < GetData.length; i++) {\n          GetData[i][\"qbr_dt\"] =\n            GetData[i][\"qbr_dt\"] == null\n              ? \"\"\n              : moment(GetData[i][\"qbr_dt\"]).format(\"DD-MMM-YYYY\");\n\n          GetData[i][\"presentation_dt\"] =\n            GetData[i][\"presentation_dt\"] == null\n              ? \"\"\n              : moment(GetData[i][\"presentation_dt\"]).format(\"DD-MMM-YYYY\");\n        }\n\n        let dataHeader = [\n          {\n            SNo: \"S.No\",\n            qbr_dt: \"QBR Date\",\n            leadPresenter: \"Lead Presenter\",\n            prolificsParticipants: \"Prolifics Participants\",\n            customerParticipants: \"Customer Participant\",\n            presentation_dt: \"Presentation Date\",\n            meeting_notes: \"Meeting Notes & Next Steps\",\n            doc_id: \"Presentation File\",\n            Action: \"Action\",\n          },\n        ];\n        // let data = [\"Action\"];\n        // setLinkColumns(data);\n        setData(dataHeader.concat(GetData));\n      });\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  const [selectedFile, setSelectedFile] = useState([]);\n  const [key, setKey] = useState(0);\n\n  const [presentationdate, setPresentationdate] = useState(null);\n  const [postpresentationdate, setPostpresentationdate] = useState(null);\n  const onFileChangeHandler = (e) => {\n    setSelectedFile(e.target.files[0]);\n  };\n  const [formEditData, setFormEditData] = useState(editedData);\n  const [ToDate, setToDate] = useState(null);\n  const [QBRdate, setQBRDate] = useState();\n  const [predate, setpreDate] = useState(null);\n\n  const [id, setid] = useState(0);\n  const [validationMessage, setValidationMessage] = useState(false);\n  const ref = useRef([]);\n  const [clickButtonPopUp, setClickButtonPopUp] = useState(false);\n  const [finalState1, setFinalState1] = useState({});\n  const [addList1, setAddList1] = useState([{}]);\n\n  const [hideSelectbutton, sethideSelectbutton] = useState(false);\n  const intialOnChangeState1 = {\n    prolifics_participants: \"\",\n  };\n  const [onChangeState1, setOnChangeState1] = useState(intialOnChangeState1);\n  const clickButtonHandlerPopUp = () => {\n    setClickButtonPopUp(true);\n    sethideSelectbutton(true);\n  };\n  const handleChange = (e) => {\n    const { id, name, value } = e.target;\n    // setOnChangeState1((prev) => ({ ...prev, [id]: value }));\n    setFormEditData((prev) => {\n      return { ...prev, [name]: value };\n    });\n  };\n  const [prolificspartId, setprolificspartId] = useState({});\n  const [value, setValue] = useState([]);\n  const [valueID, setValueID] = useState([]);\n\n  const handleAddEmail = () => {\n    let data1 = finalState1 || [];\n    data1[Object.keys(data1).length] = onChangeState1[\"prolifics_participants\"];\n    setFinalState1(data1);\n\n    setAddList1([...addList1, { prolifics_participants: \"\" }]);\n  };\n\n  useEffect(() => {}, []);\n\n  useEffect(() => {}, [selectedId]);\n\n  useEffect(() => {}, [addList1]);\n  const [prolificsparticipantdata, setProlificsparticipantdata] = useState([]);\n\n  const [displayTextEmails, setDisplayTextEmails] = useState([]);\n\n  //-------post data\n  const loggedUserId = localStorage.getItem(\"resId\");\n  var participantsArray = formEditData?.prolificsParticipants || [];\n  var emailsArray = Array.isArray(displayTextEmails) ? displayTextEmails : [];\n  var combinedString = [participantsArray, ...emailsArray].join(\",\");\n\n  ////for  payload\n\n  var participantsArray1 = editedData?.prolifics_participants || [];\n  var emailsArray = Array.isArray(displayTextEmails) ? displayTextEmails : [];\n  var combinedString1 = [participantsArray1, ...emailsArray].join(\",\");\n\n  var prolificsparticipantdata1 = prolificsparticipantdata;\n  var id1 = prolificsparticipantdata1.prolifics_participants?.id;\n\n  var combinedIds = editedData?.prolifics_participants + \",\" + valueID;\n\n  var prolificsparticipantdata1 = prolificsparticipantdata;\n  var ProlificPartID1 = prolificsparticipantdata1.prolifics_participants?.id;\n  var valueID1 = valueID;\n  var joinedValues = valueID1.join(\",\");\n\n  const handleSaveClick = () => {\n    let valid = GlobalValidation(ref);\n    if (valid == true) {\n      setValidationMessage(true);\n    }\n    if (valid) {\n      return;\n    }\n    axios\n      .postForm(\n        baseUrl +\n          `/customersms/Qbr/SaveAndUpload?loggedUserId=${loggedUserId}&fileRevision=1.0`,\n\n        {\n          file: selectedFile,\n          data: JSON.stringify({\n            customer_id: customerId,\n            qbr_dt: formEditData.qbr_dt,\n            lead_presenter: formEditData.leadPresenterID,\n            prolifics_participants: joinedValues,\n            customer_participants: formEditData.customer_participants,\n            presentation_dt: formEditData.presentation_dt,\n            doc_id: formEditData.doc_id,\n            meeting_notes: formEditData.meeting_notes,\n          }),\n        },\n        {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        }\n      )\n      .then((error) => {\n        getData();\n        setid();\n        setButtonPopups(false);\n        setAddmsg(true);\n        setTimeout(() => {\n          setAddmsg(false);\n        }, 3000);\n        setKey((prevKey) => prevKey + 1);\n      });\n  };\n  //----------put data\n\n  const handleEditClick = () => {\n    let valid = GlobalValidation(ref);\n    if (valid) {\n      setValidationMessage(true);\n      return;\n    }\n\n    const qbrDateformat = moment(formEditData.qbr_dt).format(\"yyyy-MM-DD\");\n    const presentationdtaeformat = moment(formEditData.presentation_dt).format(\n      \"yyyy-MM-DD\"\n    );\n\n    axios\n      .postForm(\n        baseUrl +\n          `/customersms/Qbr/SaveAndUpload?loggedUserId=${loggedUserId}&fileRevision=1.0`,\n\n        {\n          file: selectedFile.length < 0 ? \"\" : selectedFile,\n          data: JSON.stringify({\n            id: formEditData.id,\n            customer_id: customerId.toString(),\n            qbr_dt:\n              qbrDateformat == \"\" ||\n              qbrDateformat == null ||\n              qbrDateformat == undefined\n                ? formEditData.qbr_dt\n                : qbrDateformat,\n            lead_presenter:\n              formEditData.leadPresenterID == \"\" ||\n              formEditData.leadPresenterID == null\n                ? editedData.lead_presenter\n                : formEditData.leadPresenterID,\n            prolifics_participants: combinedIds,\n            customer_participants:\n              formEditData.customerParticipantsID == \"\" ||\n              formEditData.customerParticipantsID == undefined ||\n              formEditData.customerParticipantsID == null\n                ? editedData.customer_participants\n                : formEditData.customerParticipantsID,\n            presentation_dt:\n              presentationdtaeformat == \"\" ||\n              presentationdtaeformat == null ||\n              presentationdtaeformat == undefined ||\n              presentationdtaeformat == \"Invalid date\"\n                ? formEditData.presentation_dt\n                : presentationdtaeformat,\n            doc_id: editedData.doc_id,\n            meeting_notes:\n              formEditData.meeting_notes == \"\" ||\n              formEditData.meeting_notes == null\n                ? editedData.meetingNotes\n                : formEditData.meeting_notes,\n          }),\n        },\n        {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        }\n      )\n      .then((error) => {\n        getData();\n        setid();\n        setButtonPopups(false);\n        setEditAddmsg(true);\n        setTimeout(() => {\n          setEditAddmsg(false);\n        }, 3000);\n      });\n  };\n  const handleClear1 = () => {\n    setFormEditData((prevProps) => ({ ...prevProps, leadPresenterID: \"\" }));\n  };\n\n  const handleClear2 = () => {\n    setFormEditData((prev) => ({ ...prev, customerParticipantsID: \"\" }));\n  };\n\n  return (\n    <>\n      {/* <Draggable> */}\n      <CModal\n        size=\"xs\"\n        backdrop={\"static\"}\n        visible={buttonPopups}\n        onClose={() => {\n          setButtonPopups(false);\n        }}\n      >\n        <CModalHeader className=\"hgt22\" style={{ cursor: \"all-scroll\" }}>\n          <CModalTitle>\n            {type == \"add\" ? (\n              <span className=\"ft16\"> Add QBR</span>\n            ) : (\n              <span className=\"ft16\"> Edit QBR</span>\n            )}\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          {validationMessage ? (\n            <div className=\"statusMsg error\">\n              <span className=\"error-block\">\n                <AiFillWarning /> &nbsp; Please select the valid values for\n                highlighted fields\n              </span>\n            </div>\n          ) : (\n            \"\"\n          )}\n          <div className=\"col-md-12\">\n            <div className=\"form-group row mb-2 \">\n              <label className=\"col-4\" htmlFor=\"Date\">\n                QBR Date<span className=\"error-text\">&nbsp;&nbsp;*</span>\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n              <div className=\"col-6 textfield\">\n                <div\n                  className=\"datepicker\"\n                  ref={(ele) => {\n                    ref.current[0] = ele;\n                  }}\n                >\n                  {type == \"add\" ? (\n                    <DatePicker\n                      name=\"qbr_dt\"\n                      selected={QBRdate}\n                      id=\"qbr_dt\"\n                      showMonthDropdown\n                      showYearDropdown\n                      dropdownMode=\"select\"\n                      className=\"err cancel\"\n                      dateFormat=\"dd-MMM-yyyy\"\n                      onChange={(e) => {\n                        setFormEditData((prev) => ({\n                          ...prev,\n                          [\"qbr_dt\"]: moment(e).format(\"yyyy-MM-DD\"),\n                        }));\n                        setQBRDate(e);\n                      }}\n                      onKeyDown={(e) => {}}\n                      autoComplete=\"false\"\n                    />\n                  ) : (\n                    <DatePicker\n                      name=\"qbr_dt\"\n                      selected={predate}\n                      id=\"qbr_dt\"\n                      showMonthDropdown\n                      showYearDropdown\n                      dropdownMode=\"select\"\n                      className=\"err cancel\"\n                      value={formEditData?.qbr_dt}\n                      dateFormat=\"dd-MMM-yyyy\"\n                      onChange={(e) => {\n                        const formattedDate = moment(e).format(\"DD-MMM-yyyy\");\n                        setFormEditData((prev) => ({\n                          ...prev,\n                          qbr_dt: formattedDate,\n                        }));\n\n                        // setpreDate(e);\n                      }}\n                      onKeyDown={(e) => {}}\n                      autoComplete=\"false\"\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-12\">\n            <div className=\"form-group row mb-2\">\n              <label className=\"col-4\">\n                Lead Presenter\n                <span className=\"error-text\">&nbsp;&nbsp;*</span>\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n              <div className=\"col-6\">\n                <div\n                  className=\"autocomplete\"\n                  ref={(ele) => {\n                    ref.current[1] = ele;\n                  }}\n                >\n                  {type == \"add\" ? (\n                    <div className=\"autoComplete-container\">\n                      <ReactSearchAutocomplete\n                        items={issueDetails}\n                        type=\"Text\"\n                        name=\"lead_presenter\"\n                        id=\"lead_presenter\"\n                        placeholder=\"Type minimum 3 Characters\"\n                        issueDetails={issueDetails}\n                        getData={getData}\n                        onClear={handleClear1}\n                        className=\"AutoComplete\"\n                        onSelect={(e) => {\n                          setFormEditData((prevProps) => ({\n                            ...prevProps,\n                            leadPresenterID: e.id,\n                          }));\n                        }}\n                        showIcon={false}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"autoComplete-container\">\n                      <ReactSearchAutocomplete\n                        items={issueDetails}\n                        type=\"Text\"\n                        name=\"lead_presenter\"\n                        id=\"lead_presenter\"\n                        placeholder=\"Type minimum 3 Characters\"\n                        issueDetails={issueDetails}\n                        getData={getData}\n                        onClear={handleClear1}\n                        className=\"AutoComplete\"\n                        onSelect={(e) => {\n                          setFormEditData((prevProps) => ({\n                            ...prevProps,\n                            leadPresenterID: e.id,\n                          }));\n                        }}\n                        inputSearchString={editedData?.leadPresenter}\n                        showIcon={false}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-12\">\n            <div className=\"form-group row mb-2\">\n              <label className=\"col-4\" htmlFor=\"\">\n                Prolifics Participants<span className=\"error-text\"></span>\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n\n              {type == \"add\" ? (\n                <>\n                  <div className=\"col-6\">\n                    <div className=\"autocomplete\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Enter Resource Name\"\n                        autoComplete=\"off\"\n                        required\n                        disabled\n                        value={value}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col-1 p-0\">\n                    <button className=\"btn\">\n                      {\" \"}\n                      <MdCreate\n                        onClick={() => {\n                          clickButtonHandlerPopUp();\n                        }}\n                        title=\"Edit\"\n                      />\n                    </button>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"col-6\">\n                    <div className=\"autocomplete\">\n                      <input\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        placeholder=\"Enter Resource Name\"\n                        required\n                        disabled\n                        value={combinedString}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"col-1 p-0\">\n                    <button className=\"btn\">\n                      <MdCreate\n                        onClick={() => {\n                          clickButtonHandlerPopUp();\n                        }}\n                        title=\"Edit\"\n                      />\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n          <div className=\"col-md-12\">\n            <div className=\"form-group row mb-2\">\n              <label className=\"col-4\" htmlFor=\"customer_participants\">\n                Customer Participant<span className=\"error-text\"></span>\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n              <div className=\"col-6 textfield\">\n                <div className=\"autocomplete\">\n                  {type == \"add\" ? (\n                    <div className=\"autoComplete-container\">\n                      <ReactSearchAutocomplete\n                        items={issueDetails}\n                        type=\"Text\"\n                        name=\"customer_participants\"\n                        id=\"customer_participants\"\n                        placeholder=\"Type minimum 3 Characters\"\n                        issueDetails={issueDetails}\n                        getData={getData}\n                        // onClear={handleClear2}\n                        className=\"AutoComplete\"\n                        onSelect={(e) => {\n                          setFormEditData((prevProps) => ({\n                            ...prevProps,\n                            customer_participants: e.id,\n                          }));\n                        }}\n                        showIcon={false}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"autoComplete-container\">\n                      <ReactSearchAutocomplete\n                        items={issueDetails}\n                        type=\"Text\"\n                        name=\"customer_participants\"\n                        id=\"customer_participants\"\n                        placeholder=\"Type minimum 3 Characters\"\n                        issueDetails={issueDetails}\n                        getData={getData}\n                        onClear={handleClear2}\n                        className=\"AutoComplete\"\n                        onSelect={(e) => {\n                          setFormEditData((prevProps) => ({\n                            ...prevProps,\n                            customerParticipantsID: e.id,\n                          }));\n                        }}\n                        inputSearchString={editedData?.customerParticipants}\n                        showIcon={false}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-12\">\n            <div className=\"form-group row mb-2\">\n              <label className=\"col-4\" htmlFor=\"Date\">\n                Presentation Date<span className=\"error-text\"></span>\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n              <div className=\"col-6 textfield\">\n                {type == \"add\" ? (\n                  <DatePicker\n                    name=\"presentation_dt\"\n                    selected={postpresentationdate}\n                    id=\"presentation_dt\"\n                    showMonthDropdown\n                    showYearDropdown\n                    dropdownMode=\"select\"\n                    className=\"err cancel\"\n                    dateFormat=\"dd-MMM-yyyy\"\n                    onChange={(e) => {\n                      setFormEditData((prev) => ({\n                        ...prev,\n                        [\"presentation_dt\"]: moment(e).format(\"yyyy-MM-DD\"),\n                      }));\n                      setPostpresentationdate(e);\n                    }}\n                    onKeyDown={(e) => {}}\n                    autoComplete=\"false\"\n                  />\n                ) : (\n                  <DatePicker\n                    name=\"presentation_dt\"\n                    selected={presentationdate}\n                    id=\"presentation_dt\"\n                    value={formEditData?.presentation_dt}\n                    showMonthDropdown\n                    showYearDropdown\n                    dropdownMode=\"select\"\n                    className=\"err cancel\"\n                    dateFormat=\"dd-MMM-yyyy\"\n                    onChange={(e) => {\n                      const formattedDate = moment(e).format(\"DD-MMM-yyyy\");\n\n                      setFormEditData((prev) => ({\n                        ...prev,\n                        presentation_dt: formattedDate,\n                      }));\n\n                      // setpreDate(e);\n                    }}\n                    onKeyDown={(e) => {}}\n                    autoComplete=\"false\"\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-12\">\n            <div className=\"form-group row mb-2\" id=\"UploadDocument\">\n              <label className=\"col-4\" htmlFor=\"updateDocument\">\n                Upload Documents\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n              <div className=\"col-6\">\n                {type == \"add\" ? (\n                  <input\n                    key={key}\n                    type=\"file\"\n                    name=\"file\"\n                    className=\"fileUpload unique1 form-control\"\n                    id=\"file\"\n                    onChange={onFileChangeHandler}\n                  />\n                ) : (\n                  <input\n                    key={key}\n                    type=\"file\"\n                    name=\"doc_id\"\n                    className=\"fileUpload unique1 form-control\"\n                    id=\"doc_id\"\n                    onChange={onFileChangeHandler}\n                  />\n                )}\n              </div>\n              {/* {formEditData.doc_id == \"\" ? (\n                \"\"\n              ) : (\n                <div className=\"col-1 p-0\">\n                  <DownloadForOfflineRoundedIcon\n                    style={{ cursor: \"pointer\", color: \"#86b558\" }}\n                    onClick={() => {\n                      downloadEmployeeData();\n                    }}\n                  />\n                </div>\n              )} */}\n              <div className=\"col-12\">\n                <div className=\"col-5\"> </div>\n                <div className=\"col-7\" style={{ float: \"right\" }}>\n                  <span style={{ color: \"red\", fontSize: \"12px\" }}>\n                    Supported types jpg, jpeg, xlsx, docx, txt, pdf\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-12\">\n            <div className=\"form-group row mb-2\">\n              <label className=\"col-4\" htmlFor=\"\">\n                Meeting Notes & Next Steps\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n              <div className=\"col-6\">\n                {type == \"add\" ? (\n                  <textarea\n                    type=\"meeting_notes\"\n                    name=\"meeting_notes\"\n                    id=\"meeting_notes\"\n                    onChange={(e) => handleChange(e)}\n                  />\n                ) : (\n                  <textarea\n                    type=\"meeting_notes\"\n                    name=\"meeting_notes\"\n                    id=\"meeting_notes\"\n                    defaultValue={editedData?.meeting_notes}\n                    onChange={(e) =>\n                      setFormEditData((prev) => ({\n                        ...prev,\n                        [\"meeting_notes\"]: e.target.value,\n                      }))\n                    }\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n          <div className='className=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-3'>\n            {type == \"add\" ? (\n              <button\n                className=\"btn btn-primary \"\n                title=\"Save\"\n                onClick={handleSaveClick}\n              >\n                <FaSave />\n                Save\n              </button>\n            ) : (\n              <button\n                className=\"btn btn-primary \"\n                title=\"Save\"\n                onClick={handleEditClick}\n              >\n                <FaSave />\n                Save\n              </button>\n            )}\n          </div>\n        </CModalBody>\n      </CModal>\n      {/* </Draggable> */}\n      {clickButtonPopUp ? (\n        <Qbrslpopup\n          setprolificspartId={setprolificspartId}\n          prolificspartId={prolificspartId}\n          type={type}\n          editedData={editedData}\n          clickButtonPopUp={clickButtonPopUp}\n          setFormEditData={setFormEditData}\n          formEditData={formEditData}\n          setClickButtonPopUp={setClickButtonPopUp}\n          handleChange={handleChange}\n          handleAddEmail={handleAddEmail}\n          addList1={addList1}\n          setAddList1={setAddList1}\n          finalState1={finalState1}\n          issueDetails={issueDetails}\n          getData={getData}\n          setDisplayTextEmails={setDisplayTextEmails}\n          displayTextEmails={displayTextEmails}\n          hideSelectbutton={hideSelectbutton}\n          sethideSelectbutton={sethideSelectbutton}\n          setProlificsparticipantdata={setProlificsparticipantdata}\n          prolificsparticipantdata={prolificsparticipantdata}\n          setValue={setValue}\n          setValueID={setValueID}\n          valueID={valueID}\n          value={value}\n        />\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { Column } from \"primereact/column\";\nimport { AiFillEdit } from \"react-icons/ai\";\nimport CellRendererPrimeReactDataTable from \"../PrimeReactTableComponent/CellRendererPrimeReactDataTable\";\nimport { MdOutlinePlaylistAdd } from \"react-icons/md\";\nimport { BiCheck } from \"react-icons/bi\";\nimport { environment } from \"../../environments/environment\";\nimport \"primeicons/primeicons.css\";\nimport \"primereact/resources/themes/lara-light-indigo/theme.css\";\nimport \"primereact/resources/primereact.css\";\nimport \"primeflex/primeflex.css\";\nimport DownloadForOfflineRoundedIcon from \"@mui/icons-material/DownloadForOfflineRounded\";\n\nimport QbrUpdate from \"./QbrUpdate\";\nimport ScreenBreadcrumbs from \"../Common/ScreenBreadcrumbs\";\nimport { FaPlus } from \"react-icons/fa\";\nfunction QBR(props) {\n  const { customerId, filteredData, mainMenu } = props;\n  const dataObject = mainMenu.find((item) => item.display_name === \"QBR\");\n  const [data, setData] = useState([{}]);\n\n  const loggedUserId = localStorage.getItem(\"resId\");\n\n  let rows = 10;\n  const baseUrl = environment.baseUrl;\n  const [issueDetails, setIssueDetails] = useState([]);\n  const initialValue = {\n    ToDate: \"\",\n  };\n  const [addmsg, setAddmsg] = useState(false);\n  const initialValues = {\n    customer_id: customerId,\n    qbr_dt: \"\",\n    lead_presenter: \"\",\n    prolifics_participants: \"\",\n    customer_participants: \"\",\n    presentation_dt: \"\",\n    doc_id: \"\",\n    meeting_notes: \"\",\n  };\n\n  const [editedData, setEditedData] = useState(initialValues);\n  const [docId, setDocId] = useState([]);\n\n  const [searchdates, setSearchdates] = useState(initialValue);\n  const [editId, setEditId] = useState();\n  const [buttonPopups, setButtonPopups] = useState(false);\n  const [headerData, setHeaderData] = useState([]);\n  const [linkColumns, setLinkColumns] = useState([]);\n  const [linkColumnsRoutes, setLinkColumnsRoutes] = useState([]);\n  useEffect(() => {}, [customerId]);\n\n  const getData = () => {\n    axios\n      .get(baseUrl + `/customersms/Qbr/getQbrDetails?cid=${customerId}`)\n\n      .then((res) => {\n        const GetData = res.data;\n        for (let i = 0; i < GetData.length; i++) {\n          GetData[i][\"SNo\"] = i + 1;\n        }\n        for (let i = 0; i < GetData.length; i++) {\n          GetData[i][\"qbr_dt\"] =\n            GetData[i][\"qbr_dt\"] == null\n              ? \"\"\n              : moment(GetData[i][\"qbr_dt\"]).format(\"DD-MMM-YYYY\");\n\n          GetData[i][\"presentation_dt\"] =\n            GetData[i][\"presentation_dt\"] == null\n              ? \"\"\n              : moment(GetData[i][\"presentation_dt\"]).format(\"DD-MMM-YYYY\");\n\n          GetData[i][\"customerParticipants\"] =\n            GetData[i][\"customerParticipants\"] == null\n              ? \"\"\n              : GetData[i][\"customerParticipants\"];\n\n          GetData[i][\"customer_participants\"] =\n            GetData[i][\"customer_participants\"] == null\n              ? \"\"\n              : GetData[i][\"customer_participants\"];\n\n          GetData[i][\"prolificsParticipants\"] =\n            GetData[i][\"prolificsParticipants\"] == null\n              ? \"\"\n              : GetData[i][\"prolificsParticipants\"];\n\n          GetData[i][\"prolifics_participants\"] =\n            GetData[i][\"prolifics_participants\"] == null\n              ? \"\"\n              : GetData[i][\"prolifics_participants\"];\n        }\n        let dataHeader = [\n          {\n            SNo: \"S.No\",\n            qbr_dt: \"QBR Date\",\n            leadPresenter: \"Lead Presenter\",\n            prolificsParticipants: \"Prolifics Participants\",\n            customerParticipants: \"Customer Participant\",\n            presentation_dt: \"Presentation Date\",\n            meeting_notes: \"Metting Notes & Next Steps\",\n            doc_id: \"Presentation File\",\n            Action: \"Action\",\n          },\n        ];\n        let dataHeader1 = [\n          {\n            SNo: \"S.No\",\n            qbr_dt: \"QBR Date\",\n            leadPresenter: \"Lead Presenter\",\n            prolificsParticipants: \"Prolifics Participants\",\n            customerParticipants: \"Customer Participant\",\n            presentation_dt: \"Presentation Date\",\n            meeting_notes: \"Metting Notes & Next Steps\",\n            doc_id: \"Presentation File\",\n          },\n        ];\n        let data = [\"Action\"];\n        setLinkColumns(data);\n        setData(dataHeader.concat(GetData));\n        //  setData(dataHeader1.concat(GetData));\n      })\n      .catch((error) => {});\n  };\n  const getDatas = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Issues/getAssignedData`,\n    }).then(function (response) {\n      var res = response.data;\n      setIssueDetails(res);\n    });\n  };\n  const [editmsg, setEditAddmsg] = useState(false);\n  useEffect(() => {\n    getData();\n    getDatas();\n  }, [customerId]);\n  const [type, setType] = useState(\"add\");\n  useEffect(() => {}, [editedData]);\n  const LinkTemplate = (data) => {\n    for (let key in data) {\n      if (data[key] === null) {\n        data[key] = \"\";\n      }\n    }\n\n    let rou = linkColumns[0];\n    return (\n      <>\n        <div align=\"center\">\n          {\n            <AiFillEdit\n              type=\"edit\"\n              title=\"Edit\"\n              size=\"1.2em\"\n              color=\"orange\"\n              cursor=\"pointer\"\n              onClick={() => {\n                setEditedData(data);\n                setEditId(data.SNo);\n                setButtonPopups(true);\n                setType(\"edit\");\n              }}\n            />\n          }\n        </div>\n      </>\n    );\n  };\n  const downloadEmployeeData = (data) => {\n    const docUrl =\n      baseUrl + `/customersms/Qbr/downloadFile?documentId=${data.doc_id}`;\n\n    axios({\n      url: docUrl,\n      method: \"GET\",\n      responseType: \"blob\",\n    }).then((response) => {\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", data.file_name); //or any other extension\n      document.body.appendChild(link);\n      link.click();\n    });\n  };\n  const [documentId, setDcoumentId] = useState([]);\n  useEffect(() => {}, []);\n  const presentationFile = (data) => {\n    return (\n      <div align=\"center\" data-toggle=\"tooltip\" title=\"Download Document\">\n        {data.doc_id != \"\" ? (\n          <DownloadForOfflineRoundedIcon\n            style={{ cursor: \"pointer\", color: \"#86b558\" }}\n            onClick={() => {\n              downloadEmployeeData(data);\n            }}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  };\n  const SNoCenter = (data) => {\n    return (\n      <div align=\"center\" data-toggle=\"tooltip\" title={data.SNo}>\n        {data.SNo}\n      </div>\n    );\n  };\n  const prolificPart = (data) => {\n    return (\n      <div\n        data-toggle=\"tooltip\"\n        className=\"ellipsis\"\n        title={data.prolificsParticipants}\n      >\n        {data.prolificsParticipants}\n      </div>\n    );\n  };\n  const leadPrese = (data) => {\n    return (\n      <div\n        data-toggle=\"tooltip\"\n        className=\"ellipsis\"\n        title={data.leadPresenter}\n      >\n        {data.leadPresenter}\n      </div>\n    );\n  };\n  const qbrDates = (data) => {\n    return (\n      <div data-toggle=\"tooltip\" title={data.qbr_dt}>\n        {data.qbr_dt}\n      </div>\n    );\n  };\n  const customerParti = (data) => {\n    return (\n      <div\n        data-toggle=\"tooltip\"\n        className=\"ellipsis\"\n        title={data.customerParticipants}\n      >\n        {data.customerParticipants}\n      </div>\n    );\n  };\n  const presentationDates = (data) => {\n    return (\n      <div data-toggle=\"tooltip\" title={data.presentation_dt}>\n        {data.presentation_dt}\n      </div>\n    );\n  };\n  const meetingNotes = (data) => {\n    return (\n      <div\n        data-toggle=\"tooltip\"\n        className=\"ellipsis\"\n        title={data.meeting_notes}\n      >\n        {data.meeting_notes}\n      </div>\n    );\n  };\n  const dynamicColumns = Object.keys(headerData)?.map((col, i) => {\n    if (dataObject.is_write) {\n      return (\n        <Column\n          sortable\n          key={col}\n          body={\n            col === \"Action\"\n              ? LinkTemplate\n              : col === \"doc_id\"\n              ? presentationFile\n              : col === \"SNo\"\n              ? SNoCenter\n              : col === \"prolificsParticipants\"\n              ? prolificPart\n              : col === \"leadPresenter\"\n              ? leadPrese\n              : col === \"qbr_dt\"\n              ? qbrDates\n              : col === \"customerParticipants\"\n              ? customerParti\n              : col === \"presentation_dt\"\n              ? presentationDates\n              : col === \"meeting_notes\"\n              ? meetingNotes\n              : \"\"\n          }\n          field={col}\n          header={headerData[col]}\n        />\n      );\n    } else {\n      // Include only specific columns when dataObject.is_write is false\n      if (\n        col === \"doc_id\" ||\n        col === \"SNo\" ||\n        col === \"prolificsParticipants\" ||\n        col === \"leadPresenter\" ||\n        col === \"qbr_dt\" ||\n        col === \"customerParticipants\" ||\n        col === \"presentation_dt\" ||\n        col === \"meeting_notes\"\n      ) {\n        return (\n          <Column\n            sortable\n            key={col}\n            body={\n              col === \"Action\"\n                ? LinkTemplate\n                : col === \"doc_id\"\n                ? presentationFile\n                : col === \"SNo\"\n                ? SNoCenter\n                : col === \"prolificsParticipants\"\n                ? prolificPart\n                : col === \"leadPresenter\"\n                ? leadPrese\n                : col === \"qbr_dt\"\n                ? qbrDates\n                : col === \"customerParticipants\"\n                ? customerParti\n                : col === \"presentation_dt\"\n                ? presentationDates\n                : col === \"meeting_notes\"\n                ? meetingNotes\n                : \"\"\n            }\n            field={col}\n            header={headerData[col]}\n          />\n        );\n      } else {\n        return null; // Exclude other columns\n      }\n    }\n  });\n\n  useEffect(() => {\n    data[0] && setHeaderData(JSON.parse(JSON.stringify(data[0])));\n  }, [data]);\n\n  const [custName, setCustName] = useState([]);\n\n  const getCustomer = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/customersms/Customers/getProjectName?cid=${customerId}`,\n    }).then(function (response) {\n      var resp = response.data;\n      setCustName(resp);\n    });\n  };\n  useEffect(() => {\n    getCustomer();\n  }, []);\n  const [cus, setCusName] = useState([]);\n\n  const getCustomerName = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/customersms/Customers/getCustomerName?cid=${customerId}`,\n    }).then(function (response) {\n      let resp = response.data;\n      setCusName(resp);\n    });\n  };\n  useEffect(() => {\n    getCustomerName();\n  }, [customerId]);\n\n  const [routes, setRoutes] = useState([]);\n  let textContent = \"Customers\";\n  let currentScreenName = [\"Customer Search\", \"QBR\"];\n\n  useEffect(() => {\n    getMenus();\n  }, []);\n\n  const getMenus = () => {\n    // setMenusData\n\n    axios({\n      method: \"GET\",\n      url: baseUrl + `/CommonMS/master/getMenus?loggedUserId=${loggedUserId}`,\n    }).then((resp) => {\n      let data = resp.data;\n\n      data.forEach((item) => {\n        if (item.display_name === textContent) {\n          setRoutes([item]);\n        }\n      });\n    });\n  };\n\n  return (\n    <div>\n      {addmsg ? (\n        <div className=\"statusMsg success\">\n          <span className=\"errMsg\">\n            <BiCheck /> &nbsp; Saved successfully\n          </span>\n        </div>\n      ) : (\n        \"\"\n      )}\n      {editmsg ? (\n        <div className=\"statusMsg success\">\n          <span className=\"errMsg\">\n            <BiCheck /> &nbsp; Update successfully\n          </span>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <div className=\"col-md-12\">\n        <div className=\"pageTitle\">\n          <div className=\"childOne\">\n            <h2>{cus}</h2>\n          </div>\n          <div className=\"childTwo\">\n            <h2>QBR</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n      </div>\n      <ScreenBreadcrumbs\n        routes={routes}\n        currentScreenName={currentScreenName}\n      />\n\n      <div className=\"row\">\n        <div className=\"col-md-11\"></div>\n        <div className=\"col-md-1\">\n          {dataObject.is_write == true ? (\n            <button\n              onClick={() => {\n                setButtonPopups(true);\n                setType(\"add\");\n              }}\n              className=\"btn btn-primary mt-2 mb-2\"\n              style={{ width: \"100px\" }}\n              title=\"Add QBR\"\n            >\n              <FaPlus />\n              Add QBR\n            </button>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n      <div className=\"group mb-3 customCard\">\n        <CellRendererPrimeReactDataTable\n          data={data}\n          linkColumns={linkColumns}\n          linkColumnsRoutes={linkColumnsRoutes}\n          dynamicColumns={dynamicColumns}\n          headerData={headerData}\n          setHeaderData={setHeaderData}\n          rows={rows}\n        />\n      </div>\n      {buttonPopups ? (\n        <QbrUpdate\n          setSearchdates={setSearchdates}\n          issueDetails={issueDetails}\n          type={type}\n          setData={setData}\n          data={data}\n          customerId={customerId}\n          setEditedData={setEditedData}\n          editId={editId}\n          editedData={editedData}\n          setAddmsg={setAddmsg}\n          setEditAddmsg={setEditAddmsg}\n          buttonPopups={buttonPopups}\n          setButtonPopups={setButtonPopups}\n          setDcoumentId={setDcoumentId}\n          documentId={documentId}\n        />\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\nexport default QBR;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.49 2 2 6.49 2 12s4.49 10 10 10 10-4.49 10-10S17.51 2 12 2zm-1 8V7c0-.55.45-1 1-1s1 .45 1 1v3h1.79c.45 0 .67.54.35.85l-2.79 2.79c-.2.2-.51.2-.71 0l-2.79-2.79c-.31-.31-.09-.85.36-.85H11zm5 7H8c-.55 0-1-.45-1-1s.45-1 1-1h8c.55 0 1 .45 1 1s-.45 1-1 1z\"\n}), 'DownloadForOfflineRounded');\nexports.default = _default;"],"names":["Qbrslpopup","props","clickButtonPopUp","setValueID","sethideSelectbutton","valueID","hideSelectbutton","prolificspartId","setprolificspartId","setClickButtonPopUp","setFormEditData","handleAddEmail","formEditData","type","details","handleChange","finalState1","onChangeState1","setDisplayTextEmails","setProlificsparticipantdata","prolificsparticipantdata","issueDetails","editedData","setValue","value","displayTextEmails","useState","displayState1","setDisplayState1","validationmessage","setValidationMessage","ref","useRef","storeprolificparticipantid","useEffect","DisplayList","handleSubmit","undefined","Object","keys","map","d","i","onClick","e","data","initialData","target","checked","push","index","indexOf","splice","checkedData","prolificsParticipants","isChecked","setIsChecked","handleClear","prevProps","prolifics_participants","size","visible","onClose","className","style","cursor","ele","current","ReactSearchAutocomplete","items","name","id","placeholder","onClear","onSelect","showIcon","newValue","GlobalValidation","newValueID","prevValue","addHandler","title","split","participant","participantId","onChange","trim","length","prevState","disabled","QbrUpdate","buttonPopups","setButtonPopups","documentId","setDcoumentId","customerId","editId","setAddmsg","setEditedData","selectedId","setEditAddmsg","setData","baseUrl","environment","getData","axios","then","res","GetData","moment","format","SNo","qbr_dt","leadPresenter","customerParticipants","presentation_dt","meeting_notes","doc_id","Action","concat","selectedFile","setSelectedFile","key","setKey","presentationdate","postpresentationdate","setPostpresentationdate","onFileChangeHandler","files","QBRdate","setQBRDate","predate","setid","validationMessage","setFinalState1","addList1","setAddList1","clickButtonHandlerPopUp","prev","loggedUserId","localStorage","getItem","participantsArray","emailsArray","Array","isArray","combinedString","join","participantsArray1","combinedIds","joinedValues","handleClear1","leadPresenterID","backdrop","htmlFor","selected","showMonthDropdown","showYearDropdown","dropdownMode","dateFormat","onKeyDown","autoComplete","formattedDate","inputSearchString","required","customer_participants","customerParticipantsID","float","color","fontSize","defaultValue","valid","file","JSON","stringify","customer_id","lead_presenter","headers","error","setTimeout","prevKey","qbrDateformat","presentationdtaeformat","toString","meetingNotes","data1","dataObject","filteredData","mainMenu","find","item","display_name","setIssueDetails","addmsg","initialValues","ToDate","setSearchdates","setEditId","headerData","setHeaderData","linkColumns","setLinkColumns","linkColumnsRoutes","editmsg","catch","method","url","response","setType","LinkTemplate","align","presentationFile","DownloadForOfflineRounded","docUrl","responseType","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","file_name","body","appendChild","click","downloadEmployeeData","SNoCenter","prolificPart","leadPrese","qbrDates","customerParti","presentationDates","dynamicColumns","col","is_write","sortable","field","header","parse","setCustName","resp","cus","setCusName","routes","setRoutes","getMenus","forEach","ScreenBreadcrumbs","currentScreenName","width","CellRendererPrimeReactDataTable","rows","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx"],"sourceRoot":""}