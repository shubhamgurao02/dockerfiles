{"version":3,"file":"static/js/5312.a4b513ce.chunk.js","mappings":"4dAw1BA,MA90BA,SAAiCA,GAI/B,IAAMC,GAAkBC,EAAAA,EAAAA,QAAO,MAE7BC,EAUEH,EAVFG,UACAC,EASEJ,EATFI,WACAC,EAQEL,EARFK,MACAC,EAOEN,EAPFM,WACAC,EAMEP,EANFO,aACAC,EAKER,EALFQ,SACAC,EAIET,EAJFS,SACAC,EAGEV,EAHFU,aACAC,EAEEX,EAFFW,OACAC,EACEZ,EADFY,kBAGF,GAAwBC,EAAAA,EAAAA,WAAS,OAAIF,IAAQ,eAAhCG,GAAF,KAAS,MACpB,GAA0BD,EAAAA,EAAAA,UAAS,IAAG,eAA/BE,EAAK,KAAEC,EAAQ,KACtB,GAAsCH,EAAAA,EAAAA,UAAS,IAAG,eAA3CI,EAAW,KAAEC,EAAc,KAC5BC,EAAUC,EAAAA,EAAAA,QAChB,GAA4BP,EAAAA,EAAAA,WAAS,GAAM,eAApCQ,EAAM,KAAEC,EAAS,KACxB,GAAsBT,EAAAA,EAAAA,UAAS,IAAG,eAA3BU,EAAG,KAAEC,EAAM,KAClB,GAAgCX,EAAAA,EAAAA,UAAS,IAAG,eAArCY,EAAQ,KAAEC,EAAW,MAW5BC,EAAAA,EAAAA,YAAU,WACRb,EAAQH,EACV,GAAG,CAACA,KAMJgB,EAAAA,EAAAA,YAAU,WACR,GAAkB,gBAAdrB,EAA8B,CAChC,IAAMsB,EAAc,yCAAG,2GACFC,IAAM,CACvBC,IAAKX,EAAO,gCACX,KAAD,EAFIY,EAAI,QAIVd,GADIA,EAAcc,EAAKC,MACGC,QAAO,SAACC,GAAG,OAAKA,EAAIC,OAAS,CAAC,KAC5CC,KAAK,CAAED,MAAO,IAAKE,MAAO,sBACtCnB,EAAeD,GAAa,2CAC7B,kBARmB,mCASpBW,GACF,CAMA,GAAkB,MAAdtB,EAAoB,CAEpBuB,IAAAA,IAEIV,EAAO,4DAERmB,MAAK,SAACC,GACL,IAAIC,EAAU,GACVR,EAAOO,EAASP,KACpBA,EAAKI,KAAK,CAAEK,GAAI,EAAGC,WAAY,eAC/BV,EAAKW,OAAS,GACZX,EAAKY,SAAQ,SAACC,GACZ,IAAIC,EAAa,CACfT,MAAOQ,EAAEH,WACTP,MAAOU,EAAEJ,IAEXD,EAAQJ,KAAKU,EACf,IACFpB,EAAYc,EACd,GAGN,CAKA,GAAkB,OAAdlC,EAAqB,EACL,WAChB,IAAMyC,EAAaxC,EACnBsB,IAAM,CACJmB,OAAQ,MACRlB,IACEX,EAAO,8DACgD4B,KACxDT,MAAK,SAACW,GACP,IAAIC,EAAS,GACTlB,EAAOiB,EAAIjB,KACfA,EAAKW,OAAS,GACZX,EAAKY,SAAQ,SAACC,GACZ,IAAIM,EAAS,CACXd,MAAOQ,EAAEH,WACTP,MAAOU,EAAEJ,IAEXS,EAAOd,KAAKe,EACd,IACF3B,EAAO0B,EACT,GACF,CACAE,EACF,CACF,GAAG,IAKH,IAAMC,EAAOC,IAAOjD,GAAOkD,QAAQ,SAASC,OAAO,cAC7CC,EAAqB,SAACC,EAAOC,GACjC1D,EAAgB2D,QAAU,IAAIC,gBAC9BhC,IAAM,CACJmB,OAAQ,OACRlB,IACEX,EAAO,sEAET2C,OAAQ7D,EAAgB2D,QAAQE,OAChC9B,KAAM,CACJ3B,MAAOgD,EACPU,SAAU3D,EAAW2D,SACrBC,OAAQ5D,EAAW4D,OACnBC,UAC0B,mBAAxB7D,EAAW6D,UACP,gBACA7D,EAAW6D,UACjBC,SAAU9D,EAAW8D,SACrBC,WAAY/D,EAAW+D,WACvBC,SAAwB,gBAAd9D,GAAgC,EAAIF,EAAWgE,SACzDC,UACgB,YAAd/D,GACK,EACsB,KAAvBF,EAAWkE,SACX5D,EACAN,EAAWkE,SACjBC,MAAqB,WAAdjE,GAA2B,EAAIF,EAAWmE,MACjDC,OAAQpE,EAAWoE,OACnBC,OACuB,wBAArBrE,EAAWqE,QAAoC,EAAIrE,EAAWqE,OAChEC,OAAsB,OAAdpE,GAAuB,EAAIF,EAAWsE,OAC9CC,MAAqB,MAAdrE,GAAsB,EAAIF,EAAWuE,MAC5CjB,MAAOA,EACPkB,iBAAiB,KAGlBtC,MAAK,SAACW,GACL3B,GAAU,GACV,IAAIuD,EAAW5B,EAAIjB,KAAKA,KAExB6C,EAAWA,EAASC,KAAI,SAACC,GACvB,OAAO,kBACFA,GAAI,IACPC,KAAMD,EAAKC,KAAO,IAAMtB,GAE5B,IACA1C,GAAS,SAACiE,GACR,IAAMC,EAAmBD,EAAUE,WAAU,SAACC,GAC5C,MAA4B,cAArBxE,GACgB,aAArBA,GACqB,SAArBA,GACGwE,EAAKC,IAAIC,SAAS,SACjBF,EAAKC,IAAIC,SAAS1E,KAClBwE,EAAKJ,OAASrB,EAChByB,EAAKC,MAAQzE,GAAqBwE,EAAKJ,OAASrB,CACtD,IAEA,OADA4B,QAAQC,IAAIN,IACc,IAAtBA,EACI,GAAN,eACKD,EAAUQ,MAAM,EAAGP,EAAmB,KAAE,OACxCL,EAASC,KAAI,SAAC9C,EAAM0D,GAAC,yBAAW1D,GAAI,IAAES,GAAIiB,EAAQgC,EAAI,GAAC,MAAI,OAC3DT,EAAUQ,MAAMP,EAAmB,KAGjCD,CAEX,GACF,IACCU,OAAM,SAACC,GACNtE,GAAU,GACViE,QAAQC,IAAI,UAAWI,EACzB,GACJ,GAUAjE,EAAAA,EAAAA,YAAU,WAER,IADA,IAAIc,EAAK,EACAiD,EAAI,EAAGA,EAAIvF,EAAUwC,OAAQ+C,IACpCvF,EAAUuF,GAAGjD,GAAKA,IAClBA,EACS,KAAO,KACdA,GAAM,KAIVzB,EAAS6E,EAAW1F,GACtB,GAAG,CAACA,IAEJ,IAAM0F,EAAa,SAACC,EAAWC,GAC7BA,GAAO,QACLtD,GAAI,KACJuD,SAAU,WACVC,SAAU,WACPF,GAEL,IAAMG,EAAa,CAAC,EACdC,EAAO,GACPF,EAAWF,EAAQE,SAmBzB,OAlBAH,EAAUlD,SAAQ,SAACwC,GACjB,IAAMgB,EAAShB,EAAKW,EAAQtD,IACtB4D,EAAejB,EAAKW,EAAQC,UAElCE,EAAWE,IAAO,0BACfH,EAAW,IACTb,GACAc,EAAWE,IAEhBF,EAAWG,GAAgBH,EAAWG,KAAa,UAAOJ,EAAW,IACrEC,EAAWG,GAAcJ,GAAU7D,KAAK8D,EAAWE,GACrD,IAEAE,OAAOC,OAAOL,GAAYtD,SAAQ,SAAC4D,GACF,qBAApBA,EAAIT,EAAQtD,KACrB0D,EAAK/D,KAAI,MAAT+D,GAAI,OAASK,EAAIP,IAErB,IACOE,CACT,EAKMM,EAAiB,CAErB,CACEC,QACE,gBAAKC,UAAU,mBAAkB,SACf,iBAAfrG,GACC,iBAAKqG,UAAU,oBAAmB,WAChC,gBAAKA,UAAU,kBACf,gBAAKA,UAAU,YAAW,UACxB,uBAAG,uBAGU,OAAfrG,GACF,iBAAKqG,UAAU,eAAc,WAC3B,gBAAKA,UAAU,kBACf,gBAAKA,UAAU,YAAW,UACxB,uBAAG,YAGU,QAAfrG,GACF,iBAAKqG,UAAU,eAAc,WAC3B,gBAAKA,UAAU,kBACf,gBAAKA,UAAU,YAAW,UACxB,uBAAG,aAGU,aAAfrG,GACF,iBAAKqG,UAAU,mBAAkB,WAC/B,gBAAKA,UAAU,kBACf,gBAAKA,UAAU,YAAW,UACxB,uBAAG,kBAGU,YAAfrG,GACF,iBAAKqG,UAAU,gBAAe,WAC5B,gBAAKA,UAAU,kBACf,gBAAKA,UAAU,YAAW,UACxB,uBAAG,iBAIP,KAINC,YAAa,OACbC,gBAAgB,EAEhBC,YAAa,YAAsB,IAAnBC,EAAI,EAAJA,KAAW,EAALC,MAEpB,GAAkB,gBAAd1G,EAA8B,CAChC,IAAM2G,EAAahG,EAAYiG,MAC7B,SAACC,GAAG,OAAKA,EAAI9E,QAAU0E,EAAKK,UAAU,IAGxC,GAAsCvG,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA3CwG,EAAW,KAAEC,EAAc,KA8BlC,GAAIL,EAAY,CACd,IAAQ9E,EAAiB8E,EAAjB9E,MACFoF,GADmBN,EAAV5E,MACEgF,EAAYlF,IAC7B,OACE,kBACEqF,MAAO,CAAEC,OAAQ,WACjBtF,MAAO8E,EAAW9E,MAClBuF,QAAS,YAnCK,WAClB,GAAIT,EAAY,CACd,IAAQ9E,EAAiB8E,EAAjB9E,MAAOE,EAAU4E,EAAV5E,MACOtB,EAAM4G,MAAK,SAACvC,GAChC,OAAOA,EAAKJ,KAAKM,SAAS,IAAD,OAAKnD,GAChC,KAGEmF,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBzF,GAAQ,GAAK,IAEhBnB,GAAS,SAACiE,GAAS,OACjBA,EAAUhD,QAAO,SAACmD,GAAI,OAAMA,EAAKJ,KAAKM,SAAS,IAAD,OAAKnD,GAAQ,GAAC,MAG9DmF,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBzF,GAAQ,GAAI,IAEf0F,YAAW,WACTvG,GAAU,EACZ,GAAG,KACHmC,EAAmBtB,EAAOE,GAE9B,CACF,CAUQyF,EACF,EACAnB,UAAW,SAAS,UAEnBY,GAAW,SAAC,MAAmB,KAAM,SAAC,MAAoB,IAAK,KAChE,cAAGZ,UAAU,OAAOoB,MAAOd,EAAW5E,MAAM,SACzC4E,EAAW5E,UAIpB,CAAO,MACL,CAAC,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,cAAcsF,MACpD,SAACK,GAAM,OAAKjB,EAAKK,WAAW9B,SAAS0C,EAAO,KAI5C,iBACErB,UAAW,QACXa,MAAO,CAAES,QAAS,OAAQC,eAAgB,UAAW,UAErD,cAAGvB,UAAU,QAAQoB,MAAOhB,EAAKK,WAAW,SACzCL,EAAKK,WAAWe,MAAM,KAAK,QAMhC,6BACE,uBAAG,YAAY,MAIvB,CAGK,GAAkB,YAAd7H,EAA0B,CACjC,IAAM8H,EAAO3H,EAASyG,MAAK,SAACC,GAAG,OAAKA,EAAIkB,WAAatB,EAAKK,UAAU,IAEpE,GAAsCvG,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA3CwG,EAAW,KAAEC,EAAc,KA+BlC,GAAIc,EAAM,CACR,IACMb,EAAWF,EADFe,EAAP3F,IAER,OACE,kBACE+E,MAAO,CAAEC,OAAQ,WACjBtF,MAAOiG,EAAK3F,GACZiF,QAAS,YApCK,WAClB,GAAIU,EAAM,CACR,IAAQ3F,EAAiB2F,EAAjB3F,GAAI4F,EAAaD,EAAbC,SACUtH,EAAM4G,MAAK,SAACvC,GAChC,OAAOA,EAAKJ,KAAKM,SAAS,IAAD,OAAK7C,GAChC,KAGE6E,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBnF,GAAK,GAAK,IAEbzB,GAAS,SAACiE,GAAS,OACjBA,EAAUhD,QAAO,SAACmD,GAAI,OAAMA,EAAKJ,KAAKM,SAAS,IAAD,OAAK7C,GAAK,GAAC,MAG3D6E,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBnF,GAAK,GAAI,IAGZoF,YAAW,WACTvG,GAAU,EACZ,GAAG,KACHmC,EAAmBhB,EAAI4F,GAE3B,CACF,CAUQP,EACF,EACAnB,UAAW,SAAS,UAEnBY,GAAW,SAAC,MAAmB,KAAM,SAAC,MAAoB,IAAK,KAChE,cAAGZ,UAAU,SAASoB,MAAOK,EAAKC,SAAS,SACxCD,EAAKC,aAId,CAAO,MACL,CAAC,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,cAAcV,MACpD,SAACK,GAAM,OAAKjB,EAAKK,WAAW9B,SAAS0C,EAAO,KAI5C,iBACErB,UAAW,QACXa,MAAO,CAAES,QAAS,OAAQC,eAAgB,UAAW,UAErD,cAAGvB,UAAU,QAAQoB,MAAOhB,EAAKK,WAAW,SACzCL,EAAKK,WAAWe,MAAM,KAAK,QAMhC,6BACE,uBAAG,YAAY,MAIvB,CAGK,GAAkB,WAAd7H,EAAyB,CAChC,IAAMgI,EAAO9H,EAAS0G,MAAK,SAACC,GAAG,OAAKA,EAAInC,OAAS+B,EAAKK,UAAU,IAEhE,GAAsCvG,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA3CwG,EAAW,KAAEC,EAAc,KA+BlC,GAAIgB,EAAM,CACR,IAAQ7F,EAAa6F,EAAb7F,GACF8E,GADee,EAATtD,KACKqC,EAAY5E,IAC7B,OACE,kBACE+E,MAAO,CAAEC,OAAQ,WACjBtF,MAAOmG,EAAK7F,GACZiF,QAAS,YApCK,WAClB,GAAIY,EAAM,CACR,IAAQ7F,EAAa6F,EAAb7F,GAAIuC,EAASsD,EAATtD,KACUjE,EAAM4G,MAAK,SAACvC,GAChC,OAAOA,EAAKJ,KAAKM,SAAS,IAAD,OAAK7C,GAChC,KAGE6E,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBnF,GAAK,GAAK,IAEbzB,GAAS,SAACiE,GAAS,OACjBA,EAAUhD,QAAO,SAACmD,GAAI,OAAMA,EAAKJ,KAAKM,SAAS,IAAD,OAAK7C,GAAK,GAAC,MAG3D6E,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBnF,GAAK,GAAI,IAGZoF,YAAW,WACTvG,GAAU,EACZ,GAAG,KACHmC,EAAmBhB,EAAIuC,GAE3B,CACF,CAUQ8C,EACF,EACAnB,UAAW,SAAS,UAEnBY,GAAW,SAAC,MAAmB,KAAM,SAAC,MAAoB,IAAK,KAChE,cAAGZ,UAAU,SAASoB,MAAOO,EAAKtD,KAAK,SACpCsD,EAAKtD,SAId,CAAO,MACL,CAAC,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,cAAc2C,MACpD,SAACK,GAAM,OAAKjB,EAAKK,WAAW9B,SAAS0C,EAAO,KAI5C,iBACErB,UAAW,QACXa,MAAO,CAAES,QAAS,OAAQC,eAAgB,UAAW,UAErD,cAAGvB,UAAU,QAAQoB,MAAOhB,EAAKK,WAAW,SACzCL,EAAKK,WAAWe,MAAM,KAAK,QAMhC,6BACE,uBAAG,YAAY,MAIvB,CAGK,GAAkB,OAAd7H,EAAqB,CAC5B,IAAMiI,EAAOhH,EAAI2F,MAAK,SAACC,GAAG,OAAKA,EAAI9E,QAAU0E,EAAKK,UAAU,IAE5D,GAAsCvG,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA3CwG,EAAW,KAAEC,EAAc,KA8BlC,GAAIiB,EAAM,CACR,IACMhB,EAAWF,EADCkB,EAAVpG,OAER,OACE,kBACEqF,MAAO,CAAEC,OAAQ,WACjBtF,MAAOoG,EAAKpG,MACZuF,QAAS,YAnCK,WAClB,GAAIa,EAAM,CACR,IAAQpG,EAAiBoG,EAAjBpG,MAAOE,EAAUkG,EAAVlG,MACOtB,EAAM4G,MAAK,SAACvC,GAChC,OAAOA,EAAKJ,KAAKM,SAAS,IAAD,OAAKnD,GAChC,KAGEmF,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBzF,GAAQ,GAAK,IAEhBnB,GAAS,SAACiE,GAAS,OACjBA,EAAUhD,QAAO,SAACmD,GAAI,OAAMA,EAAKJ,KAAKM,SAAS,IAAD,OAAKnD,GAAQ,GAAC,MAG9DmF,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBzF,GAAQ,GAAI,IAGf0F,YAAW,WACTvG,GAAU,EACZ,GAAG,KACHmC,EAAmBtB,EAAOE,GAE9B,CACF,CASQyF,EACF,EACAnB,UAAW,SAAS,UAEnBY,GAAW,SAAC,MAAmB,KAAM,SAAC,MAAoB,IAAK,KAChE,cAAGZ,UAAU,QAAQoB,MAAOQ,EAAKlG,MAAM,SACpCkG,EAAKlG,UAId,CAAO,MACL,CAAC,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,cAAcsF,MACpD,SAACK,GAAM,OAAKjB,EAAKK,WAAW9B,SAAS0C,EAAO,KAI5C,iBACErB,UAAW,QACXa,MAAO,CAAES,QAAS,OAAQC,eAAgB,UAAW,UAErD,cAAGvB,UAAU,QAAQoB,MAAOhB,EAAKK,WAAW,SACzCL,EAAKK,WAAWe,MAAM,KAAK,QAMhC,6BACE,uBAAG,YAAY,MAIvB,CAGK,GAAkB,MAAd7H,EAAoB,CAC3B,IAAMkI,EAAM/G,EAASyF,MAAK,SAACC,GAAG,OAAKA,EAAI9E,QAAU0E,EAAKK,UAAU,IAEhE,GAAsCvG,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA3CwG,EAAW,KAAEC,EAAc,KA8BlC,GAAIkB,EAAK,CACP,IACMjB,EAAWF,EADCmB,EAAVrG,OAER,OACE,kBACEqF,MAAO,CAAEC,OAAQ,WACjBtF,MAAOqG,EAAIrG,MACXuF,QAAS,YAnCK,WAClB,GAAIc,EAAK,CACP,IAAQrG,EAAiBqG,EAAjBrG,MAAOE,EAAUmG,EAAVnG,MACOtB,EAAM4G,MAAK,SAACvC,GAChC,OAAOA,EAAKJ,KAAKM,SAAS,IAAD,OAAKnD,GAChC,KAGEmF,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBzF,GAAQ,GAAK,IAEhBnB,GAAS,SAACiE,GAAS,OACjBA,EAAUhD,QAAO,SAACmD,GAAI,OAAMA,EAAKJ,KAAKM,SAAS,IAAD,OAAKnD,GAAQ,GAAC,MAG9DmF,GAAe,SAACM,GAAe,yBAC1BA,GAAe,cACjBzF,GAAQ,GAAI,IAGf0F,YAAW,WACTvG,GAAU,EACZ,GAAG,KACHmC,EAAmBtB,EAAOE,GAE9B,CACF,CASQyF,EACF,EACAnB,UAAW,SAAS,UAEnBY,GAAW,SAAC,MAAmB,KAAM,SAAC,MAAoB,IAAK,KAChE,cAAGZ,UAAU,QAAQoB,MAAOS,EAAInG,MAAM,SACnCmG,EAAInG,UAIb,CAAO,MACL,CAAC,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,cAAcsF,MACpD,SAACK,GAAM,OAAKjB,EAAKK,WAAW9B,SAAS0C,EAAO,KAI5C,iBACErB,UAAW,QACXa,MAAO,CAAES,QAAS,OAAQC,eAAgB,UAAW,UAErD,cAAGvB,UAAU,QAAQoB,MAAOhB,EAAKK,WAAW,SACzCL,EAAKK,WAAWe,MAAM,KAAK,QAMhC,6BACE,uBAAG,YAAY,MAIvB,CACF,GAIF,CACEzB,OAAQ,GACRE,YAAY,MACZ6B,KAAM,gBAAG1B,EAAI,EAAJA,KAAI,OACX,iBACEJ,UACE,oCAAoC+B,KAAK3B,EAAK4B,IAAIC,SAAS5D,MACvD,mBACe,iBAAf1E,EACA,YACe,aAAfA,EACA,cACe,YAAfA,EACA,cACe,QAAfA,GAEe,OAAfA,EADA,aAGA,UAENkH,MAAO,CACLqB,WAAY,QAEdd,MAAOhB,EAAKK,WAAW,SAEtBL,EAAKK,WAAW9B,SAAS,QAC1ByB,EAAKK,WAAW9B,SAAS,SACvB,gCAAE,YAAcyB,EAAKK,cAErBL,EAAKK,YAEF,GAGX,CACEV,OAAQ,QACRE,YAAY,QACZ6B,KAAM,kBAAG1B,EAAI,EAAJA,KAAI,OACX,gCAC6B,yBAA1BA,EAAK4B,IAAIC,SAASvD,KACO,uBAA1B0B,EAAK4B,IAAIC,SAASvD,KACQ,gBAA1B0B,EAAK4B,IAAIC,SAASvD,KACQ,6BAA1B0B,EAAK4B,IAAIC,SAASvD,KACQ,eAA1B0B,EAAK4B,IAAIC,SAASvD,KAChB,iBAAMmC,MAAO,CAAES,QAAS,QAASa,MAAO,QAAS,UAC/C,uBAAG,QAGL,IAEF,iBAAMtB,MAAO,CAAES,QAAS,QAASa,MAAO,SAAWnC,UAAU,QAAO,UAClE,yBAC8B,QAD9B,EACGoC,KAAKC,MAAMjC,EAAKK,mBAAW,aAA3B,EAA6B6B,eAAe,SAClB,mBAA1BlC,EAAK4B,IAAIC,SAASvD,KACjB,0BAA2B,OAApB0B,EAAKK,WAAsB,GAAK,MAEvC,UAIL,IA+CT,OAxCAzG,EAAOiC,SAAQ,SAACmC,EAAMmE,GACpB,GAAIA,EAAQ,GAAc,UAATnE,EAAkB,CACjC,IAIM2B,EAJU,IAAIyC,KAAK,GAAD,OACnBpE,EAAKU,MAAM,EAAG,GAAE,YAAIV,EAAKU,MAAM,EAAG,GAAE,YAAIV,EAAKU,MAAM,EAAG,MAIxD2D,mBAAmB,QAAS,CAAE/I,MAAO,QAASgJ,KAAM,YACpDC,QAAQ,IAAK,KAChB7C,EAAerE,KAAK,CAClBsE,OAAAA,EACAE,YAAY,GAAD,OAAK7B,GAChB4B,UAAW,WACX8B,KAAM,sBAAG1B,EAAI,EAAJA,KAAI,OACX,gCAC4B,wBAAzBA,EAAK4B,IAAIC,SAASvD,KACM,sBAAzB0B,EAAK4B,IAAIC,SAASvD,KACO,eAAzB0B,EAAK4B,IAAIC,SAASvD,KACO,4BAAzB0B,EAAK4B,IAAIC,SAASvD,KACO,cAAzB0B,EAAK4B,IAAIC,SAASvD,KAChB,iBAAMmC,MAAO,CAAES,QAAS,QAASa,MAAO,QAAS,SAAC,MAElD,IAEF,kBAAMtB,MAAO,CAAES,QAAS,QAASa,MAAO,SAAU,UACH,KAA7B,QAAf,EAAA/B,EAAKK,kBAAU,aAAf,EAAiB6B,eAAe,gBACWM,IAA7B,QAAf,EAAAxC,EAAKK,kBAAU,aAAf,EAAiB6B,eAAe,UAC5B,EACe,QADd,EACDlC,EAAKK,kBAAU,aAAf,EAAiB6B,eAAe,SACV,kBAAzBlC,EAAK4B,IAAIC,SAASvD,KAA0B,0BAAM,MAAW,QAE/D,GAGT,CACF,KAME,iBAAKsB,UAAU,yDAAwD,WACrE,SAAC,KAAkB,CACjB6C,QAAS/C,EACTzE,KAAMjB,EACN0I,gBAAiB,SAAC9I,GAAM,MAAmB,SAAdA,EAAO8B,EAAa,EACjDiH,yBAAyB,EACzBC,kBAAkB,EAClBC,oBAAoB,EACpBC,qBAAqB,EACrBC,wBAAwB,EACxBC,cAAc,EACdC,qBAAqB,EACrBC,qBAAqB,EACrBC,kBAAkB,EAClBC,qBAAqB,EACrBC,eAAe,EACfC,oBAAkB,EAClBC,aAAc,CACZC,kBAAkB,EAClBC,SAAU,CAAC,QACXC,UAAU,EACVC,QAAS,UACTC,cAAe,CAAEC,MAAO,CAAC,WAK3BC,kBAAmB,CACjBC,GAAI,CACF,IAAK,CACHC,YAAa,iBACbC,aAAc,kBAEhB,OAAQ,CACND,YAAa,iBACbE,OAAQ,OACRC,QAAS,aAIfC,kBAAmB,CACjBL,GAAI,CACF,OAAQ,CACNM,UAAW,iBACXL,YAAa,iBACbM,WAAY,WACZH,QAAS,aAKhB7J,GAAS,SAACiK,EAAA,EAAM,CAACC,YA3yBF,WAClBtL,EAAgB2D,SAAW3D,EAAgB2D,QAAQ4H,QACnDlK,GAAU,EACZ,IAwyBqD,KAGvD,E,4CCkSA,MAjmCA,WAAsB,IAAD,IACbrB,GAAkBC,EAAAA,EAAAA,QAAO,MAC/B,GAA4BW,EAAAA,EAAAA,WAAS,GAAM,eAApCQ,EAAM,KAAEC,EAAS,KACxB,GAAsCT,EAAAA,EAAAA,UAAS,IAAG,eAA3CI,EAAW,KAAEC,EAAc,KAClC,GAAsDL,EAAAA,EAAAA,UAAS,IAAG,eAA3D4K,EAAmB,KAAEC,EAAsB,KAClD,GAA8B7K,EAAAA,EAAAA,UAAS,IAAG,eAAnC8K,EAAO,KAAEC,EAAU,KAC1B,GAA8C/K,EAAAA,EAAAA,UAAS,IAAG,eAAnDgL,EAAe,KAAEC,EAAkB,KAC1C,GAA4BjL,EAAAA,EAAAA,UAAS,IAAG,eAAjC4D,EAAM,KAAEsH,EAAS,KACxB,GAA4ClL,EAAAA,EAAAA,UAAS,IAAG,eAAjDmL,EAAc,KAAEC,EAAiB,KACxC,IAAgCpL,EAAAA,EAAAA,UAAS,IAAG,iBAArCqD,GAAQ,MAAEgI,GAAW,MAC5B,IAAgDrL,EAAAA,EAAAA,UAAS,IAAG,iBAArDsL,GAAgB,MAAEC,GAAmB,MAWtCxL,GATwB,SAACsD,EAAUiI,GACvC,IAAME,EAAiBF,EAAiBrH,KAAI,SAACwH,GAAO,OAAKA,EAAQjK,KAAK,IAChEkK,EAAgBrI,EAASjC,QAAO,SAACqK,GAAO,OAC5CD,EAAe/G,SAASgH,EAAQjK,MAAM,IAElCmK,EAAmBD,EAAcA,EAAc5J,OAAS,GAC9D,OAAO6J,EAAmBA,EAAiBnK,MAAQ,EACrD,CAE0BoK,CAAsBvI,GAAUiI,IAC1D5G,QAAQC,IAAI5E,IAEZ,QAAsBC,EAAAA,EAAAA,UAAS,IAAG,iBAA3BU,GAAG,MAAEC,GAAM,MAClB,IAAsCX,EAAAA,EAAAA,UAAS,IAAG,iBAA3C6L,GAAW,MAAEC,GAAc,MAClC,IAAgC9L,EAAAA,EAAAA,UAAS,IAAG,iBAArCY,GAAQ,MAAEC,GAAW,MAC5B,IAAgDb,EAAAA,EAAAA,UAAS,IAAG,iBAArD+L,GAAgB,MAAEC,GAAmB,MAC5C,IAA8BhM,EAAAA,EAAAA,WAAS,GAAM,iBAAtCiM,GAAO,MAAEC,GAAU,MAC1B,IAAwClM,EAAAA,EAAAA,UAASmM,EAAAA,KAAkB,iBAA5DC,GAAY,MAAEC,GAAe,MACpC,IAA8BrM,EAAAA,EAAAA,UAAS,IAAG,iBAAnCsM,GAAO,MAAEC,GAAU,MAC1B,IAAgCvM,EAAAA,EAAAA,UAAS,IAAG,iBAArCJ,GAAQ,MAAE4M,GAAW,MAC5B,IAAkCxM,EAAAA,EAAAA,UAAS,IAAG,iBAAvCV,GAAS,MAAEmN,GAAY,MAC9B,IAA4BzM,EAAAA,EAAAA,UAAS,IAAG,iBAAjCF,GAAM,MAAE4M,GAAS,MACxB,IAAoC1M,EAAAA,EAAAA,UAAS,gBAAe,iBAArDP,GAAU,MAAEkN,GAAa,MAC1BrM,GAAUC,EAAAA,EAAAA,QAChB,IAA0BP,EAAAA,EAAAA,WACxB,IAAIsI,MAAOsE,UAAS,IAAItE,MAAOuE,WAAa,IAC7C,iBAFMrN,GAAK,MAAEoN,GAAQ,MAGhBE,GAAc,IAAIxE,KAClByE,GAAgB,IAAIzE,KAAK9I,IACzBwN,GACwD,IAA3DF,GAAYG,cAAgBF,GAAcE,eAC3CH,GAAYD,WACZE,GAAcF,WAEVnN,GAAewN,aAAaC,QAAQ,SAC1C,IAAkDnN,EAAAA,EAAAA,WAAS,GAAM,iBAA1DoN,GAAiB,MAAEC,GAAoB,MACxCC,IAAMjO,EAAAA,EAAAA,QAAO,IACnB,IAAkDW,EAAAA,EAAAA,WAAS,GAAM,iBAA1DuN,GAAiB,MAAEC,GAAoB,MAC9C,IAAsCxN,EAAAA,EAAAA,WAAS,GAAM,iBAA9CyN,GAAW,MAAEC,GAAc,MAElC,IAA4B1N,EAAAA,EAAAA,UAAS,IAAG,iBAAjC2N,GAAM,MAAEC,GAAS,OAIxB9M,EAAAA,EAAAA,YAAU,WACR+M,IACF,GAAG,IAEH,IAAMA,GAAW,WAGf7M,IAAM,CACJmB,OAAQ,MACRlB,IAAKX,GAAO,iDAA6CZ,MACxD+B,MAAK,SAACP,GACOA,EAAKC,KAAK8C,KAAI,SAAC6J,GAW3B,OAVIA,EAAKC,WACPD,EAAKC,SAAWD,EAAKC,SAAS3M,QAC5B,SAAC4M,GAAO,MACmB,0BAAzBA,EAAQC,cACiB,8BAAzBD,EAAQC,cACiB,qBAAzBD,EAAQC,cACiB,mCAAzBD,EAAQC,cACiB,4BAAzBD,EAAQC,YAA0C,KAGjDH,CACT,IAGQ/L,SAAQ,SAACmC,GA7BH,oBA8BRA,EAAK+J,cACPL,GAAU,CAAC1J,GAEf,GACF,GACF,EAEMgK,GAAgB,SAAH,GAAc,EAARtE,SAAQ,OAC/B,+BAEI,SAAC,MAAW,CAAC9D,UAAU,iBAIxB,EAGCtD,GAAOC,IAAOjD,IAAOkD,QAAQ,SAASC,OAAO,cAE7CwL,GAAe,CACnB3O,MAAOgD,GACPU,SAAU,EACVC,QAAS,EACTC,UAAW,GACXC,SAAU,KACVC,WAAY,eACZC,SAAU,mDACVE,UAAW,EACXC,OAAQ,EACRC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,OAAQ,EACRjB,OAAQ,EACRkB,iBAAiB,GAEnB,IAAoC/D,EAAAA,EAAAA,UAASmO,IAAa,iBAAnD5O,GAAU,MAAE6O,GAAa,MAChC1J,QAAQC,IAAI,cAAepF,IAC3B,IAOM8O,GAAe,SAACrM,GACpB,MAAwBA,EAAEsM,OAAlBnK,EAAI,EAAJA,KAAM7C,EAAK,EAALA,MACD,eAAT6C,IACFwI,GAAcrL,GACdkM,IAAqB,GAEnBY,GADY,iBAAV9M,EACY,SAACiN,GAAI,yBACdA,GAAI,IACP1K,QAAS,EACTC,OAAQ,EACRJ,OAAQ,EACRD,UAAW,GAAC,EAEK,aAAVnC,EACK,SAACiN,GAAI,yBACdA,GAAI,IACP1K,QAAS,EACTC,OAAQ,EACRJ,OAAQ,EACRH,UAAW,EACXE,SAAU,GAAG,EAEI,QAAVnC,EACK,SAACiN,GAAI,yBACdA,GAAI,IACPhL,UAAW,EACXO,OAAQ,EACRJ,OAAQ,EACRD,UAAW,GAAC,EAEK,YAAVnC,EACK,SAACiN,GAAI,yBACdA,GAAI,IACP1K,QAAS,EACTC,OAAQ,EACRP,UAAW,EACXE,UAAW,GAAC,EAGA,SAAC8K,GAAI,yBACdA,GAAI,IACP1K,QAAS,EACTN,UAAW,EACXG,OAAQ,EACRD,UAAW,GAAC,IAKN,YAARU,GAAgC,MAAV7C,GACxBoM,IAAe,GAEjBU,IAAc,SAACG,GACb,OAAO,kBAAKA,GAAI,cAAGpK,EAAO7C,GAC5B,GACF,EAEA,IAA0CtB,EAAAA,EAAAA,UAAS,CAAC,CAAC,IAAG,iBAAjDwO,GAAa,MAAEC,GAAgB,MAChChL,GAAwB,OAAb+K,SAAa,IAAbA,QAAa,EAAbA,GAAevK,KAAI,SAACyK,GAAC,OAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG9M,EAAE,IAAE+M,YAElD7N,EAAAA,EAAAA,YAAU,WAAO,GAAG,CAAC2C,KACrB,IAAM5D,GAA+D,QAAnD,EAAG+O,KAAKC,MAAM3B,aAAaC,QAAQ,wBAAgB,OACjD,QADiD,EAAhD,EACjBlJ,KAAI,SAACyK,GAAC,OAAKA,EAAE9M,EAAE,WAAC,WADiD,EAAhD,EAEjB+M,WA2HE5N,GAAc,yCAAG,6GACFC,IAAM,CACvBC,IAAKX,GAAO,gCACX,KAAD,EAFIY,EAAI,QAKVd,GADIA,EAAcc,EAAKC,MACGC,QACxB,SAACC,GAAG,OAAKA,EAAIC,OAAS,CAAC,KAGbC,KAAK,CAAED,MAAO,IAAKE,MAAO,sBACtCnB,EAAeD,GACfyK,EAAuBzK,EAAYgB,QAAO,SAACC,GAAG,OAAKA,EAAIC,OAAS,CAAC,KAC7DwN,EAAmB,GACvB1O,EAAY2B,SAAQ,SAACZ,GACnB2N,EAAiBvN,KAAKJ,EAAKG,MAC7B,IACA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,WAAaD,EAAiBH,YAAU,IACvC,4CACL,kBArBmB,oCAoEpB7N,EAAAA,EAAAA,YAAU,WATRE,IAAM,CACJmB,OAAQ,MACRlB,IAAKX,GAAO,yDACXmB,MAAK,SAAUuN,GAChB,IAAI9N,EAAO8N,EAAS7N,KACpBqL,GAAYtL,EACd,GAKF,GAAG,KA0CHJ,EAAAA,EAAAA,YAAU,WACR,IAAImO,EAAc,GAClBnE,EAAQ/I,SAAQ,SAAC2M,GACfO,EAAY1N,KAAKmN,EAAEpN,MACrB,IACA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,YAAcE,EAAYN,YAAU,GAEzC,GAAG,CAAC7D,IAKJ,IAAMoE,GAAQ,yCAAG,6GACIlO,IAAM,CACvBC,IAAKX,GAAO,kDACX,KAAD,EAFIY,EAAI,OAIN0C,EAAS,IACTzC,EAAOD,EAAKC,MACXI,KAAK,CAAEK,GAAI,KAAMuN,MAAO,eAC7BhO,EAAKW,OAAS,GACZX,EAAKY,SAAQ,SAACC,GACZ,IAAIoN,EAAY,CACd5N,MAAOQ,EAAEmN,MACT7N,MAAOU,EAAEJ,IAGXgC,EAAOrC,KAAK6N,GACZlE,EAAUtH,GACVwH,EAAkBxH,EAAOxC,QAAO,SAACC,GAAG,OAAkB,GAAbA,EAAIC,KAAU,KACvD,IAAI+N,EAAqB,GACzBzL,EAAO7B,SAAQ,SAACZ,GACI,GAAdA,EAAKG,OACP+N,EAAmB9N,KAAKJ,EAAKG,MAEjC,IAEA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,SAAWM,EAAmBV,YAAU,GAE7C,IAAG,2CACN,kBA9Ba,mCAmCRW,GAAU,yCAAG,6GACEtO,IAAM,CACvBC,IAAKX,GAAO,oDACX,KAAD,EAFIY,EAAI,OAINmC,EAAW,IACXlC,EAAOD,EAAKC,MAEXW,OAAS,GACZX,EAAKY,SAAQ,SAACC,GACZ,IAAIuN,EAAc,CAChB/N,MAAOQ,EAAEqB,SACT/B,MAAOU,EAAEJ,IAGXyB,EAAS9B,KAAKgO,GACdlE,GAAYhI,GACZkI,GAAoBlI,EAASjC,QAAO,SAACC,GAAG,OAAkB,GAAbA,EAAIC,KAAU,KAC3D,IAAIkO,EAAuB,GAC3BnM,EAAStB,SAAQ,SAACZ,GACE,GAAdA,EAAKG,OACPkO,EAAqBjO,KAAKJ,EAAKG,MAEnC,IACA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,WAAaS,EAAqBb,YAAU,GAEjD,IAAG,2CACN,kBA7Be,oCAqEhB7N,EAAAA,EAAAA,YAAU,WACRC,KA3JAC,IAAAA,IAEOV,GAAO,oDACXmB,MAAK,SAACC,GACL,IAAI0B,EAAY,GACZjC,EAAOO,EAASP,KAEpBA,EAAKW,OAAS,GACZX,EAAKY,SAAQ,SAACC,GACZ,IAAIyN,EAAa,CACfjO,MAAOQ,EAAE0N,YACTpO,MAAOU,EAAEJ,IAEXwB,EAAU7B,KAAKkO,EACjB,IAGF,IAAME,EAAevM,EAAUwM,MAAK,SAAUC,EAAGC,GAC/C,IAAIC,EAAQF,EAAErO,MAAMwO,cAChBC,EAAQH,EAAEtO,MAAMwO,cACpB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAEF,CACT,IAGAlF,EAAW4E,GACX1E,EAAmB7H,EACrB,IACC0B,OAAM,SAACoL,GAAK,OAAKxL,QAAQC,IAAIuL,EAAM,IA4HtChB,KACAI,KAhNgB,WAChB,IAAMpN,EAAaxC,GACnBsB,IAAM,CACJmB,OAAQ,MACRlB,IACEX,GAAO,8DACgD4B,KACxDT,MAAK,SAACW,GACP,IAAIC,EAAS,GACTlB,EAAOiB,EAAIjB,KACfA,EAAKW,OAAS,GACZX,EAAKY,SAAQ,SAACC,GACZ,IAAIM,EAAS,CACXd,MAAOQ,EAAEH,WACTP,MAAOU,EAAEJ,IAEXS,EAAOd,KAAKe,EACd,IACF3B,GAAO0B,GACPyJ,GAAezJ,EACjB,GACF,CA4LEE,GAtCAvB,IAAM,CACJmB,OAAQ,MACRlB,IAAKX,GAAO,yCACXmB,MAAK,SAAUuN,GAChB,IAAI9N,EAAO8N,EAAS7N,KACpBoL,GAAWrL,EACb,IAQAF,IAAAA,IACOV,GAAO,4DACXmB,MAAK,SAACC,GACL,IAAIC,EAAU,GACVR,EAAOO,EAASP,KAEpBA,EAAKW,OAAS,GACZX,EAAKY,SAAQ,SAACC,GACZ,IAAIC,EAAa,CACfT,MAAOQ,EAAEH,WACTP,MAAOU,EAAEJ,IAEXD,EAAQJ,KAAKU,EACf,IACFpB,GAAYc,GACZqK,GAAoBrK,EACtB,GAWJ,GAAG,CAAClC,KACJ,IAGM0Q,GAAwB,SAACC,EAAiBC,GAC9C,IAAMC,EAAiBF,EAAgBnM,KAAI,SAACsM,GAAM,OAAKA,EAAOjP,KAAK,IAE7DkP,EAAYH,EAAWpM,KAAI,SAACC,GAAI,OAAKA,EAAK5C,KAAK,IAErD,OAAIgP,EAAexO,SAAW0O,EAAU1O,OAC/B,YAEAsO,EAAgBnM,KAAI,SAACsM,GAAM,OAAKA,EAAO/O,KAAK,IAAEiP,KAAK,KAE9D,EACA,OACE,2BAEGrD,IACC,iBAAKtH,UAAU,kBAAiB,UAC7B,KACD,SAAC,MAAa,IAAG,wDAGnB,IAGF,iBAAKA,UAAU,YAAW,WACxB,gBAAKA,UAAU,cACf,gBAAKA,UAAU,WAAU,UACvB,wBAAI,mCAEN,gBAAKA,UAAU,mBAEjB,SAAC4K,EAAA,EAAiB,CAChB/C,OAAQA,GACRgD,kBAthBkB,CAAC,kCAyhBrB,0BACE,iBAAK7K,UAAU,wBAAuB,WACpC,iBAAKA,UAAU,2BAA0B,WACvC,wBAAI,oBACJ,gBAAKA,UAAU,UAAS,UACtB,SAAC8K,EAAA,EAAU,CAACC,QA3CJ,qBA2C0B1M,KA1C3B,6BA4CT,gBACE0C,QAAS,WACPqF,IAAYD,IAERI,GADJJ,GACoBE,EAAAA,IACA2E,EAAAA,IACtB,EAAE,UAEF,0BAAO1E,WAIX,SAAC,KAAS,CAACH,SAAUA,GAAQ,UAC3B,iBAAKnG,UAAU,oBAAmB,WAChC,gBAAKA,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,cAAa,UAAC,cACjC,KACZ,kBAAMjL,UAAU,WAAU,UAAC,QACnB,iBAAMA,UAAU,sBAAqB,SAAC,aAGhD,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,SAAC,IAAU,CACTA,UAAU,QACVlE,GAAG,QACHuC,KAAK,QACL6M,QACE,IAAI1I,KACFwE,GAAYG,cACZH,GAAYD,WACZ,GAGJoE,SAAUzR,GACV0R,WAAW,WACXC,qBAAmB,EACnBC,SAAU,SAACC,IAngBL,SAACA,GACzBzE,GAASyE,GAEcC,SAASC,eAAe,YAChCjQ,MAAQ,EACzB,CA+fsBkQ,CAAkBH,EACpB,YAKR,gBAAKvL,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,WAAU,UAAC,gBAC5B,iBAAMjL,UAAU,sBAAqB,SAAC,UAEtD,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,oBACEsL,SAAU/C,GACVvI,UAAU,OACV2L,aAAc,EACdtN,KAAK,WACLvC,GAAG,WACH0L,IAAK,SAACjM,GACJiM,GAAIvK,QAAQ,GAAK1B,CACnB,EAAE,WAEF,mBAAQC,MAAM,GAAE,SAAC,yBAChB,OAAIoQ,MAAMxJ,KAAKyJ,IAAI3E,GAAY,MAAM/I,KAAI,SAAC2N,EAAGvJ,GAC5C,IAAMwJ,EAAcxJ,EAAQ,EAC5B,OACE,mBAA0B/G,MAAOuQ,EAAY,SAC1CA,GADUA,EAIjB,eAKR,gBAAK/L,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,aAAY,UAAC,mBAE5C,iBAAMjL,UAAU,sBAAqB,SAAC,UAExC,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,oBACEsL,SAAU/C,GACVvI,UAAU,OACV2L,aAAa,eACbtN,KAAK,aACLvC,GAAG,aACH0L,IAAK,SAACjM,GACJiM,GAAIvK,QAAQ,GAAK1B,CACnB,EAAE,WAEF,mBAAQC,MAAM,GAAE,SAAC,yBACjB,mBAAQA,MAAM,eAAc,SAAC,mBAC7B,mBAAQA,MAAM,MAAK,SAAC,SACpB,mBAAQA,MAAM,WAAU,SAAC,cACzB,mBAAQA,MAAM,KAAI,SAAC,sBACnB,mBAAQA,MAAM,UAAS,SAAC,sBAMjB,gBAAd7B,IACC,gBAAKqG,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,gBAAe,UAAC,gBACjC,KACd,kBAAMjL,UAAU,WAAU,UAAC,QACnB,iBAAMA,UAAU,sBAAqB,SAAC,aAGhD,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBACEA,UAAU,oBACVwH,IAAK,SAACjM,GACJiM,GAAIvK,QAAQ,GAAK1B,CACnB,EAAE,UAEF,SAAC,KAAW,CACV6M,cAAeA,GACftM,GAAG,WACHsD,QAAS9E,EAAYwP,MAAK,SAACC,EAAGC,GAAC,OAC7BD,EAAErO,MAAMsQ,cAAchC,EAAEtO,MAAM,IAEhCuQ,cAAc,EACdC,WAAW,EACXC,qBAAqB,EACrBC,eAAe,EACf5Q,MAAOsJ,EACPuH,UAAU,EACVf,SAAU,SAACgB,GACTvH,EAAuBuH,GACvB,IAAIC,EAAiB,GACrBD,EAAErQ,SAAQ,SAAC2M,GACT2D,EAAe9Q,KAAKmN,EAAEpN,MACxB,IAEA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,WAAasD,EAAe1D,YAAU,GAE3C,EACA2D,cAAenC,YAKP,YAAd1Q,IACF,gBAAKqG,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,WAAU,UAAC,gBAE1C,iBAAMjL,UAAU,aAAY,SAAC,UAE/B,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,oBACEA,UAAU,cACV3B,KAAK,WACLvC,GAAG,WACHwP,SAAU/C,GACVoD,aAAc,EAAE,WAEhB,mBAAQnQ,OAAQ,EAAE,SAAC,cACnB,mBAAQA,MAAO,EAAE,SAAC,sBAClB,mBAAQA,MAAO,EAAE,SAAC,qBAKV,WAAd7B,IACF,gBAAKqG,UAAU,gBAAe,UAC5B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,cAAa,UAAC,eAChC,iBAAMjL,UAAU,kBAAiB,SAAC,UAEjD,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,gBACEA,UAAU,wDACVwH,IAAK,SAACjM,GACJiM,GAAIvK,QAAQ,GAAK1B,CACnB,EAAE,UAEF,SAAC,EAAAkR,wBAAuB,CACtBC,MAAOlG,GACPmG,KAAK,OACLtO,KAAK,QACLvC,GAAG,QACHkE,UAAU,qBACV4M,SAAU,SAAC1Q,GACToM,IAAc,SAACuE,GAAS,yBACnBA,GAAS,IACZjP,MAAO1B,EAAEJ,IAAE,GAEf,EACAgR,UAAU,EACVC,YAAY,uCAMN,OAAdpT,IACF,gBAAKqG,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,MAAK,UAAC,WAErC,iBAAMjL,UAAU,aAAY,SAAC,UAE/B,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBACEA,UAAU,oBACVwH,IAAK,SAACjM,GACJiM,GAAIvK,QAAQ,GAAK1B,CACnB,EAAE,UAEF,SAAC,KAAW,CACV6M,cAAeA,GACftM,GAAG,SACHuC,KAAK,SACLe,QAASxE,GAAIkP,MAAK,SAACC,EAAGC,GAAC,OACrBD,EAAErO,MAAMsQ,cAAchC,EAAEtO,MAAM,IAEhCuQ,cAAc,EACdzQ,MAAOuK,GACPoG,qBAAqB,EACrBK,cAAenC,GACf+B,eAAe,EACfjB,SAAUpF,GACVsG,UAAU,EACVf,SAAU,SAACpP,GACT8J,GAAe9J,GACf,IAAI8Q,EAAc,GAClB9Q,EAAED,SAAQ,SAAC2M,GACToE,EAAYvR,KAAKmN,EAAEpN,MACrB,IACA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,SAAW+D,EAAYnE,YAAU,GAEtC,WAKQ,MAAdlP,IACF,gBAAKqG,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,eAAc,UAAC,wBAE9C,iBAAMjL,UAAU,aAAY,SAAC,UAE/B,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBACEA,UAAU,oBACVwH,IAAK,SAACjM,GACJiM,GAAIvK,QAAQ,GAAK1B,CACnB,EAAE,UAEF,SAAC,KAAW,CACV6M,cAAeA,GACftM,GAAG,QACHsD,QAAStE,GAASgP,MAAK,SAACC,EAAGC,GAAC,OAC1BD,EAAErO,MAAMsQ,cAAchC,EAAEtO,MAAM,IAEhCuQ,cAAc,EACdC,WAAW,EACXM,cAAenC,GACf7O,MAAOyK,GACPoG,UAAU,EACVD,eAAe,EACfD,qBAAqB,EACrBb,SAAU,SAACpP,GACTgK,GAAoBhK,GACpB,IAAI+Q,EAAmB,GACvB/Q,EAAED,SAAQ,SAAC2M,GACTqE,EAAiBxR,KAAKmN,EAAEpN,MAC1B,IACA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,QAAUgE,EAAiBpE,YAAU,GAE1C,WAMR,IAGF,gBAAK7I,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,YAAW,UAAC,iBAE3C,iBAAMjL,UAAU,sBAAqB,SAAC,UAExC,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,oBAAQsL,SAAU/C,GAAclK,KAAK,SAASvC,GAAG,SAAQ,WACvD,mBAAQN,OAAQ,EAAE,SAAC,eACnB,mBAAQA,MAAM,OAAM,SAAC,gBACrB,mBAAQA,MAAM,MAAK,SAAC,wBAK5B,gBAAKwE,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,eAAc,UAAC,eACjC,KACb,kBAAMjL,UAAU,WAAU,UAAC,QACnB,iBAAMA,UAAU,sBAAqB,SAAC,aAGhD,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBACEA,UAAU,oBACVwH,IAAK,SAACjM,GACJiM,GAAIvK,QAAsB,IAAdtD,GAAmB,EAAI,GAAK4B,CAC1C,EAAE,UAEF,SAAC,KAAW,CACV6M,cAAeA,GACftM,GAAG,YACHuC,KAAK,YACLe,QAAS4F,EACTiH,cAAc,EACdzQ,MAAO0J,EACPmH,UAAU,EACVf,SAAU,SAACpP,GACTiJ,EAAmBjJ,GACnB,IAAIgR,EAAkB,GACtBhR,EAAED,SAAQ,SAAC2M,GACTsE,EAAgBzR,KAAKmN,EAAEpN,MACzB,IACA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,YAAciE,EAAgBrE,YAAU,GAE7C,EACA2D,cAAenC,aAKvB,gBAAKrK,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,SAAQ,UAAC,SACjC,KACP,kBAAMjL,UAAU,WAAU,UAAC,QACnB,iBAAMA,UAAU,sBAAqB,SAAC,aAGhD,iBAAMA,UAAU,gBAAe,SAAC,OAChC,gBACEA,UAAU,oBACVwH,IAAK,SAACjM,GACJiM,GAAIvK,QAAsB,IAAdtD,GAAmB,EAAI,GAAK4B,CAC1C,EAAE,UAEF,SAAC,KAAW,CACV6M,cAAeA,GACftM,GAAG,SACHsD,QAAStB,EACTmO,cAAc,EACdC,WAAW,EACXC,qBAAqB,EACrBC,eAAe,EACf5Q,MAAO6J,EACPgH,UAAU,EACVf,SAAU,SAACgB,GACThH,EAAkBgH,GAClB,IAAIC,EAAiB,GACrBD,EAAErQ,SAAQ,SAAC2M,GACT2D,EAAe9Q,KAAKmN,EAAEpN,MACxB,IAEA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,SAAWsD,EAAe1D,YAAU,GAEzC,EACA2D,cAAenC,aAKvB,gBAAKrK,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,WAAU,UAAC,WACjC,KACT,kBAAMjL,UAAU,WAAU,UAAC,QACnB,iBAAMA,UAAU,sBAAqB,SAAC,aAGhD,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBACEA,UAAU,oBACVwH,IAAK,SAACjM,GACJiM,GAAIvK,QAAsB,IAAdtD,GAAmB,EAAI,GAAK4B,CAC1C,EAAE,UAEF,SAAC,KAAW,CACV6M,cAAeA,GACftM,GAAG,WACHuC,KAAK,WACLe,QAAS7B,GAASuM,MAAK,SAACC,EAAGC,GAAC,OAC1BD,EAAErO,MAAMsQ,cAAchC,EAAEtO,MAAM,IAEhCuQ,cAAc,EACdC,WAAW,EACXC,qBAAqB,EACrBC,eAAe,EACf5Q,MAAOgK,GACP6G,UAAU,EACVf,SAAU,SAACgB,GACT7G,GAAoB6G,GACpB,IAAIC,EAAiB,GACrBD,EAAErQ,SAAQ,SAAC2M,GACT2D,EAAe9Q,KAAKmN,EAAEpN,MACxB,IAEA8M,IAAc,SAACW,GAAO,yBACjBA,GAAO,cACT,WAAasD,EAAe1D,YAAU,GAE3C,EACA2D,cAAenC,aAKvB,gBAAKrK,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQiL,QAAQ,SAAQ,UAAC,eAC3B,iBAAMjL,UAAU,sBAAqB,SAAC,UAErD,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,oBAAQsL,SAAU/C,GAAclK,KAAK,SAASvC,GAAG,SAAQ,WACvD,mBAAQN,MAAM,KAAI,SAAC,YAElBgK,GAAiBrH,KAAI,SAACgP,GAAI,OACzB,oBAAQ3R,MAAO2R,EAAK3R,MAAM,UAAC,IAAE2R,EAAKzR,QAAe,cAM5C,gBAAd/B,IACC,8BACG6L,GAAiBxE,MAAK,SAAC5C,GAAI,OAAoB,OAAfA,EAAK5C,KAAc,MAClD,gBAAKwE,UAAU,gBAAe,UAC5B,iBAAKA,UAAU,iBAAgB,WAC7B,kBAAOA,UAAU,QAAO,SAAC,4BACzB,iBAAMA,UAAU,YAAW,SAAC,OAC5B,iBAAMA,UAAU,0BAAyB,UACvC,kBACE2M,KAAK,WACLrB,SAAU,SAACpP,GACToM,IAAc,kBACT7O,IAAU,IACbwE,gBAAiB/B,EAAEsM,OAAO4E,UAE9B,EACAvM,MAAO,CAAEwM,UAAW,kBAQhC,IAGF,gBAAKrN,UAAU,sCAAqC,UAClD,oBACE2M,KAAK,SACL3M,UAAU,kBACVe,QAAS,YAz2BJ,SAAC7E,GACpBqL,IAAqB,GACrBjO,EAAgB2D,QAAU,IAAIC,gBAE9B,IAAIoQ,EAAe9F,GAAIvK,QAAQ3B,QAAO,SAACsN,GAAC,OAAU,MAALA,CAAS,IACtDpB,GAAIvK,QAAUqQ,EACd,IAAIC,GAAQC,EAAAA,EAAAA,GAAiBhG,IAE7B,GAAa,GAAT+F,EAMF,OALA5S,GAAU,QACV4M,IAAqB,GAQvBG,IAAqB,GACrB,IAAM+F,EAAavM,YAAW,WAC5BvG,GAAU,EACZ,GAAG,KACHO,IAAM,CACJmB,OAAQ,OACRlB,IACEX,GAAO,+DAET2C,OAAQ7D,EAAgB2D,QAAQE,OAChC9B,KAAM,CACJ3B,MAAOgD,GACPU,SAAU3D,GAAW2D,SACrBC,OAAQ5D,GAAW4D,OACnBC,UAC0B,mBAAxB7D,GAAW6D,UACP,gBACA7D,GAAW6D,UACjBC,SAAU9D,GAAW8D,SACrBC,WAAY/D,GAAW+D,WACvBC,SAC2B,gBAAzBhE,GAAW+D,YAAgC,EAAI/D,GAAWgE,SAC5DC,UAC2B,YAAzBjE,GAAW+D,WACgB,KAAvB/D,GAAWkE,SACT5D,GACuB,MAAvBN,GAAWkE,SACX,KACA,GACD,EACPC,MAAOnE,GAAWmE,MAClBC,OAAQpE,GAAWoE,OACnBC,OACuB,wBAArBrE,GAAWqE,QAAoC,EAAIrE,GAAWqE,OAChEC,OAAQtE,GAAWsE,OACnBC,MAAOvE,GAAWuE,MAClBjB,MAAOtD,GAAWsD,MAClBkB,gBAAiBxE,GAAWwE,mBAE7BtC,MAAK,SAACW,GACP3B,GAAU,GACV+S,aAAaD,GACb,IAAIvP,EAAW5B,EAAIjB,KACnBsL,GAAazI,EAAS7C,MAKtBH,IAAM,CACJmB,OAAQ,MACRlB,IACEX,GAAO,yEAC2D0D,EAASyP,aAC7ExQ,OAAQ7D,EAAgB2D,QAAQE,SAE/BxB,MAAK,SAACiS,IACJL,GAASnH,IAAYD,IAElBI,GADJJ,GACoBE,EAAAA,IACA2E,EAAAA,KACpB,IAEM6C,EAFkBD,EAAKvS,KAAKyS,IAAInL,QAAQ,KAAM,IACZA,QAAQ,KAAM,IACpBnB,MAAM,KACxCoF,GAAUiH,EAAU/O,MAAM,GAC5B,IACCE,OAAM,SAACC,GACNL,QAAQC,IAAII,EACd,IAEFsI,IAAqB,GACrBG,IAAqB,EACvB,GACF,CAgxBkBqG,EACF,EAAE,WAEF,SAAC,MAAQ,IAAG,UAAQ,mBAQ/BrT,GAAS,SAACiK,EAAA,EAAM,CAACC,YArxBF,WAClBtL,EAAgB2D,SAAW3D,EAAgB2D,QAAQ4H,QACnDlK,GAAU,EACZ,IAkxBqD,IAEjD,SAACqT,EAAA,EAAmB,CAClBC,KAAM,EACN9H,QAASwB,GACTvB,WAAYwB,GACZe,iBAAkBA,GAClBD,cAAeA,KAEhBjB,KACC,SAAC,EAAuB,CACtBjO,UAAWA,GACXQ,OAAQA,GACRP,WAAYA,GACZC,MAAOA,GACPC,WAAYA,GACZC,aAAcA,GACdC,SAAU2M,GACV1M,SAAUA,GACVC,aAAcA,GACdE,kBAAmBA,OAK7B,C","sources":["views/RevenueMetrices/HeadCountTableComponent.js","views/RevenueMetrices/HeadCount.js"],"sourcesContent":["import React, { useState, useMemo, memo, useRef } from \"react\";\nimport MaterialReactTable from \"material-react-table\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\nimport moment from \"moment\";\nimport Loader from \"../Loader/Loader\";\nimport { FaChevronCircleRight, FaChevronCircleDown } from \"react-icons/fa\";\nimport \"./HeadCountTableComponent.scss\";\n\nfunction HeadCountTableComponent(props) {\n  {\n    /*----------------Props,useState's & useRef's---------------- */\n  }\n  const abortController = useRef(null);\n  const {\n    tableData,\n    searchdata,\n    month,\n    selectType,\n    loggedUserId,\n    projects,\n    customer,\n    selectedCust,\n    column,\n    laterMeasureLabel,\n  } = props;\n\n  const [data, setData] = useState([...column]);\n  const [nodes, setNodes] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const baseUrl = environment.baseUrl;\n  const [loader, setLoader] = useState(false);\n  const [csl, setCsl] = useState([]);\n  const [delivery, setDelivery] = useState([]);\n\n  {\n    /*----------------Handle Abort---------------- */\n  }\n\n  const handleAbort = () => {\n    abortController.current && abortController.current.abort();\n    setLoader(false);\n  };\n\n  useEffect(() => {\n    setData(column);\n  }, [column]);\n\n  {\n    /*----------------Handle Departments---------------- */\n  }\n\n  useEffect(() => {\n    if (selectType == \"BusinessUnit\") {\n      const getDepartments = async () => {\n        const resp = await axios({\n          url: baseUrl + `/CostMS/cost/getDepartments`,\n        });\n        let departments = resp.data;\n        departments = departments.filter((ele) => ele.value >= 0);\n        departments.push({ value: 999, label: \"Non Revenue Units\" });\n        setDepartments(departments);\n      };\n      getDepartments();\n    }\n\n    {\n      /*------------------Getting  DP------------------- */\n    }\n\n    if (selectType == \"DP\") {\n      const getDeliveryPartners = () => {\n        axios\n          .get(\n            baseUrl + `/administrationms/subkconversiontrend/getdeliverypartner`\n          )\n          .then((Response) => {\n            let deliver = [];\n            let data = Response.data;\n            data.push({ id: 0, PersonName: \"<<Others>>\" });\n            data.length > 0 &&\n              data.forEach((e) => {\n                let deliverObj = {\n                  label: e.PersonName,\n                  value: e.id,\n                };\n                deliver.push(deliverObj);\n              });\n            setDelivery(deliver);\n          });\n      };\n      getDeliveryPartners();\n    }\n\n    {\n      /*--------------------------Getting CSL---------------------- */\n    }\n    if (selectType == \"CSL\") {\n      const handleCsl = () => {\n        const loggedUser = loggedUserId;\n        axios({\n          method: \"get\",\n          url:\n            baseUrl +\n            `/SalesMS/MasterController/getCslDropDownData?userId=${loggedUser}`,\n        }).then((res) => {\n          let custom = [];\n          let data = res.data;\n          data.length > 0 &&\n            data.forEach((e) => {\n              let cslObj = {\n                label: e.PersonName,\n                value: e.id,\n              };\n              custom.push(cslObj);\n            });\n          setCsl(custom);\n        });\n      };\n      handleCsl();\n    }\n  }, []);\n\n  {\n    /*--------------------------Head Count By Cadre using Object Ids --------------------------*/\n  }\n  const Data = moment(month).startOf(\"month\").format(\"yyyy-MM-DD\");\n  const HandleInsertedData = (objId, objLabel) => {\n    abortController.current = new AbortController();\n    axios({\n      method: \"post\",\n      url:\n        baseUrl +\n        `/revenuemetricsms/headCountAndTrend/getHeadCountAndTrendDataByCadre`,\n      signal: abortController.current.signal,\n      data: {\n        month: Data,\n        duration: searchdata.duration,\n        resTyp: searchdata.resTyp,\n        countries:\n          searchdata.countries == \"6,5,3,8,0,7,1,2\"\n            ? \"6,5,3,8,7,1,2\"\n            : searchdata.countries,\n        measures: searchdata.measures,\n        searchType: searchdata.searchType,\n        busUnits: selectType != \"BusinessUnit\" ? -1 : searchdata.busUnits,\n        customers:\n          selectType != \"Customer\"\n            ? -1\n            : searchdata.Customer == \"1\"\n            ? selectedCust\n            : searchdata.Customer,\n        prjId: selectType != \"Project\" ? -1 : searchdata.prjId,\n        sortBy: searchdata.sortBy,\n        cadres:\n          searchdata.cadres == \"E1,E2,E3,L,M,G,T1,UA\" ? -1 : searchdata.cadres,\n        cslRes: selectType != \"CSL\" ? -1 : searchdata.cslRes,\n        dpRes: selectType != \"DP\" ? -1 : searchdata.dpRes,\n        objId: objId, // change in tables according to the expandable we choose\n        overheadChecked: false,\n      },\n    })\n      .then((res) => {\n        setLoader(false);\n        let respData = res.data.data;\n\n        respData = respData.map((item) => {\n          return {\n            ...item,\n            name: item.name + \"_\" + objId,\n          };\n        });\n        setNodes((prevNodes) => {\n          const grossMarginIndex = prevNodes.findIndex((node) => {\n            return laterMeasureLabel == \"Head Count\" ||\n              laterMeasureLabel == \"New Hires\" ||\n              laterMeasureLabel == \"Exits\"\n              ? (node.kpi.includes(\"SUBK\") ||\n                  node.kpi.includes(laterMeasureLabel)) &&\n                  node.name === objLabel\n              : node.kpi === laterMeasureLabel && node.name === objLabel;\n          });\n          console.log(grossMarginIndex);\n          if (grossMarginIndex !== -1) {\n            return [\n              ...prevNodes.slice(0, grossMarginIndex + 1),\n              ...respData.map((data, i) => ({ ...data, id: objId + i + 1 })),\n              ...prevNodes.slice(grossMarginIndex + 1),\n            ];\n          } else {\n            return prevNodes;\n          }\n        });\n      })\n      .catch((err) => {\n        setLoader(false);\n        console.log(\"Error: \", err);\n      });\n  };\n\n  // useEffect(() => {\n  //   HandleInsertedData();\n  // }, []);\n\n  {\n    /*----------------Adding Id,ParentId and Children---------------- */\n  }\n\n  useEffect(() => {\n    let id = 1;\n    for (let i = 0; i < tableData.length; i++) {\n      tableData[i].id = id;\n      id++;\n      if (id % 100 == 16) {\n        id += 985;\n      }\n    }\n\n    setNodes(jsonToTree(tableData));\n  }, [tableData]);\n\n  const jsonToTree = (flatArray, options) => {\n    options = {\n      id: \"id\",\n      parentId: \"parentId\",\n      children: \"subRows\",\n      ...options,\n    };\n    const dictionary = {};\n    const tree = [];\n    const children = options.children;\n    flatArray.forEach((node) => {\n      const nodeId = node[options.id];\n      const nodeParentId = node[options.parentId];\n\n      dictionary[nodeId] = {\n        [children]: [],\n        ...node,\n        ...dictionary[nodeId],\n      };\n      dictionary[nodeParentId] = dictionary[nodeParentId] || { [children]: [] };\n      dictionary[nodeParentId][children].push(dictionary[nodeId]);\n    });\n\n    Object.values(dictionary).forEach((obj) => {\n      if (typeof obj[options.id] === \"undefined\") {\n        tree.push(...obj[children]);\n      }\n    });\n    return tree;\n  };\n\n  {\n    /*--------------------------Dynamic Columns --------------------------*/\n  }\n  const dynamicColumns = [\n    //-----------------------------------\"name\" key-------------------------------------\n    {\n      header: (\n        <div className=\"legendContainer \">\n          {selectType === \"BusinessUnit\" ? (\n            <div className=\"legend lightbrown\">\n              <div className=\"legendCircle\"></div>\n              <div className=\"legendTxt\">\n                <b>Business Unit</b>\n              </div>\n            </div>\n          ) : selectType === \"DP\" ? (\n            <div className=\"legend brown\">\n              <div className=\"legendCircle\"></div>\n              <div className=\"legendTxt\">\n                <b>DP</b>\n              </div>\n            </div>\n          ) : selectType === \"CSL\" ? (\n            <div className=\"legend brown\">\n              <div className=\"legendCircle\"></div>\n              <div className=\"legendTxt\">\n                <b>CSL</b>\n              </div>\n            </div>\n          ) : selectType === \"Customer\" ? (\n            <div className=\"legend darkgreen\">\n              <div className=\"legendCircle\"></div>\n              <div className=\"legendTxt\">\n                <b>Customer</b>\n              </div>\n            </div>\n          ) : selectType === \"Project\" ? (\n            <div className=\"legend purple\">\n              <div className=\"legendCircle\"></div>\n              <div className=\"legendTxt\">\n                <b>Project</b>\n              </div>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      ),\n      accessorKey: \"name\",\n      enableGrouping: false,\n\n      GroupedCell: ({ cell, table }) => {\n        /////////////////---------------------------------------Business Unit\n        if (selectType == \"BusinessUnit\") {\n          const department = departments.find(\n            (dep) => dep.label === cell.getValue()\n          );\n\n          const [activeIcons, setActiveIcons] = useState({});\n\n          const handleClick = () => {\n            if (department) {\n              const { value, label } = department;\n              const isDataPresent = nodes.some((node) => {\n                return node.name.includes(`_${value}`);\n              });\n\n              if (isDataPresent) {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [value]: false,\n                }));\n                setNodes((prevNodes) =>\n                  prevNodes.filter((node) => !node.name.includes(`_${value}`))\n                );\n              } else {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [value]: true,\n                }));\n                setTimeout(() => {\n                  setLoader(false);\n                }, 2000);\n                HandleInsertedData(value, label);\n              }\n            }\n          };\n\n          if (department) {\n            const { value, label } = department;\n            const isActive = activeIcons[value];\n            return (\n              <span\n                style={{ cursor: \"pointer\" }}\n                value={department.value}\n                onClick={() => {\n                  handleClick();\n                }}\n                className={\"parent\"}\n              >\n                {isActive ? <FaChevronCircleDown /> : <FaChevronCircleRight />}{\" \"}\n                <b className=\"buRM\" title={department.label}>\n                  {department.label}\n                </b>\n              </span>\n            );\n          } else if (\n            [\"T1\", \"E1\", \"E2\", \"E3\", \"M\", \"L\", \"G\", \"Unassigned\"].some(\n              (substr) => cell.getValue().includes(substr)\n            )\n          ) {\n            return (\n              <span\n                className={\"child\"}\n                style={{ display: \"flex\", justifyContent: \"center\" }}\n              >\n                <b className=\"resRM\" title={cell.getValue()}>\n                  {cell.getValue().split(\"_\")[0]}\n                </b>\n              </span>\n            );\n          } else {\n            return (\n              <span>\n                <b>Summary</b>{\" \"}\n              </span>\n            );\n          }\n        }\n\n        /////////////////---------------------------------------Customer\n        else if (selectType == \"Customer\") {\n          const cust = customer.find((dep) => dep.fullName === cell.getValue());\n\n          const [activeIcons, setActiveIcons] = useState({});\n\n          const handleClick = () => {\n            if (cust) {\n              const { id, fullName } = cust;\n              const isDataPresent = nodes.some((node) => {\n                return node.name.includes(`_${id}`);\n              });\n\n              if (isDataPresent) {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [id]: false,\n                }));\n                setNodes((prevNodes) =>\n                  prevNodes.filter((node) => !node.name.includes(`_${id}`))\n                );\n              } else {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [id]: true,\n                }));\n                // setLoader(true);\n                setTimeout(() => {\n                  setLoader(false);\n                }, 2000);\n                HandleInsertedData(id, fullName);\n              }\n            }\n          };\n\n          if (cust) {\n            const { id } = cust;\n            const isActive = activeIcons[id];\n            return (\n              <span\n                style={{ cursor: \"pointer\" }}\n                value={cust.id}\n                onClick={() => {\n                  handleClick();\n                }}\n                className={\"parent\"}\n              >\n                {isActive ? <FaChevronCircleDown /> : <FaChevronCircleRight />}{\" \"}\n                <b className=\"custRM\" title={cust.fullName}>\n                  {cust.fullName}\n                </b>\n              </span>\n            );\n          } else if (\n            [\"T1\", \"E1\", \"E2\", \"E3\", \"M\", \"L\", \"G\", \"Unassigned\"].some(\n              (substr) => cell.getValue().includes(substr)\n            )\n          ) {\n            return (\n              <span\n                className={\"child\"}\n                style={{ display: \"flex\", justifyContent: \"center\" }}\n              >\n                <b className=\"resRM\" title={cell.getValue()}>\n                  {cell.getValue().split(\"_\")[0]}\n                </b>\n              </span>\n            );\n          } else {\n            return (\n              <span>\n                <b>Summary</b>{\" \"}\n              </span>\n            );\n          }\n        }\n\n        /////////////////---------------------------------------Project\n        else if (selectType == \"Project\") {\n          const proj = projects.find((dep) => dep.name === cell.getValue());\n\n          const [activeIcons, setActiveIcons] = useState({});\n\n          const handleClick = () => {\n            if (proj) {\n              const { id, name } = proj;\n              const isDataPresent = nodes.some((node) => {\n                return node.name.includes(`_${id}`);\n              });\n\n              if (isDataPresent) {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [id]: false,\n                }));\n                setNodes((prevNodes) =>\n                  prevNodes.filter((node) => !node.name.includes(`_${id}`))\n                );\n              } else {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [id]: true,\n                }));\n                // setLoader(true);\n                setTimeout(() => {\n                  setLoader(false);\n                }, 2000);\n                HandleInsertedData(id, name);\n              }\n            }\n          };\n\n          if (proj) {\n            const { id, name } = proj;\n            const isActive = activeIcons[id];\n            return (\n              <span\n                style={{ cursor: \"pointer\" }}\n                value={proj.id}\n                onClick={() => {\n                  handleClick();\n                }}\n                className={\"parent\"}\n              >\n                {isActive ? <FaChevronCircleDown /> : <FaChevronCircleRight />}{\" \"}\n                <b className=\"projRM\" title={proj.name}>\n                  {proj.name}\n                </b>\n              </span>\n            );\n          } else if (\n            [\"T1\", \"E1\", \"E2\", \"E3\", \"M\", \"L\", \"G\", \"Unassigned\"].some(\n              (substr) => cell.getValue().includes(substr)\n            )\n          ) {\n            return (\n              <span\n                className={\"child\"}\n                style={{ display: \"flex\", justifyContent: \"center\" }}\n              >\n                <b className=\"resRM\" title={cell.getValue()}>\n                  {cell.getValue().split(\"_\")[0]}\n                </b>\n              </span>\n            );\n          } else {\n            return (\n              <span>\n                <b>Summary</b>{\" \"}\n              </span>\n            );\n          }\n        }\n\n        /////////////////---------------------------------------CSL\n        else if (selectType == \"CSL\") {\n          const csls = csl.find((dep) => dep.label === cell.getValue());\n\n          const [activeIcons, setActiveIcons] = useState({});\n\n          const handleClick = () => {\n            if (csls) {\n              const { value, label } = csls;\n              const isDataPresent = nodes.some((node) => {\n                return node.name.includes(`_${value}`);\n              });\n\n              if (isDataPresent) {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [value]: false,\n                }));\n                setNodes((prevNodes) =>\n                  prevNodes.filter((node) => !node.name.includes(`_${value}`))\n                );\n              } else {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [value]: true,\n                }));\n                // setLoader(true);\n                setTimeout(() => {\n                  setLoader(false);\n                }, 2000);\n                HandleInsertedData(value, label);\n              }\n            }\n          };\n          if (csls) {\n            const { value } = csls;\n            const isActive = activeIcons[value];\n            return (\n              <span\n                style={{ cursor: \"pointer\" }}\n                value={csls.value}\n                onClick={() => {\n                  handleClick();\n                }}\n                className={\"parent\"}\n              >\n                {isActive ? <FaChevronCircleDown /> : <FaChevronCircleRight />}{\" \"}\n                <b className=\"resRM\" title={csls.label}>\n                  {csls.label}\n                </b>\n              </span>\n            );\n          } else if (\n            [\"T1\", \"E1\", \"E2\", \"E3\", \"M\", \"L\", \"G\", \"Unassigned\"].some(\n              (substr) => cell.getValue().includes(substr)\n            )\n          ) {\n            return (\n              <span\n                className={\"child\"}\n                style={{ display: \"flex\", justifyContent: \"center\" }}\n              >\n                <b className=\"resRM\" title={cell.getValue()}>\n                  {cell.getValue().split(\"_\")[0]}\n                </b>\n              </span>\n            );\n          } else {\n            return (\n              <span>\n                <b>Summary</b>{\" \"}\n              </span>\n            );\n          }\n        }\n\n        /////////////////---------------------------------------DP\n        else if (selectType == \"DP\") {\n          const dps = delivery.find((dep) => dep.label === cell.getValue());\n\n          const [activeIcons, setActiveIcons] = useState({});\n\n          const handleClick = () => {\n            if (dps) {\n              const { value, label } = dps;\n              const isDataPresent = nodes.some((node) => {\n                return node.name.includes(`_${value}`);\n              });\n\n              if (isDataPresent) {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [value]: false,\n                }));\n                setNodes((prevNodes) =>\n                  prevNodes.filter((node) => !node.name.includes(`_${value}`))\n                );\n              } else {\n                setActiveIcons((prevActiveIcons) => ({\n                  ...prevActiveIcons,\n                  [value]: true,\n                }));\n                // setLoader(true);\n                setTimeout(() => {\n                  setLoader(false);\n                }, 2000);\n                HandleInsertedData(value, label);\n              }\n            }\n          };\n          if (dps) {\n            const { value } = dps;\n            const isActive = activeIcons[value];\n            return (\n              <span\n                style={{ cursor: \"pointer\" }}\n                value={dps.value}\n                onClick={() => {\n                  handleClick();\n                }}\n                className={\"parent\"}\n              >\n                {isActive ? <FaChevronCircleDown /> : <FaChevronCircleRight />}{\" \"}\n                <b className=\"resRM\" title={dps.label}>\n                  {dps.label}\n                </b>\n              </span>\n            );\n          } else if (\n            [\"T1\", \"E1\", \"E2\", \"E3\", \"M\", \"L\", \"G\", \"Unassigned\"].some(\n              (substr) => cell.getValue().includes(substr)\n            )\n          ) {\n            return (\n              <span\n                className={\"child\"}\n                style={{ display: \"flex\", justifyContent: \"center\" }}\n              >\n                <b className=\"resRM\" title={cell.getValue()}>\n                  {cell.getValue().split(\"_\")[0]}\n                </b>\n              </span>\n            );\n          } else {\n            return (\n              <span>\n                <b>Summary</b>{\" \"}\n              </span>\n            );\n          }\n        }\n      },\n    },\n\n    //-----------------------------------KPI-------------------------------------\n    {\n      header: \"\",\n      accessorKey: `kpi`,\n      Cell: ({ cell }) => (\n        <span\n          className={\n            /(T1|E1|E2|E3|L_|M_|G_|Unassigned)/.test(cell.row.original.name)\n              ? \"child resRMchild\"\n              : selectType === \"BusinessUnit\"\n              ? \"buRMchild\"\n              : selectType === \"Customer\"\n              ? \"custRMchild\"\n              : selectType === \"Project\"\n              ? \"projRMchild\"\n              : selectType === \"CSL\"\n              ? \"resRMchild\"\n              : selectType === \"DP\"\n              ? \"resRMchild\"\n              : \"inherit\"\n          }\n          style={{\n            fontWeight: \"bold\",\n          }}\n          title={cell.getValue()}\n        >\n          {cell.getValue().includes(\"FTE\") ||\n          cell.getValue().includes(\"SUBK\") ? (\n            <>&nbsp;&nbsp; {cell.getValue()}</>\n          ) : (\n            cell.getValue()\n          )}\n        </span>\n      ),\n    },\n    {\n      header: \"Total\",\n      accessorKey: `Total`,\n      Cell: ({ cell }) => (\n        <>\n          {cell.row.original.kpi === \"Resource Direct Cost\" ||\n          cell.row.original.kpi === \"Recognized Revenue\" ||\n          cell.row.original.kpi === \"Revenue/Emp\" ||\n          cell.row.original.kpi === \"Resource Direct Cost/Emp\" ||\n          cell.row.original.kpi === \"Margin/Emp\" ? (\n            <span style={{ display: \"block\", float: \"left\" }}>\n              <b>$</b>\n            </span>\n          ) : (\n            \"\"\n          )}\n          <span style={{ display: \"block\", float: \"right\" }} className=\"total\">\n            <b>\n              {Math.round(cell.getValue())?.toLocaleString(\"en-US\")}\n              {cell.row.original.kpi === \"Gross Margin %\" ? (\n                <span>{cell.getValue() === null ? \"\" : \"%\"}</span>\n              ) : (\n                \"\"\n              )}\n            </b>\n          </span>\n        </>\n      ),\n    },\n  ];\n\n  //------------------------------Hedrers Related to Dates---------------------------\n\n  column.forEach((item, index) => {\n    if (index > 1 && item !== \"Total\") {\n      const dateObj = new Date(\n        `${item.slice(0, 4)}-${item.slice(5, 7)}-${item.slice(8, 10)}`\n      );\n\n      const header = dateObj\n        .toLocaleDateString(\"en-US\", { month: \"short\", year: \"numeric\" })\n        .replace(\" \", \"-\");\n      dynamicColumns.push({\n        header,\n        accessorKey: `${item}`,\n        className: \"software\",\n        Cell: ({ cell }) => (\n          <>\n            {cell.row.original.kpi == \"Resource Direct Cost\" ||\n            cell.row.original.kpi == \"Recognized Revenue\" ||\n            cell.row.original.kpi == \"Revenue/Emp\" ||\n            cell.row.original.kpi == \"Resource Direct Cost/Emp\" ||\n            cell.row.original.kpi == \"Margin/Emp\" ? (\n              <span style={{ display: \"block\", float: \"left\" }}>$</span>\n            ) : (\n              \"\"\n            )}\n            <span style={{ display: \"block\", float: \"right\" }}>\n              {cell.getValue()?.toLocaleString(\"en-US\") == \"\" ||\n              cell.getValue()?.toLocaleString(\"en-US\") == undefined\n                ? 0\n                : cell.getValue()?.toLocaleString(\"en-US\")}\n              {cell.row.original.kpi == \"Gross Margin %\" ? <span>%</span> : \"\"}\n            </span>\n          </>\n        ),\n      });\n    }\n  });\n\n  {\n    /*------------------------------Return---------------------------------- */\n  }\n  return (\n    <div className=\"materialReactExpandableTable headCountTable darkHeader\">\n      <MaterialReactTable\n        columns={dynamicColumns}\n        data={nodes}\n        enableExpanding={(column) => column.id === \"name\"}\n        enableRowVirtualization={true}\n        enablePagination={false}\n        enableGlobalFilter={true}\n        enableDensityToggle={false}\n        enableFullScreenToggle={false}\n        enableHiding={false}\n        enableColumnFilters={false}\n        enableBottomToolbar={false}\n        enableTopToolbar={false}\n        enableColumnActions={false}\n        enableSorting={false}\n        filterFromLeafRows //apply filtering to all rows instead of just parent rows\n        initialState={{\n          showGlobalFilter: true,\n          grouping: [\"name\"],\n          expanded: true,\n          density: \"compact\",\n          columnPinning: { right: [\"Total\"] },\n        }} //expand all rows by default\n        // muiTableContainerProps={{\n        //   sx: { height: \"40vh\" },\n        // }}\n        muiTableBodyProps={{\n          sx: {\n            \"&\": {\n              borderRight: \"1px solid #ccc\",\n              borderBottom: \"1px solid #ccc\",\n            },\n            \"& td\": {\n              borderRight: \"1px solid #ccc\",\n              height: \"22px\",\n              padding: \"0px 5px\",\n            },\n          },\n        }}\n        muiTableHeadProps={{\n          sx: {\n            \"& th\": {\n              borderTop: \"1px solid #ccc\",\n              borderRight: \"1px solid #ccc\",\n              background: \"#f4f4f4 \",\n              padding: \"0 5px\",\n            },\n          },\n        }}\n      />\n      {loader ? <Loader handleAbort={handleAbort} /> : \"\"}\n    </div>\n  );\n}\n\nexport default HeadCountTableComponent;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\nimport {\n  FaChevronCircleDown,\n  FaChevronCircleUp,\n  FaSearch,\n  FaCaretDown,\n} from \"react-icons/fa\";\nimport { CCollapse } from \"@coreui/react\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\nimport GlobalValidation from \"../ValidationComponent/GlobalValidation\";\nimport HeadCountTableComponent from \"./HeadCountTableComponent\";\nimport { AiFillWarning } from \"react-icons/ai\";\nimport SelectCustDialogBox from \"../Customer/SelectCustDialogBox\";\nimport Loader from \"../Loader/Loader\";\nimport GlobalHelp from \"../PrimeReactTableComponent/GlobalHelp\";\nimport ScreenBreadcrumbs from \"../Common/ScreenBreadcrumbs\";\n\nfunction HeadCount() {\n  const abortController = useRef(null);\n  const [loader, setLoader] = useState(false);\n  const [departments, setDepartments] = useState([]);\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\n  const [country, setCountry] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState([]);\n  const [cadres, setCadres] = useState([]);\n  const [selectedCadres, setSelectedCadres] = useState([]);\n  const [measures, setMeasures] = useState([]);\n  const [selectedMeasures, setSelectedMeasures] = useState([]);\n\n  const findLaterMeasureLabel = (measures, selectedMeasures) => {\n    const selectedLabels = selectedMeasures.map((measure) => measure.label);\n    const laterMeasures = measures.filter((measure) =>\n      selectedLabels.includes(measure.label)\n    );\n    const lastLaterMeasure = laterMeasures[laterMeasures.length - 1];\n    return lastLaterMeasure ? lastLaterMeasure.label : \"\";\n  };\n\n  const laterMeasureLabel = findLaterMeasureLabel(measures, selectedMeasures);\n  console.log(laterMeasureLabel);\n\n  const [csl, setCsl] = useState([]);\n  const [selectedCsl, setSelectedCsl] = useState([]);\n  const [delivery, setDelivery] = useState([]);\n  const [selectedDelivery, setSelectedDelivery] = useState([]);\n  const [visible, setVisible] = useState(false);\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [project, setProject] = useState([]);\n  const [customer, setCustomer] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [column, setColumn] = useState([]);\n  const [selectType, setSelectType] = useState(\"BusinessUnit\");\n  const baseUrl = environment.baseUrl;\n  const [month, setMonth] = useState(\n    new Date().setMonth(new Date().getMonth() - 3)\n  );\n  const currentDate = new Date();\n  const selectedMonth = new Date(month);\n  const diffMonths =\n    (currentDate.getFullYear() - selectedMonth.getFullYear()) * 12 +\n    currentDate.getMonth() -\n    selectedMonth.getMonth();\n\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const [validationmessage, setValidationMessage] = useState(false);\n  const ref = useRef([]);\n  const [displayTableState, setDisplayTableState] = useState(false);\n  const [custVisible, setCustVisible] = useState(false);\n\n  const [routes, setRoutes] = useState([]);\n  let textContent = \"Revenue Metrics\";\n  let currentScreenName = [\"Headcount and Margins Trend\"];\n\n  useEffect(() => {\n    getMenus();\n  }, []);\n\n  const getMenus = () => {\n    // setMenusData\n\n    axios({\n      method: \"GET\",\n      url: baseUrl + `/CommonMS/master/getMenus?loggedUserId=${loggedUserId}`,\n    }).then((resp) => {\n      let getData = resp.data.map((menu) => {\n        if (menu.subMenus) {\n          menu.subMenus = menu.subMenus.filter(\n            (subMenu) =>\n              subMenu.display_name !== \"Monthly Revenue Trend\" &&\n              subMenu.display_name !== \"Revenue & Margin Variance\" &&\n              subMenu.display_name !== \"Rev. Projections\" &&\n              subMenu.display_name !== \"Project Timesheet (Deprecated)\" &&\n              subMenu.display_name !== \"Financial Plan & Review\"\n          );\n        }\n        return menu;\n      });\n      // setData2(getData);\n\n      getData.forEach((item) => {\n        if (item.display_name === textContent) {\n          setRoutes([item]);\n        }\n      });\n    });\n  };\n\n  const ArrowRenderer = ({ expanded }) => (\n    <>\n      {expanded ? (\n        <FaCaretDown className=\"chevronIcon\" />\n      ) : (\n        <FaCaretDown className=\"chevronIcon\" />\n      )}\n    </>\n  );\n\n  const Data = moment(month).startOf(\"month\").format(\"yyyy-MM-DD\");\n\n  const initialValue = {\n    month: Data,\n    duration: 3,\n    resTyp: -1,\n    countries: \"\",\n    measures: \"-1\",\n    searchType: \"BusinessUnit\",\n    busUnits: \"170,211,123,82,168,207,212,18,213,49,149,208,999\",\n    Customer: -1,\n    prjId: -1,\n    sortBy: -1,\n    cadres: -1,\n    cslRes: -1,\n    dpRes: -1,\n    objId: -1,\n    overheadChecked: false,\n  };\n  const [searchdata, setSearchdata] = useState(initialValue);\n  console.log(\"searchdata>\", searchdata);\n  const handleMonthChange = (date) => {\n    setMonth(date);\n    // Set the duration to \"Please Select\"\n    const durationSelect = document.getElementById(\"duration\");\n    durationSelect.value = \"\";\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === \"searchType\") {\n      setSelectType(value);\n      setDisplayTableState(false);\n      if (value === \"BusinessUnit\") {\n        setSearchdata((prev) => ({\n          ...prev,\n          cslRes: -1,\n          dpRes: -1,\n          prjId: -1,\n          Customer: -1,\n        }));\n      } else if (value === \"Customer\") {\n        setSearchdata((prev) => ({\n          ...prev,\n          cslRes: -1,\n          dpRes: -1,\n          prjId: -1,\n          busUnits: -1,\n          Customer: 0, // Set the busUnits property to the correct value\n        }));\n      } else if (value === \"CSL\") {\n        setSearchdata((prev) => ({\n          ...prev,\n          busUnits: -1,\n          dpRes: -1,\n          prjId: -1,\n          Customer: -1,\n        }));\n      } else if (value === \"Project\") {\n        setSearchdata((prev) => ({\n          ...prev,\n          cslRes: -1,\n          dpRes: -1,\n          busUnits: -1,\n          Customer: -1,\n        }));\n      } else {\n        setSearchdata((prev) => ({\n          ...prev,\n          cslRes: -1,\n          busUnits: -1,\n          prjId: -1,\n          Customer: -1,\n        }));\n      }\n    }\n\n    if (name == \"Customer\" && value === \"1\") {\n      setCustVisible(true);\n    }\n    setSearchdata((prev) => {\n      return { ...prev, [name]: value };\n    });\n  };\n\n  const [selectedItems, setSelectedItems] = useState([{}]);\n  const Customer = selectedItems?.map((d) => d?.id).toString();\n\n  useEffect(() => {}, [Customer]);\n  const selectedCust = JSON.parse(localStorage.getItem(\"selectedCust\"))\n    ?.map((d) => d.id)\n    ?.toString();\n\n  const customValueRenderer = (selected, _options) => {\n    return selected.length === country.length ||\n      selected.length === csl.length ||\n      selected.length === delivery.length\n      ? \"<< ALL >>\"\n      : selected.length === 0\n      ? \"<< Please Select >>\"\n      : selected.map((label) => {\n          return selected.length > 1 ? label.label + \",\" : label.label;\n        });\n  };\n\n  {\n    /*--------------Handel Search--------------- */\n  }\n\n  const handleSearch = (e) => {\n    setValidationMessage(false);\n    abortController.current = new AbortController();\n\n    let filteredData = ref.current.filter((d) => d != null);\n    ref.current = filteredData;\n    let valid = GlobalValidation(ref);\n\n    if (valid == true) {\n      setLoader(false);\n      setValidationMessage(true);\n      // setTimeout(() => {\n      //   setValidationMessage(false);\n      // }, 3000);\n      return;\n    }\n    // console.log(valid)\n\n    setDisplayTableState(false);\n    const loaderTime = setTimeout(() => {\n      setLoader(true);\n    }, 2000);\n    axios({\n      method: \"post\",\n      url:\n        baseUrl +\n        `/revenuemetricsms/headCountAndTrend/getHeadCountAndTrendData`,\n      signal: abortController.current.signal,\n      data: {\n        month: Data,\n        duration: searchdata.duration,\n        resTyp: searchdata.resTyp,\n        countries:\n          searchdata.countries == \"6,5,3,8,0,7,1,2\"\n            ? \"6,5,3,8,7,1,2\"\n            : searchdata.countries,\n        measures: searchdata.measures,\n        searchType: searchdata.searchType,\n        busUnits:\n          searchdata.searchType != \"BusinessUnit\" ? -1 : searchdata.busUnits,\n        customers:\n          searchdata.searchType == \"Customer\"\n            ? searchdata.Customer == \"1\"\n              ? selectedCust\n              : searchdata.Customer == \"-1\"\n              ? \"-1\"\n              : 0\n            : -1,\n        prjId: searchdata.prjId,\n        sortBy: searchdata.sortBy,\n        cadres:\n          searchdata.cadres == \"E1,E2,E3,L,M,G,T1,UA\" ? -1 : searchdata.cadres,\n        cslRes: searchdata.cslRes,\n        dpRes: searchdata.dpRes,\n        objId: searchdata.objId, // change in tables according to the expandable we choose\n        overheadChecked: searchdata.overheadChecked,\n      },\n    }).then((res) => {\n      setLoader(false);\n      clearTimeout(loaderTime);\n      let respData = res.data;\n      setTableData(respData.data);\n\n      {\n        /*--------------------------Headers  Data--------------------------*/\n      }\n      axios({\n        method: \"get\",\n        url:\n          baseUrl +\n          `/revenuemetricsms/headCountAndTrend/getColumnsData?reportRunId=${respData.reportRunId}`,\n        signal: abortController.current.signal,\n      })\n        .then((res1) => {\n          !valid && setVisible(!visible);\n          visible\n            ? setCheveronIcon(FaChevronCircleUp)\n            : setCheveronIcon(FaChevronCircleDown);\n          const responseString1 = res1.data.val.replace(/`/g, \"\");\n          const responseString2 = responseString1.replace(/'/g, \"\");\n          const dataArray = responseString2.split(\",\");\n          setColumn(dataArray.slice(1));\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setValidationMessage(false);\n      setDisplayTableState(true);\n    });\n  };\n\n  {\n    /*----------------Handle Abort---------------- */\n  }\n\n  const handleAbort = () => {\n    abortController.current && abortController.current.abort();\n    setLoader(false);\n  };\n\n  {\n    /*----------------Getting BU---------------- */\n  }\n\n  const getDepartments = async () => {\n    const resp = await axios({\n      url: baseUrl + `/CostMS/cost/getDepartments`, //13\n    });\n\n    let departments = resp.data;\n    departments = departments.filter(\n      (ele) => ele.value >= 0\n      // && ele.value != 243\n    );\n    departments.push({ value: 999, label: \"Non-Revenue Units\" });\n    setDepartments(departments);\n    setSelectedDepartments(departments.filter((ele) => ele.value >= 0));\n    let filteredDeptData = [];\n    departments.forEach((data) => {\n      filteredDeptData.push(data.value);\n    });\n    setSearchdata((prevVal) => ({\n      ...prevVal,\n      [\"busUnits\"]: filteredDeptData.toString(),\n    }));\n  };\n\n  {\n    /*-------------------------Getting CSL----------------------------- */\n  }\n  const handleCsl = () => {\n    const loggedUser = loggedUserId;\n    axios({\n      method: \"get\",\n      url:\n        baseUrl +\n        `/SalesMS/MasterController/getCslDropDownData?userId=${loggedUser}`,\n    }).then((res) => {\n      let custom = [];\n      let data = res.data;\n      data.length > 0 &&\n        data.forEach((e) => {\n          let cslObj = {\n            label: e.PersonName,\n            value: e.id,\n          };\n          custom.push(cslObj);\n        });\n      setCsl(custom);\n      setSelectedCsl(custom);\n    });\n  };\n\n  {\n    /*-------------------Getting Customer-------------------- */\n  }\n\n  //SELECT object_id id, object_name fullName\n  // FROM gma_master_types\n  // WHERE object_type = 'customer'\n  // ORDER BY object_name\n\n  const getCustomerdata = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/revenuemetricsms/RevenueMarginAnalysis/getCustomers`,\n    }).then(function (response) {\n      var resp = response.data;\n      setCustomer(resp);\n    });\n  };\n\n  useEffect(() => {\n    getCustomerdata();\n  }, []);\n\n  {\n    /*-------------------------Getting Countries-------------------------*/\n  }\n  const getCountries = () => {\n    axios\n      // .get(baseUrl + `/CostMS/cost/getCountries`)\n      .get(baseUrl + `/revenuemetricsms/headCountAndTrend/getCountries`)\n      .then((Response) => {\n        let countries = [];\n        let data = Response.data;\n\n        data.length > 0 &&\n          data.forEach((e) => {\n            let countryObj = {\n              label: e.countryName,\n              value: e.id,\n            };\n            countries.push(countryObj);\n          });\n\n        //////////--Alphabetical Sorting--//////////\n        const sortedcities = countries.sort(function (a, b) {\n          var nameA = a.label.toUpperCase();\n          var nameB = b.label.toUpperCase();\n          if (nameA < nameB) {\n            return -1; //nameA comes first\n          }\n          if (nameA > nameB) {\n            return 1; // nameB comes first\n          }\n          return 0; // names must be equal\n        });\n        //////////------------------------//////////\n\n        setCountry(sortedcities);\n        setSelectedCountry(countries);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  useEffect(() => {\n    let countryList = [];\n    country.forEach((d) => {\n      countryList.push(d.value);\n    });\n    setSearchdata((prevVal) => ({\n      ...prevVal,\n      [\"countries\"]: countryList.toString(),\n    }));\n  }, [country]);\n\n  {\n    /*-------------------------Getting Cadre-------------------------*/\n  }\n  const getCadre = async () => {\n    const resp = await axios({\n      url: baseUrl + `/revenuemetricsms/headCountAndTrend/getCadres`,\n    });\n\n    let cadres = [];\n    let data = resp.data;\n    data.push({ id: \"UA\", cadre: \"UnAssigned\" });\n    data.length > 0 &&\n      data.forEach((e) => {\n        let cadresObj = {\n          label: e.cadre,\n          value: e.id,\n        };\n\n        cadres.push(cadresObj);\n        setCadres(cadres);\n        setSelectedCadres(cadres.filter((ele) => ele.value != 0));\n        let filteredCadresData = [];\n        cadres.forEach((data) => {\n          if (data.value != 0) {\n            filteredCadresData.push(data.value);\n          }\n        });\n\n        setSearchdata((prevVal) => ({\n          ...prevVal,\n          [\"cadres\"]: filteredCadresData.toString(),\n        }));\n      });\n  };\n\n  {\n    /*-------------------------Getting Measure and Sort By-------------------------*/\n  }\n  const getMeasure = async () => {\n    const resp = await axios({\n      url: baseUrl + `/revenuemetricsms/headCountAndTrend/getMeasures`,\n    });\n\n    let measures = [];\n    let data = resp.data;\n\n    data.length > 0 &&\n      data.forEach((e) => {\n        let measuresObj = {\n          label: e.measures,\n          value: e.id,\n        };\n\n        measures.push(measuresObj);\n        setMeasures(measures);\n        setSelectedMeasures(measures.filter((ele) => ele.value != 0));\n        let filteredMeasuresData = [];\n        measures.forEach((data) => {\n          if (data.value != 0) {\n            filteredMeasuresData.push(data.value);\n          }\n        });\n        setSearchdata((prevVal) => ({\n          ...prevVal,\n          [\"measures\"]: filteredMeasuresData.toString(),\n        }));\n      });\n  };\n\n  {\n    /*-------------------Getting Project-------------------- */\n  }\n\n  const getProjectdata = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Audit/getProjectNameandId`,\n    }).then(function (response) {\n      var resp = response.data;\n      setProject(resp);\n    });\n  };\n\n  {\n    /*------------------Getting  DP------------------- */\n  }\n\n  const getDeliveryPartners = () => {\n    axios\n      .get(baseUrl + `/administrationms/subkconversiontrend/getdeliverypartner`)\n      .then((Response) => {\n        let deliver = [];\n        let data = Response.data;\n        // data.push({ id: 0, PersonName: \"<<Others>>\" });\n        data.length > 0 &&\n          data.forEach((e) => {\n            let deliverObj = {\n              label: e.PersonName,\n              value: e.id,\n            };\n            deliver.push(deliverObj);\n          });\n        setDelivery(deliver);\n        setSelectedDelivery(deliver);\n      });\n  };\n\n  useEffect(() => {\n    getDepartments();\n    getCountries();\n    getCadre();\n    getMeasure();\n    handleCsl();\n    getProjectdata();\n    getDeliveryPartners();\n  }, [selectType]);\n  const HelpPDFName = \"HeadCountTrend.pdf\";\n  const Headername = \"Head Count Trend Help\";\n\n  const generateDropdownLabel = (selectedOptions, allOptions) => {\n    const selectedValues = selectedOptions.map((option) => option.value);\n\n    const allValues = allOptions.map((item) => item.value);\n\n    if (selectedValues.length === allValues.length) {\n      return \"<< ALL >>\";\n    } else {\n      return selectedOptions.map((option) => option.label).join(\", \");\n    }\n  };\n  return (\n    <div>\n      {/* ///////////////////////////////////Title///////////////////////////////////// */}\n      {validationmessage ? (\n        <div className=\"statusMsg error\">\n          {\" \"}\n          <AiFillWarning /> Please select valid values for highlighted fields\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div className=\"pageTitle\">\n        <div className=\"childOne\"></div>\n        <div className=\"childTwo\">\n          <h2>Headcount and Margins Trend</h2>\n        </div>\n        <div className=\"childThree\"></div>\n      </div>\n      <ScreenBreadcrumbs\n        routes={routes}\n        currentScreenName={currentScreenName}\n      />\n\n      <div>\n        <div className=\"group mb-3 customCard\">\n          <div className=\"col-md-12 collapseHeader\">\n            <h2>Search Filters</h2>\n            <div className=\"helpBtn\">\n              <GlobalHelp pdfname={HelpPDFName} name={Headername} />\n            </div>\n            <div\n              onClick={() => {\n                setVisible(!visible);\n                visible\n                  ? setCheveronIcon(FaChevronCircleUp)\n                  : setCheveronIcon(FaChevronCircleDown);\n              }}\n            >\n              <span>{cheveronIcon}</span>\n            </div>\n          </div>\n\n          <CCollapse visible={!visible}>\n            <div className=\"group-content row\">\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"Start Month\">\n                    Start Month{\" \"}\n                    <span className=\"required\">\n                      &nbsp;<span className=\"required error-text\">*</span>\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6 datepicker\">\n                    <DatePicker\n                      className=\"month\"\n                      id=\"month\"\n                      name=\"month\"\n                      maxDate={\n                        new Date(\n                          currentDate.getFullYear(),\n                          currentDate.getMonth(),\n                          0\n                        )\n                      }\n                      selected={month}\n                      dateFormat=\"MMM-yyyy\"\n                      showMonthYearPicker\n                      onChange={(date) => {\n                        handleMonthChange(date);\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"duration\">\n                    Duration&nbsp;<span className=\"required error-text\">*</span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\">\n                    <select\n                      onChange={handleChange}\n                      className=\"text\"\n                      defaultValue={3}\n                      name=\"duration\"\n                      id=\"duration\"\n                      ref={(ele) => {\n                        ref.current[0] = ele;\n                      }}\n                    >\n                      <option value=\"\">&lt;&lt; Please Select &gt;&gt;</option>\n                      {[...Array(Math.min(diffMonths, 12))].map((_, index) => {\n                        const optionValue = index + 1;\n                        return (\n                          <option key={optionValue} value={optionValue}>\n                            {optionValue}\n                          </option>\n                        );\n                      })}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"searchType\">\n                    Search Type&nbsp;\n                    <span className=\"required error-text\">*</span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\">\n                    <select\n                      onChange={handleChange}\n                      className=\"text\"\n                      defaultValue=\"BusinessUnit\"\n                      name=\"searchType\"\n                      id=\"searchType\"\n                      ref={(ele) => {\n                        ref.current[1] = ele;\n                      }}\n                    >\n                      <option value=\"\">&lt;&lt; Please Select &gt;&gt;</option>\n                      <option value=\"BusinessUnit\">Business Unit</option>\n                      <option value=\"CSL\">CSL</option>\n                      <option value=\"Customer\">Customer</option>\n                      <option value=\"DP\">Delivery Partner</option>\n                      <option value=\"Project\">Project</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              {selectType == \"BusinessUnit\" ? (\n                <div className=\" col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"Business Unit\">\n                      Business Unit{\" \"}\n                      <span className=\"required\">\n                        &nbsp;<span className=\"required error-text\">*</span>\n                      </span>\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div\n                      className=\"col-6 multiselect\"\n                      ref={(ele) => {\n                        ref.current[2] = ele;\n                      }}\n                    >\n                      <MultiSelect\n                        ArrowRenderer={ArrowRenderer}\n                        id=\"busUnits\"\n                        options={departments.sort((a, b) =>\n                          a.label.localeCompare(b.label)\n                        )}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n                        value={selectedDepartments}\n                        disabled={false}\n                        onChange={(s) => {\n                          setSelectedDepartments(s);\n                          let filteredValues = [];\n                          s.forEach((d) => {\n                            filteredValues.push(d.value);\n                          });\n\n                          setSearchdata((prevVal) => ({\n                            ...prevVal,\n                            [\"busUnits\"]: filteredValues.toString(),\n                          }));\n                        }}\n                        valueRenderer={generateDropdownLabel}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ) : selectType == \"Customer\" ? (\n                <div className=\" col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"Customer\">\n                      Customer&nbsp;\n                      <span className=\"error-text\">*</span>\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <select\n                        className=\"cancel text\"\n                        name=\"Customer\"\n                        id=\"Customer\"\n                        onChange={handleChange}\n                        defaultValue={0}\n                      >\n                        <option value={-1}> &lt;&lt;All&gt;&gt;</option>\n                        <option value={0}>Active Customers</option>\n                        <option value={1}>Select</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              ) : selectType == \"Project\" ? (\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"email-input\">\n                      Project&nbsp;<span className=\"error-text ml-1\">*</span>\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <div\n                        className=\"autoComplete-container react  reactsearchautocomplete\"\n                        ref={(ele) => {\n                          ref.current[2] = ele;\n                        }}\n                      >\n                        <ReactSearchAutocomplete\n                          items={project}\n                          type=\"Text\"\n                          name=\"prjId\"\n                          id=\"prjId\"\n                          className=\"error AutoComplete\"\n                          onSelect={(e) => {\n                            setSearchdata((prevProps) => ({\n                              ...prevProps,\n                              prjId: e.id,\n                            }));\n                          }}\n                          showIcon={false}\n                          placeholder=\"Type minimum 3 characters\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : selectType == \"CSL\" ? (\n                <div className=\" col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"CSL\">\n                      CSL&nbsp;\n                      <span className=\"error-text\">*</span>\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div\n                      className=\"col-6 multiselect\"\n                      ref={(ele) => {\n                        ref.current[2] = ele;\n                      }}\n                    >\n                      <MultiSelect\n                        ArrowRenderer={ArrowRenderer}\n                        id=\"cslRes\"\n                        name=\"cslRes\"\n                        options={csl.sort((a, b) =>\n                          a.label.localeCompare(b.label)\n                        )}\n                        hasSelectAll={true}\n                        value={selectedCsl}\n                        shouldToggleOnHover={false}\n                        valueRenderer={generateDropdownLabel}\n                        disableSearch={false}\n                        selected={selectedCsl}\n                        disabled={false}\n                        onChange={(e) => {\n                          setSelectedCsl(e);\n                          let filteredCsl = [];\n                          e.forEach((d) => {\n                            filteredCsl.push(d.value);\n                          });\n                          setSearchdata((prevVal) => ({\n                            ...prevVal,\n                            [\"cslRes\"]: filteredCsl.toString(),\n                          }));\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ) : selectType == \"DP\" ? (\n                <div className=\" col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"businessunit\">\n                      Delivery Partner&nbsp;\n                      <span className=\"error-text\">*</span>\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div\n                      className=\"col-6 multiselect\"\n                      ref={(ele) => {\n                        ref.current[2] = ele;\n                      }}\n                    >\n                      <MultiSelect\n                        ArrowRenderer={ArrowRenderer}\n                        id=\"dpRes\"\n                        options={delivery.sort((a, b) =>\n                          a.label.localeCompare(b.label)\n                        )}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        valueRenderer={generateDropdownLabel}\n                        value={selectedDelivery}\n                        disabled={false}\n                        disableSearch={false}\n                        shouldToggleOnHover={false}\n                        onChange={(e) => {\n                          setSelectedDelivery(e);\n                          let filteredDelivery = [];\n                          e.forEach((d) => {\n                            filteredDelivery.push(d.value);\n                          });\n                          setSearchdata((prevVal) => ({\n                            ...prevVal,\n                            [\"dpRes\"]: filteredDelivery.toString(),\n                          }));\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                \"\"\n              )}\n\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"Res. Type\">\n                    Res. Type&nbsp;\n                    <span className=\"required error-text\">*</span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\">\n                    <select onChange={handleChange} name=\"resTyp\" id=\"resTyp\">\n                      <option value={-1}>&lt;&lt; All &gt;&gt;</option>\n                      <option value=\"subK\">Contractor</option>\n                      <option value=\"fte\">Employee</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"Res.Location\">\n                    Res.Location{\" \"}\n                    <span className=\"required\">\n                      &nbsp;<span className=\"required error-text\">*</span>\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div\n                    className=\"col-6 multiselect\"\n                    ref={(ele) => {\n                      ref.current[selectType == \"\" ? 2 : 3] = ele;\n                    }}\n                  >\n                    <MultiSelect\n                      ArrowRenderer={ArrowRenderer}\n                      id=\"countries\"\n                      name=\"countries\"\n                      options={country}\n                      hasSelectAll={true}\n                      value={selectedCountry}\n                      disabled={false}\n                      onChange={(e) => {\n                        setSelectedCountry(e);\n                        let filteredCountry = [];\n                        e.forEach((d) => {\n                          filteredCountry.push(d.value);\n                        });\n                        setSearchdata((prevVal) => ({\n                          ...prevVal,\n                          [\"countries\"]: filteredCountry.toString(),\n                        }));\n                      }}\n                      valueRenderer={generateDropdownLabel}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"cadres\">\n                    Cadres{\" \"}\n                    <span className=\"required\">\n                      &nbsp;<span className=\"required error-text\">*</span>\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0 p-0\">:</span>\n                  <div\n                    className=\"col-6 multiselect\"\n                    ref={(ele) => {\n                      ref.current[selectType == \"\" ? 3 : 4] = ele;\n                    }}\n                  >\n                    <MultiSelect\n                      ArrowRenderer={ArrowRenderer}\n                      id=\"cadres\"\n                      options={cadres}\n                      hasSelectAll={true}\n                      isLoading={false}\n                      shouldToggleOnHover={false}\n                      disableSearch={false}\n                      value={selectedCadres}\n                      disabled={false}\n                      onChange={(s) => {\n                        setSelectedCadres(s);\n                        let filteredValues = [];\n                        s.forEach((d) => {\n                          filteredValues.push(d.value);\n                        });\n\n                        setSearchdata((prevVal) => ({\n                          ...prevVal,\n                          [\"cadres\"]: filteredValues.toString(),\n                        }));\n                      }}\n                      valueRenderer={generateDropdownLabel}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"measures\">\n                    Measures{\" \"}\n                    <span className=\"required\">\n                      &nbsp;<span className=\"required error-text\">*</span>\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div\n                    className=\"col-6 multiselect\"\n                    ref={(ele) => {\n                      ref.current[selectType == \"\" ? 4 : 5] = ele;\n                    }}\n                  >\n                    <MultiSelect\n                      ArrowRenderer={ArrowRenderer}\n                      id=\"measures\"\n                      name=\"measures\"\n                      options={measures.sort((a, b) =>\n                        a.label.localeCompare(b.label)\n                      )}\n                      hasSelectAll={true}\n                      isLoading={false}\n                      shouldToggleOnHover={false}\n                      disableSearch={false}\n                      value={selectedMeasures}\n                      disabled={false}\n                      onChange={(s) => {\n                        setSelectedMeasures(s);\n                        let filteredValues = [];\n                        s.forEach((d) => {\n                          filteredValues.push(d.value);\n                        });\n\n                        setSearchdata((prevVal) => ({\n                          ...prevVal,\n                          [\"measures\"]: filteredValues.toString(),\n                        }));\n                      }}\n                      valueRenderer={generateDropdownLabel}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"sortBy\">\n                    Sort By&nbsp;<span className=\"required error-text\">*</span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\">\n                    <select onChange={handleChange} name=\"sortBy\" id=\"sortBy\">\n                      <option value=\"-1\">Default</option>\n                      {/* <option value=\"on\">&lt;&lt; All &gt;&gt;</option> */}\n                      {selectedMeasures.map((Item) => (\n                        <option value={Item.value}> {Item.label}</option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              {selectType == \"BusinessUnit\" ? (\n                <>\n                  {selectedMeasures.some((item) => item.value === 1339) && (\n                    <div className=\"col-md-3 mb-2\">\n                      <div className=\"form-group row\">\n                        <label className=\"col-5\">Consider Overhead Cost</label>\n                        <span className=\"col-1 p-0\">:</span>\n                        <span className=\"col-6 align-self-center\">\n                          <input\n                            type=\"checkbox\"\n                            onChange={(e) => {\n                              setSearchdata({\n                                ...searchdata,\n                                overheadChecked: e.target.checked,\n                              });\n                            }}\n                            style={{ marginTop: \"5px\" }} // add margin-top here\n                          ></input>\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                </>\n              ) : (\n                \"\"\n              )}\n\n              <div className=\"col-md-12 btn-container center my-3\">\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  onClick={() => {\n                    handleSearch();\n                  }}\n                >\n                  <FaSearch /> Search{\" \"}\n                </button>\n              </div>\n            </div>\n          </CCollapse>\n        </div>\n      </div>\n\n      {loader ? <Loader handleAbort={handleAbort} /> : \"\"}\n\n      <SelectCustDialogBox\n        flag={1}\n        visible={custVisible}\n        setVisible={setCustVisible}\n        setSelectedItems={setSelectedItems}\n        selectedItems={selectedItems}\n      />\n      {displayTableState && (\n        <HeadCountTableComponent\n          tableData={tableData}\n          column={column}\n          searchdata={searchdata}\n          month={month}\n          selectType={selectType}\n          loggedUserId={loggedUserId}\n          projects={project}\n          customer={customer}\n          selectedCust={selectedCust}\n          laterMeasureLabel={laterMeasureLabel}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default HeadCount;\n"],"names":["props","abortController","useRef","tableData","searchdata","month","selectType","loggedUserId","projects","customer","selectedCust","column","laterMeasureLabel","useState","setData","nodes","setNodes","departments","setDepartments","baseUrl","environment","loader","setLoader","csl","setCsl","delivery","setDelivery","useEffect","getDepartments","axios","url","resp","data","filter","ele","value","push","label","then","Response","deliver","id","PersonName","length","forEach","e","deliverObj","loggedUser","method","res","custom","cslObj","handleCsl","Data","moment","startOf","format","HandleInsertedData","objId","objLabel","current","AbortController","signal","duration","resTyp","countries","measures","searchType","busUnits","customers","Customer","prjId","sortBy","cadres","cslRes","dpRes","overheadChecked","respData","map","item","name","prevNodes","grossMarginIndex","findIndex","node","kpi","includes","console","log","slice","i","catch","err","jsonToTree","flatArray","options","parentId","children","dictionary","tree","nodeId","nodeParentId","Object","values","obj","dynamicColumns","header","className","accessorKey","enableGrouping","GroupedCell","cell","table","department","find","dep","getValue","activeIcons","setActiveIcons","isActive","style","cursor","onClick","some","prevActiveIcons","setTimeout","handleClick","title","substr","display","justifyContent","split","cust","fullName","proj","csls","dps","Cell","test","row","original","fontWeight","float","Math","round","toLocaleString","index","Date","toLocaleDateString","year","replace","undefined","columns","enableExpanding","enableRowVirtualization","enablePagination","enableGlobalFilter","enableDensityToggle","enableFullScreenToggle","enableHiding","enableColumnFilters","enableBottomToolbar","enableTopToolbar","enableColumnActions","enableSorting","filterFromLeafRows","initialState","showGlobalFilter","grouping","expanded","density","columnPinning","right","muiTableBodyProps","sx","borderRight","borderBottom","height","padding","muiTableHeadProps","borderTop","background","Loader","handleAbort","abort","selectedDepartments","setSelectedDepartments","country","setCountry","selectedCountry","setSelectedCountry","setCadres","selectedCadres","setSelectedCadres","setMeasures","selectedMeasures","setSelectedMeasures","selectedLabels","measure","laterMeasures","lastLaterMeasure","findLaterMeasureLabel","selectedCsl","setSelectedCsl","selectedDelivery","setSelectedDelivery","visible","setVisible","FaChevronCircleUp","cheveronIcon","setCheveronIcon","project","setProject","setCustomer","setTableData","setColumn","setSelectType","setMonth","getMonth","currentDate","selectedMonth","diffMonths","getFullYear","localStorage","getItem","validationmessage","setValidationMessage","ref","displayTableState","setDisplayTableState","custVisible","setCustVisible","routes","setRoutes","getMenus","menu","subMenus","subMenu","display_name","ArrowRenderer","initialValue","setSearchdata","handleChange","target","prev","selectedItems","setSelectedItems","d","toString","JSON","parse","filteredDeptData","prevVal","response","countryList","getCadre","cadre","cadresObj","filteredCadresData","getMeasure","measuresObj","filteredMeasuresData","countryObj","countryName","sortedcities","sort","a","b","nameA","toUpperCase","nameB","error","generateDropdownLabel","selectedOptions","allOptions","selectedValues","option","allValues","join","ScreenBreadcrumbs","currentScreenName","GlobalHelp","pdfname","FaChevronCircleDown","htmlFor","maxDate","selected","dateFormat","showMonthYearPicker","onChange","date","document","getElementById","handleMonthChange","defaultValue","Array","min","_","optionValue","localeCompare","hasSelectAll","isLoading","shouldToggleOnHover","disableSearch","disabled","s","filteredValues","valueRenderer","ReactSearchAutocomplete","items","type","onSelect","prevProps","showIcon","placeholder","filteredCsl","filteredDelivery","filteredCountry","Item","checked","marginTop","filteredData","valid","GlobalValidation","loaderTime","clearTimeout","reportRunId","res1","dataArray","val","handleSearch","SelectCustDialogBox","flag"],"sourceRoot":""}