{"version":3,"file":"static/js/130.c54ee78c.chunk.js","mappings":"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","sources":["views/Customer/ContractorCosts.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  createContext,\n  useContext,\n  useRef,\n} from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\nimport moment from \"moment\";\nimport Loader from \"../Loader/Loader\";\nimport \"primeicons/primeicons.css\";\nimport \"primereact/resources/themes/lara-light-indigo/theme.css\";\nimport \"primereact/resources/primereact.css\";\nimport \"primeflex/primeflex.css\";\nimport { AiFillWarning } from \"react-icons/ai\";\nimport { Column } from \"primereact/column\";\nimport CellRendererPrimeReactDataTable from \"../PrimeReactTableComponent/CellRendererPrimeReactDataTable\";\nimport GlobalValidation from \"../ValidationComponent/GlobalValidation\";\n\nimport {\n  FaChevronCircleDown,\n  FaChevronCircleUp,\n  FaSearch,\n  FaCaretDown,\n} from \"react-icons/fa\";\nimport { CCollapse } from \"@coreui/react\";\nimport ScreenBreadcrumbs from \"../Common/ScreenBreadcrumbs\";\n\nfunction ContractorCosts() {\n  const [data, setData] = useState([]);\n  var date = new Date();\n  const [startDate, setStartDate] = useState(\n    new Date(date.getFullYear(), date.getMonth(), 1)\n  );\n  const [country, setCountry] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [visible, setVisible] = useState(false);\n  const [searching, setsearching] = useState(false);\n  const [headerData, setHeaderData] = useState([]);\n  const [validationMessage, setValidationMessage] = useState(false);\n  const abortController = useRef(null);\n  const [exportData, setExportData] = useState([]);\n  const [searchData, setSearchData] = useState(false);\n\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const [routes, setRoutes] = useState([]);\n  let currentScreenName = [\"Contractor Costs\"];\n  let textContent = \"Administration\";\n\n  useEffect(() => {\n    data[0] && setHeaderData(JSON.parse(JSON.stringify(data[0])));\n    let imp = [\"XLS\"];\n    setExportData(imp);\n  }, [data]);\n  const ref = useRef([]);\n\n  const baseUrl = environment.baseUrl;\n  let rows = 10;\n  let alldepartments;\n  let allcountries;\n\n  const initialValue = {\n    buIds: \"\",\n    country: \"\",\n    startDate: \"\",\n  };\n  const [formData, setFormData] = useState(initialValue);\n  let formattedStartDate = moment(startDate).format(\"YYYY-MM-DD\");\n\n  const customValueRenderer = (selected, _options) => {\n    return selected.length === country.length\n      ? \"<< ALL >>\"\n      : selected.length === 0\n        ? \"<< Please Select >>\"\n        : selected.map((label) => {\n          return selected.length > 1 ? label.label + \",\" : label.label;\n        });\n  };\n  const departmentArray = formData.buIds.split(\",\");\n\n  alldepartments =\n    departmentArray.length === departments.length ? \"-1\" : formData.buIds;\n\n  const countryArray = formData.country.split(\",\");\n\n  allcountries =\n    countryArray.length === country.length ? \"-1\" : formData.country;\n\n  ////axios for BusinessUnit//////\n  const getDepartments = async () => {\n    const resp = await axios({\n      url: baseUrl + `/CostMS/cost/getDepartments`,\n    });\n\n    let departments = resp.data;\n    departments.push({ value: 0, label: \"Non-Revenue Units\" });\n    setDepartments(departments);\n    setSelectedDepartments(departments.filter((ele) => ele.value != 0));\n    let filteredDeptData = [];\n    departments.forEach((data) => {\n      if (data.value != 0) {\n        filteredDeptData.push(data.value);\n      }\n    });\n    setFormData((prevVal) => ({\n      ...prevVal,\n      [\"buIds\"]: filteredDeptData.toString(),\n    }));\n  };\n\n  const getMenus = () => {\n    axios({\n      method: \"GET\",\n      url: baseUrl + `/CommonMS/master/getMenus?loggedUserId=${loggedUserId}`,\n    }).then((resp) => {\n      let getData = resp.data.map((menu) => {\n        if (menu.subMenus) {\n          menu.subMenus = menu.subMenus.filter(\n            (subMenu) =>\n              subMenu.display_name !== \"Roles Permissions\" &&\n              subMenu.display_name !== \"Sales Permissions\" &&\n              subMenu.display_name !== \"Jobs Daily Status\" &&\n              subMenu.display_name !== \"Error Logs\" &&\n              subMenu.id != 27 &&\n              subMenu.display_name !== \"Tracker\" &&\n              subMenu.display_name !== \"Role Costs\" &&\n              subMenu.display_name !== \"Upload Role Costs\" &&\n              subMenu.display_name !== \"Contract Documents\"\n          );\n        }\n        return menu;\n      });\n\n      getData.forEach((item) => {\n        if (item.display_name === textContent) {\n          setRoutes([item]);\n        }\n      });\n    }\n    )\n  }\n  ///axios for Customer///////\n  const getCountries = () => {\n    axios\n      .get(baseUrl + `/CostMS/cost/getCountries`)\n\n      .then((Response) => {\n        let countries = [];\n\n        let data = Response.data;\n        data.length > 0 &&\n          data.forEach((e) => {\n            let countryObj = {\n              label: e.country_name,\n              value: e.id,\n            };\n            countries.push(countryObj);\n          });\n        setCountry(countries);\n        setSelectedCountry(countries);\n      });\n  };\n\n  /////axios for tabledata/////\n\n  const gettabledata = () => {\n    let valid = GlobalValidation(ref);\n\n    if (valid) {\n      setValidationMessage(true);\n      setTimeout(() => {\n        setValidationMessage(false);\n      }, 3000);\n      return;\n    }\n    setsearching(true);\n    setSearchData(false);\n    abortController.current = new AbortController();\n\n    axios({\n      method: \"post\",\n      url: baseUrl + `/administrationms/ContratorCosts/gettabledata`,\n      signal: abortController.current.signal,\n\n      // url: 'http://localhost:8093/administrationms/ContratorCosts/gettabledata',\n      data: {\n        buIds: alldepartments,\n        countryIds: allcountries,\n        fromDate: formattedStartDate,\n        salaryDecryptSalt: \"\",\n      },\n    }).then((resp) => {\n      let tabledata = resp.data;\n      // tabledata.forEach((tabledata, index) => { tabledata[\"S.No\"] = index + 1 })\n      for (let i = 0; i < tabledata.length; i++) {\n        tabledata[i][\"SNo\"] = i + 1;\n      }\n      let header = [\n        {\n          SNo: \"S.No\",\n          \"Employee ID\": \"Employee ID\",\n          Resource: \"Resource\",\n          Country: \"Country\",\n          Department: \"Department\",\n          \"Role Type\": \"Role Type\",\n          Designation: \"Designation\",\n          Cadre: \"Cadre\",\n          Cost: \"Cost\" + \" \" + \"(\" + \"$\" + \")\",\n        },\n      ];\n      let data = [...header, ...tabledata];\n      setData(data);\n      setTimeout(() => {\n        setsearching(false);\n        setSearchData(true);\n      }, 1000);\n    });\n  };\n\n  useEffect(() => {\n    let countryList = [];\n    country.forEach((d) => {\n      countryList.push(d.value);\n    });\n    setFormData((prevVal) => ({\n      ...prevVal,\n      [\"country\"]: countryList.toString(),\n    }));\n  }, [country]);\n\n  useEffect(() => {\n    getCountries();\n    getDepartments();\n    getMenus()\n    // gettabledata();\n  }, []);\n\n  const colData = useRef(\"\");\n\n  const LeftAlign = (data) => {\n    return (\n      <div align=\"center\" title={data.SNo}>\n        {data.SNo}\n      </div>\n    );\n  };\n\n  const CostAlign = (data) => {\n    return (\n      <>\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <div style={{ alignSelf: \"flex-start\" }}>{\"$\"}</div>\n          <div style={{ alignSelf: \"flex-end\" }} title={data.Cost}>\n            {data.Cost}\n          </div>\n        </div>\n      </>\n    );\n  };\n  const Cadre = (data) => {\n    return <div title={data.Cadre}>{data.Cadre == \"\" ? \"-\" : data.Cadre}</div>;\n  };\n  const Country = (data) => {\n    return (\n      <div title={data.Country == \"\" ? \"-\" : data.Country} className=\"ellipsis\">\n        {data.Country == \"\" ? \"-\" : data.Country}\n      </div>\n    );\n  };\n  const Department = (data) => {\n    return (\n      <div\n        title={data.Department == \"\" ? \"-\" : data.Department}\n        className=\"ellipsis\"\n      >\n        {data.Department == \"\" ? \"-\" : data.Department}\n      </div>\n    );\n  };\n  const Designation = (data) => {\n    return (\n      <div\n        title={data.Designation == \"\" ? \"-\" : data.Designation}\n        className=\"ellipsis\"\n      >\n        {data.Designation == \"\" ? \"-\" : data.Designation}\n      </div>\n    );\n  };\n  const Resource = (data) => {\n    return (\n      <div\n        title={data.Resource == \"\" ? \"-\" : data.Resource}\n        className=\"ellipsis\"\n      >\n        {data.Resource}\n      </div>\n    );\n  };\n  const EmployeeID = (data) => {\n    return <div title={data[\"Employee ID\"]}>{data[\"Employee ID\"]}</div>;\n  };\n  const RoleType = (data) => {\n    return (\n      <div\n        title={data[\"Role Type\"] === null ? \"-\" : data[\"Role Type\"]}\n        className=\"ellipsis\"\n      >\n        {data[\"Role Type\"] === null ? \"-\" : data[\"Role Type\"]}\n      </div>\n    );\n  };\n  const dynamicColumns = Object.keys(headerData)?.map((col, i) => {\n    return (\n      <Column\n        sortable\n        key={col}\n        body={\n          col == \"SNo\"\n            ? LeftAlign\n            : col == \"Cadre\"\n              ? Cadre\n              : col == \"Country\"\n                ? Country\n                : col == \"Department\"\n                  ? Department\n                  : col == \"Designation\"\n                    ? Designation\n                    : col == \"Resource\"\n                      ? Resource\n                      : col == \"Employee ID\"\n                        ? EmployeeID\n                        : col == \"Role Type\"\n                          ? RoleType\n                          : col == \"Cost\" && CostAlign\n        }\n        field={col}\n        header={headerData[col]}\n      />\n    );\n  });\n  const handleAbort = () => {\n    abortController.current && abortController.current.abort();\n    setsearching(false);\n  };\n  const generateDropdownLabel = (selectedOptions, allOptions) => {\n    const selectedValues = selectedOptions.map((option) => option.value);\n    const allValues = allOptions.map((item) => item.value);\n\n    if (selectedValues.length === allValues.length) {\n      return \"<< ALL >>\";\n    } else {\n      return selectedOptions.map((option) => option.label).join(\", \");\n    }\n  };\n  const ArrowRenderer = ({ expanded }) => (\n    <>\n      {expanded ? (\n        <FaCaretDown className=\"chevronIcon\" />\n      ) : (\n        <FaCaretDown className=\"chevronIcon\" />\n      )}\n    </>\n  );\n  return (\n    <div>\n      {validationMessage ? (\n        <div className=\"statusMsg error\">\n          <AiFillWarning />{\" \"}\n          {\"Please select the valid values for highlighted fields\"}\n        </div>\n      ) : (\n        \"\"\n      )}\n      <div className=\"col-md-12\">\n        <div className=\"pageTitle\">\n          <div className=\"childOne\"></div>\n          <div className=\"childTwo\">\n            <h2>Contractor Costs</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n      </div>\n      <ScreenBreadcrumbs\n        routes={routes}\n        currentScreenName={currentScreenName}\n      />\n\n      <div className=\"group mb-3 customCard\">\n        <div className=\"col-md-12 collapseHeader\">\n          <h2>Search Filters</h2>\n          <div\n            onClick={() => {\n              setVisible(!visible);\n              visible\n                ? setCheveronIcon(FaChevronCircleUp)\n                : setCheveronIcon(FaChevronCircleDown);\n            }}\n          >\n            <span>{cheveronIcon}</span>\n          </div>\n        </div>\n        <CCollapse visible={!visible}>\n          <div className=\"group-content row\">\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"country\">\n                  Country &nbsp;<span className=\"required error-text\">*</span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div\n                  className=\"col-6 multiselect\"\n                  ref={(ele) => {\n                    ref.current[0] = ele;\n                  }}\n                >\n                  <MultiSelect\n                    id=\"country\"\n                    options={country}\n                    hasSelectAll={true}\n                    value={selectedCountry}\n                    disabled={false}\n                    // valueRenderer={customValueRenderer}\n                    valueRenderer={generateDropdownLabel}\n                    ArrowRenderer={ArrowRenderer}\n                    onChange={(e) => {\n                      setSelectedCountry(e);\n                      let filteredCountry = [];\n                      e.forEach((d) => {\n                        filteredCountry.push(d.value);\n                      });\n                      setFormData((prevVal) => ({\n                        ...prevVal,\n                        [\"country\"]: filteredCountry.toString(),\n                      }));\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"bu\">\n                  BU &nbsp;<span className=\"required error-text\">*</span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div\n                  className=\"col-6 multiselect\"\n                  ref={(ele) => {\n                    ref.current[1] = ele;\n                  }}\n                >\n                  <MultiSelect\n                    id=\"buIds\"\n                    options={departments}\n                    hasSelectAll={true}\n                    isLoading={false}\n                    shouldToggleOnHover={false}\n                    disableSearch={false}\n                    value={selectedDepartments}\n                    // valueRenderer={customValueRenderer}\n                    valueRenderer={generateDropdownLabel}\n                    ArrowRenderer={ArrowRenderer}\n                    disabled={false}\n                    onChange={(s) => {\n                      setSelectedDepartments(s);\n                      let filteredValues = [];\n                      s.forEach((d) => {\n                        filteredValues.push(d.value);\n                      });\n\n                      setFormData((prevVal) => ({\n                        ...prevVal,\n                        [\"buIds\"]: filteredValues.toString(),\n                      }));\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"startDate\">\n                  Month &nbsp;<span className=\"required error-text\">*</span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div\n                  className=\"col-6 datepicker\"\n                  ref={(ele) => {\n                    ref.current[2] = ele;\n                  }}\n                >\n                  <DatePicker\n                    selected={startDate}\n                    name=\"startDate\"\n                    onChange={(e) => {\n                      setFormData((prev) => ({\n                        ...prev,\n                        [\"startDate\"]: moment(e).format(\"yyyy-MM-DD\"),\n                      }));\n                      setStartDate(e);\n                    }}\n                    dateFormat=\"MMM-yyyy\"\n                    maxDate={new Date()}\n                    showMonthYearPicker\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-2\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                onClick={gettabledata}\n              >\n                <FaSearch />\n                Search{\" \"}\n              </button>\n            </div>\n          </div>\n        </CCollapse>\n      </div>\n\n      <div className=\"col-md-12\">\n        {searching ? <Loader handleAbort={handleAbort} /> : \"\"}\n        {searchData ? (\n          <>\n            <span\n              className=\"ft16\"\n              style={{ color: \"#297AB0\", align: \"center\" }}\n            >\n              <b>\n                {\" \"}\n                Contractor Costs for {moment(startDate).format(\"MMM-YYYY\")}\n              </b>\n            </span>\n            <CellRendererPrimeReactDataTable\n              fileName={\"ContractorCostData.xls\"}\n              data={data}\n              rows={rows}\n              dynamicColumns={dynamicColumns}\n              headerData={headerData}\n              setHeaderData={setHeaderData}\n              exportData={exportData}\n            />\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ContractorCosts;\n"],"names":["useState","data","setData","date","Date","getFullYear","getMonth","startDate","setStartDate","country","setCountry","selectedCountry","setSelectedCountry","departments","setDepartments","selectedDepartments","setSelectedDepartments","FaChevronCircleUp","cheveronIcon","setCheveronIcon","visible","setVisible","searching","setsearching","headerData","setHeaderData","validationMessage","setValidationMessage","abortController","useRef","exportData","setExportData","searchData","setSearchData","loggedUserId","localStorage","getItem","routes","setRoutes","useEffect","JSON","parse","stringify","alldepartments","allcountries","ref","baseUrl","environment","buIds","formData","setFormData","formattedStartDate","moment","format","departmentArray","split","length","countryArray","getDepartments","axios","url","resp","push","value","label","filter","ele","filteredDeptData","forEach","prevVal","toString","countryList","d","then","Response","countries","e","countryObj","country_name","id","method","map","menu","subMenus","subMenu","display_name","item","LeftAlign","align","title","SNo","CostAlign","style","display","justifyContent","alignSelf","Cost","Cadre","Country","className","Department","Designation","Resource","EmployeeID","RoleType","dynamicColumns","Object","keys","col","i","sortable","body","field","header","generateDropdownLabel","selectedOptions","allOptions","selectedValues","option","allValues","join","ArrowRenderer","expanded","currentScreenName","onClick","FaChevronCircleDown","htmlFor","current","options","hasSelectAll","disabled","valueRenderer","onChange","filteredCountry","isLoading","shouldToggleOnHover","disableSearch","s","filteredValues","selected","name","prev","dateFormat","maxDate","showMonthYearPicker","type","GlobalValidation","setTimeout","AbortController","signal","countryIds","fromDate","salaryDecryptSalt","tabledata","handleAbort","abort","color","fileName","rows"],"sourceRoot":""}