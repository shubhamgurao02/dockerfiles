{"version":3,"file":"static/js/7020.6c586eb3.chunk.js","mappings":"8RAae,SAASA,EAAM,GAA8B,IAA5BC,EAAI,EAAJA,KACxBC,GADsC,EAARC,SAAiB,EAAPC,SAC7BC,EAAAA,EAAAA,OACjB,IAAKJ,EAAM,OAAO,KAClB,IAAMK,GAAcC,EAAAA,EAAAA,QAAO,MAC3B,GAA4BC,EAAAA,EAAAA,WAAS,GAAM,eAA5BC,GAAF,KAAW,MACxB,OACE,+BACE,gBAAKC,UAAU,MAAK,UAClB,UAAC,KAAM,CAACC,QAASV,EAAMG,QAAS,kBAAMK,GAAU,EAAM,EAAEG,KAAK,KAAI,WAC/D,SAAC,KAAY,WACX,SAAC,KAAW,UAAC,kCAEf,SAAC,KAAU,KACX,SAAC,KAAY,WACX,iBAAKF,UAAU,0DAAyD,WACtE,SAAC,KAAO,CACNG,QAAS,WACPP,EAAYQ,QAAQC,oBACpBb,GAASc,EAAAA,EAAAA,IAAiB,QAC5B,EAAE,SACH,UAGD,SAAC,KAAO,CACNH,QAAS,WACPP,EAAYQ,QAAQG,iBACpBf,GAASc,EAAAA,EAAAA,IAAiB,SAC1BP,GAAU,EACZ,EAAE,SACH,oBASf,C,eCyCA,MAxFA,WACE,OAA4BD,EAAAA,EAAAA,WAAS,GAAM,eAApCU,EAAM,KAAET,EAAS,KACxB,OACE,0BACE,2BACG,KACD,SAACT,EAAK,CAACC,KAAMiB,EAAQd,QAAS,kBAAMK,GAAU,EAAM,KACpD,iBAAKC,UAAU,wBAAuB,WACpC,wBAAI,sBACJ,iBAAKA,UAAU,oBAAmB,WAChC,gBAAKA,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQS,QAAQ,YAAW,UAAC,aAE3C,iBAAMT,UAAU,WAAU,SAAC,UAE7B,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,oBAAQU,GAAG,YAAW,WACpB,mBAAQC,MAAM,YAAW,SAAC,eAC1B,mBAAQA,MAAM,YAAW,SAAC,yBAKlC,gBAAKX,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQS,QAAQ,OAAM,UAAC,QAEtC,iBAAMT,UAAU,WAAU,SAAC,UAE7B,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,oBAAQU,GAAG,OAAM,WACf,mBAAQC,MAAM,YAAW,SAAC,eAC1B,mBAAQA,MAAM,WAAU,SAAC,wBAKjC,gBAAKX,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQS,QAAQ,WAAU,UAAC,YAE1C,iBAAMT,UAAU,WAAU,SAAC,UAE7B,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,SAAC,KAAW,CACVU,GAAG,WACHE,QAAS,GACTC,cAAc,EACdC,WAAW,EACXC,qBAAqB,EACrBC,eAAe,EAGfC,UAAU,YAKlB,gBAAKjB,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAOA,UAAU,QAAQS,QAAQ,YAAW,UAAC,aAE3C,iBAAMT,UAAU,WAAU,SAAC,UAE7B,iBAAMA,UAAU,YAAW,SAAC,OAC5B,gBAAKA,UAAU,QAAO,UACpB,mBAAQG,QAAS,kBAAMJ,GAAU,EAAK,EAAC,SAAC,8BAKvC,KACP,gBAAKC,UAAU,0DAAyD,UACtE,oBAAQkB,KAAK,SAASlB,UAAU,kBAAiB,UAAC,SACzC,mBAQvB,C","sources":["views/Administration/Modal.js","views/Administration/RolesPermissions.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useRef } from \"react\";\n\n// import SelectS from \"./SelectS\"\nimport { CModal } from \"@coreui/react\";\nimport { CModalBody } from \"@coreui/react\";\nimport { CModalFooter } from \"@coreui/react\";\nimport { CModalHeader } from \"@coreui/react\";\nimport { CModalTitle } from \"@coreui/react\";\nimport { CButton } from \"@coreui/react\";\nimport { useDispatch } from \"react-redux\";\nimport { undoSaveSelectSE } from \"../../reducers/SelectedSEReducer\";\n\nexport default function Modal({ open, children, onClose }) {\n  const dispatch = useDispatch();\n  if (!open) return null;\n  const selectSERef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <div className=\"box\">\n        <CModal visible={open} onClose={() => setIsOpen(false)} size=\"xl\">\n          <CModalHeader>\n            <CModalTitle>Select Customers/Prospects</CModalTitle>\n          </CModalHeader>\n          <CModalBody>{/* <SelectS ref={selectSERef}/> */}</CModalBody>\n          <CModalFooter>\n            <div className=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-3\">\n              <CButton\n                onClick={() => {\n                  selectSERef.current.resetTOlocalState();\n                  dispatch(undoSaveSelectSE(\"undo\"));\n                }}\n              >\n                Undo\n              </CButton>\n              <CButton\n                onClick={() => {\n                  selectSERef.current.setGlobalState();\n                  dispatch(undoSaveSelectSE(\"save\"));\n                  setIsOpen(false);\n                }}\n              >\n                Save\n              </CButton>\n            </div>\n          </CModalFooter>\n        </CModal>\n      </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport Modal from \"./Modal\";\nimport { MultiSelect } from \"react-multi-select-component\";\n\nfunction RolesPermissions() {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div>\n      <div>\n        {\" \"}\n        <Modal open={isOpen} onClose={() => setIsOpen(false)}></Modal>\n        <div className=\"group mb-3 customCard\">\n          <h2>Roles Permission</h2>\n          <div className=\"group-content row\">\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"Menu Type\">\n                  Menu Type\n                  <span className=\"required\">*</span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <select id=\"Menu Type\">\n                    <option value=\"Main Menu\">Main Menu</option>\n                    <option value=\"Page Menu\">Page Menu</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"Menu\">\n                  Menu\n                  <span className=\"required\">*</span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <select id=\"Menu\">\n                    <option value=\"Customers\">Customers</option>\n                    <option value=\"Projects\">Projects</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"Sub Menu\">\n                  Sub Menu\n                  <span className=\"required\">*</span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <MultiSelect\n                    id=\"Sub Menu\"\n                    options={[]}\n                    hasSelectAll={true}\n                    isLoading={false}\n                    shouldToggleOnHover={false}\n                    disableSearch={false}\n                    //   valueRenderer={customValueRenderer}\n                    //   value={selectedRoleTypes}\n                    disabled={false}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"Role Type\">\n                  Role Type\n                  <span className=\"required\">*</span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <button onClick={() => setIsOpen(true)}>\n                    Select Roles Types\n                  </button>\n                </div>\n              </div>\n            </div>{\" \"}\n            <div className=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-3\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Search{\" \"}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RolesPermissions;\n"],"names":["Modal","open","dispatch","children","onClose","useDispatch","selectSERef","useRef","useState","setIsOpen","className","visible","size","onClick","current","resetTOlocalState","undoSaveSelectSE","setGlobalState","isOpen","htmlFor","id","value","options","hasSelectAll","isLoading","shouldToggleOnHover","disableSearch","disabled","type"],"sourceRoot":""}