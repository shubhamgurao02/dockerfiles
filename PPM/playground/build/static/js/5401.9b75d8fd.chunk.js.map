{"version":3,"file":"static/js/5401.9b75d8fd.chunk.js","mappings":"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","sources":["views/Customer/CustomerListRender.js","views/Customer/Customer.js","views/DeliveryComponent/EngagementCustomer.js","views/Customer/SalesCustomerList.js","views/ServiceComponent/SalesCustomer.js","views/Customer/RevenueCustomer.js","views/Customer/SelectCustDialogBox.js","views/Customer/SelectedItems.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { BiLoaderCircle } from \"react-icons/bi\";\n\nexport default function CustomerListRender(params) {\n  const { employeeElement, selectedCust, data, search, isLoading } = params;\n\n  const [custDataList, setcustDataList] = useState([]);\n\n  useEffect(() => {\n    setcustDataList(() =>\n      data\n        ?.filter((item) => {\n          return item.fullName?.toLowerCase().includes(search);\n        })\n        .map((item) => {\n          return employeeElement(item);\n        })\n    );\n  }, [selectedCust, data, search]);\n\n  return (\n    <div className=\"row engScroll\">\n      {custDataList?.length === 0 && (\n        <div className=\"col-md-12\" id=\"noExecDiv\">\n          {/* No Executives found */}\n        </div>\n      )}\n      {isLoading ? (\n        <div className=\"loader\">\n          <div className=\"loader-animation\" style={{ textAlign: \"center\" }}>\n            <>\n              Loading...\n              <BiLoaderCircle />\n            </>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      {custDataList}\n    </div>\n  );\n}\n","import { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport CustomerListRender from \"./CustomerListRender\";\nimport SelectedItems from \"./SelectedItems\";\nimport { environment } from \"../../environments/environment\";\nimport axios from \"axios\";\n\nconst Customer = forwardRef((props, ref) => {\n  const baseUrl = environment.baseUrl;\n  const [selectedCust, setselectedCust] = useState([]);\n  const [selectedCustDisp, setselectedCustDisp] = useState([]);\n  const [allIndirectSelected, setallIndirectSelected] = useState(false);\n  const [custData, setcustData] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  //---------------------------refMethod------------------------------------\n\n  useImperativeHandle(ref, () => ({\n    setGlobalState() {\n      localStorage.setItem(\"selectedCust\", JSON.stringify(selectedCust));\n    },\n    resetTOlocalState() {\n      const localSE =\n        localStorage.getItem(\"selectedCust\") === null\n          ? []\n          : JSON.parse(localStorage.getItem(\"selectedCust\"));\n      setselectedCust(localSE);\n      localSE.length === custData.length\n        ? setallIndirectSelected(true)\n        : setallIndirectSelected(false);\n    },\n  }));\n\n  //---------------------------method------------------------------------------\n  const onSelectCust = (emp) => {\n    setselectedCust((prevState) => {\n      return prevState.some((el) => el.id === emp.id)\n        ? prevState.filter((item) => {\n            return item.id !== emp.id;\n          })\n        : [...prevState, emp];\n    });\n  };\n\n  const employeeElement = (emp) => {\n    return (\n      <div key={emp.id} className=\"option col-md-3 ellipsis row\">\n        <div className=\"col-md-2\" style={{ marginTop: \"3px\", width: \"10px\" }}>\n          {\" \"}\n          <input\n            type=\"checkbox\"\n            id={emp.id}\n            style={{\n              whiteSpace: \"nowrap\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              marginTop: \"-2px\",\n            }}\n            onChange={(e) => onSelectCust(emp)}\n            checked={selectedCust.some((el) => el.id === emp.id)}\n            className=\"mr-2\"\n          ></input>\n        </div>\n\n        <div\n          className=\" col-md-10 customerRoleMap\"\n          style={{\n            width: \"215px\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n          }}\n          title={emp.fullName}\n        >\n          {emp.fullName}\n        </div>\n      </div>\n    );\n  };\n\n  const selectAllIndirect = () => {\n    !allIndirectSelected\n      ? setselectedCust((prevState) => {\n          const empId = prevState.map((item) => item.id);\n          const newArray = custData.filter((item) => !empId.includes(item.id));\n          return [...prevState, ...newArray];\n        })\n      : setselectedCust((prevState) => {\n          const empId = custData.map((item) => item.id);\n          const newArray = prevState.filter((item) => !empId.includes(item.id));\n          return newArray;\n        });\n    setallIndirectSelected((prevState) => !prevState);\n  };\n\n  const getcustData = () => {\n    setIsLoading(true);\n    axios\n      .get(\n        props.flag == 1\n          ? baseUrl + `/customersms/Customers/getCustomersList`\n          : props.flag == 2\n          ? baseUrl + `/SalesMS/sales/getSFOpportunityAccounts`\n          : props.flag == 3 && props.dataAccess == 600\n          ? baseUrl +\n            `/CommonMS/master/getCustomers?loggedUserId=${loggedUserId}`\n          : props.dataAccess == 690\n          ? baseUrl +\n            `/ProjectMS/project/getCustomersByDP?loggedUserId=${loggedUserId}`\n          : props.dataAccess == 641\n          ? baseUrl +\n            `/ProjectMS/project/getCustomersByCsl?loggedUserId=${loggedUserId}`\n          : props.dataAccess == 932 || props.dataAccess == 500\n          ? baseUrl +\n            `/dashboardsms/allocationDashboard/getCustomers?loggedUserId=${loggedUserId}`\n          : props.dataAccess == 400\n          ? baseUrl +\n            `/dashboardsms/allocationDashboard/getCustomers?loggedUserId=${loggedUserId}`\n          : baseUrl +\n            `/administrationms/subkconversiontrend/geActiveCustomerList`\n      )\n\n      .then((resp) => {\n        const data = resp.data;\n        {\n          props.flag == 2 ? setcustData(data.sfAccResult) : setcustData(data);\n        }\n        setIsLoading(false);\n      })\n      .catch((resp) => {\n        setIsLoading(false);\n      });\n  };\n\n  //--------------------------------useEffect------------------------------------------\n  useEffect(() => {\n    setselectedCustDisp(() => {\n      return selectedCust\n        .filter((item) => {\n          return item.fullName?.toLowerCase().includes(search);\n        })\n        .map((item) => {\n          return employeeElement(item);\n        });\n    });\n  }, [selectedCust, search]);\n\n  useEffect(() => {\n    getcustData();\n  }, []);\n\n  useEffect(() => {\n    const localSE =\n      localStorage.getItem(\"selectedCust\") === null\n        ? []\n        : JSON.parse(localStorage.getItem(\"selectedCust\"));\n    setselectedCust(localSE);\n    custData?.length == localSE?.length\n      ? setallIndirectSelected(true)\n      : setallIndirectSelected(false);\n  }, [custData]);\n\n  return (\n    <div className=\"col-md-12 \">\n      <div className=\"col-md-12 mb-2\">\n        <div className=\"col-md-5 \">\n          <div className=\"form-group row\">\n            <label className=\"col-3\" htmlFor=\"engagementName\">\n              Search\n            </label>\n            <span className=\"col-1 \">:</span>\n            <div className=\"col-6\">\n              <input\n                type=\"text\"\n                placeholder=\"minimum 3 characters\"\n                onChange={(e) => setSearch(e.target.value.toLowerCase())}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-md-4 form-check\">\n        <input\n          type=\"checkbox\"\n          id=\"SelectedItems\"\n          name=\"SelectedItems\"\n          className=\"form-check-input\"\n          onChange={() => {\n            setselectedCust([]);\n            setallIndirectSelected(false);\n          }}\n          checked={selectedCust.length > 0}\n        ></input>\n        <label className=\"form-check-label\">\n          Selected Items<span className=\"col-1\">:</span>\n        </label>\n      </div>\n\n      <>\n        <div className=\"col-md-12 my-3 \">\n          <SelectedItems selectedCustDisp={selectedCustDisp} />\n        </div>\n      </>\n      <div className=\"col-md-6 form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          onChange={selectAllIndirect}\n          checked={allIndirectSelected}\n        ></input>{\" \"}\n        <label className=\"form-check-label\">\n          All Customer<span className=\"col-1\">:</span>\n        </label>\n        &nbsp;\n      </div>\n      <>\n        <CustomerListRender\n          employeeElement={employeeElement}\n          selectedCust={selectedCust}\n          data={custData}\n          search={search}\n          isLoading={isLoading}\n        />\n      </>\n    </div>\n  );\n});\n\nexport default Customer;\n","import { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport CustomerListRender from \"../Customer/CustomerListRender\";\nimport SelectedItems from \"../Customer/SelectedItems\";\nimport { environment } from \"../../environments/environment\";\nimport axios from \"axios\";\n\nconst EngagementCustomer = forwardRef((props, ref) => {\n  const baseUrl = environment.baseUrl;\n  const [selectedEngCust, setSelectedEngCust] = useState([]);\n  const [selectedCustDisp, setselectedCustDisp] = useState([]);\n  const [allIndirectSelected, setallIndirectSelected] = useState(false);\n  const [custData, setcustData] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  //---------------------------refMethod------------------------------------\n\n  useImperativeHandle(ref, () => ({\n    setGlobalState() {\n      localStorage.setItem(\"selectedEngCust\", JSON.stringify(selectedEngCust));\n    },\n    resetTOlocalState() {\n      const localSE =\n        localStorage.getItem(\"selectedEngCust\") === null\n          ? []\n          : JSON.parse(localStorage.getItem(\"selectedEngCust\"));\n      setSelectedEngCust(localSE);\n      localSE.length === custData?.length\n        ? setallIndirectSelected(true)\n        : setallIndirectSelected(false);\n    },\n  }));\n\n  //---------------------------method------------------------------------------\n  const onSelectCust = (emp) => {\n    setSelectedEngCust((prevState) => {\n      return prevState.some((el) => el.id === emp.id)\n        ? prevState.filter((item) => {\n            return item.id !== emp.id;\n          })\n        : [...prevState, emp];\n    });\n  };\n\n  const employeeElement = (emp) => {\n    return (\n      <div key={emp.id} className=\"option col-md-3 ellipsis row\">\n        <div className=\"col-md-2\" style={{ marginTop: \"3px\", width: \"10px\" }}>\n          {\" \"}\n          <input\n            type=\"checkbox\"\n            id={emp.id}\n            style={{\n              whiteSpace: \"nowrap\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              // marginRight: \"10px\",\n              marginTop: \"-2px\",\n            }}\n            // name={emp.fullName}\n            onChange={(e) => onSelectCust(emp)}\n            checked={selectedEngCust.some((el) => el.id === emp.id)}\n            className=\"mr-2\"\n          ></input>\n        </div>\n\n        <div\n          className=\" col-md-10 customerRoleMap\"\n          style={{\n            width: \"215px\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n          }}\n          title={emp.fullName}\n        >\n          {emp.fullName}\n        </div>\n      </div>\n    );\n  };\n\n  const selectAllIndirect = () => {\n    !allIndirectSelected\n      ? setSelectedEngCust((prevState) => {\n          const empId = prevState.map((item) => item.id);\n          const newArray = custData.filter((item) => !empId.includes(item.id));\n          return [...prevState, ...newArray];\n        })\n      : setSelectedEngCust((prevState) => {\n          const empId = custData.map((item) => item.id);\n          const newArray = prevState.filter((item) => !empId.includes(item.id));\n          return newArray;\n        });\n    setallIndirectSelected((prevState) => !prevState);\n  };\n\n  const getcustData = () => {\n    axios\n      .get(baseUrl + `/ProjectMS/Engagement/customerdata`)\n\n      .then((resp) => {\n        const data = resp.data;\n        console.log(data);\n        setcustData(data);\n        // localStorage.setItem(\"selectedEngCust\", JSON.stringify(data));\n        props.setInitialLength(\n          JSON.parse(localStorage.getItem(\"selectedEngCust\"))?.length\n        );\n      })\n      .catch((resp) => {\n        console.log(resp);\n      });\n  };\n  //--------------------------------useEffect------------------------------------------\n  useEffect(() => {\n    setselectedCustDisp(() => {\n      return selectedEngCust\n        .filter((item) => {\n          return item.fullName?.toLowerCase().includes(search);\n        })\n        .map((item) => {\n          return employeeElement(item);\n        });\n    });\n  }, [selectedEngCust, search]);\n\n  useEffect(() => {\n    getcustData();\n  }, []);\n\n  useEffect(() => {\n    const localSE =\n      localStorage.getItem(\"selectedEngCust\") === null\n        ? []\n        : JSON.parse(localStorage.getItem(\"selectedEngCust\"));\n    setSelectedEngCust(localSE);\n    console.log(localSE);\n    custData?.length == localSE?.length\n      ? setallIndirectSelected(true)\n      : setallIndirectSelected(false);\n  }, [custData]);\n\n  return (\n    <div className=\"col-md-12 \">\n      <div className=\"col-md-12 mb-2\">\n        <div className=\"col-md-5 \">\n          <div className=\"form-group row\">\n            <label className=\"col-3\" htmlFor=\"engagementName\">\n              Search\n            </label>\n            <span className=\"col-1 \">:</span>\n            <div className=\"col-6\">\n              <input\n                type=\"text\"\n                placeholder=\"minimum 3 characters\"\n                onChange={(e) => setSearch(e.target.value.toLowerCase())}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-md-4 form-check\">\n        <input\n          type=\"checkbox\"\n          id=\"SelectedItems\"\n          name=\"SelectedItems\"\n          className=\"form-check-input\"\n          onChange={() => {\n            setSelectedEngCust([]);\n            setallIndirectSelected(false);\n          }}\n          checked={selectedEngCust.length > 0}\n        ></input>\n        <label className=\"form-check-label\">\n          Selected Items<span className=\"col-1\">:</span>\n        </label>\n      </div>\n\n      <>\n        <div className=\"col-md-12 my-3 \">\n          <SelectedItems selectedCustDisp={selectedCustDisp} />\n        </div>\n      </>\n\n      <div className=\"col-md-6 form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          onChange={selectAllIndirect}\n          checked={allIndirectSelected}\n        ></input>{\" \"}\n        <label className=\"form-check-label\">\n          All Customers<span className=\"col-1\">:</span>\n        </label>\n        &nbsp;\n      </div>\n      <>\n        <CustomerListRender\n          employeeElement={employeeElement}\n          selectedCust={selectedEngCust}\n          data={custData}\n          search={search}\n        />\n      </>\n    </div>\n  );\n});\n\nexport default EngagementCustomer;\n","import { useEffect, useState } from \"react\";\nimport { BiLoaderCircle } from \"react-icons/bi\";\n\nexport default function SalesCustomerList(params) {\n  const {\n    employeeElement,\n    selectedCust,\n    data,\n    search,\n    custDataOne,\n    isLoading,\n  } = params;\n\n  const [custDataList, setcustDataList] = useState([]);\n  const [custDataListOne, setcustDataListOne] = useState([]);\n\n  useEffect(() => {\n    setcustDataList(() =>\n      data\n        .filter((item) => {\n          return item.fullName?.toLowerCase().includes(search);\n        })\n        .map((item) => {\n          return employeeElement(item);\n        })\n    );\n  }, [selectedCust, data, search]);\n\n  //   useEffect(() => {\n  //     setcustDataListOne(() =>\n  //       custDataOne\n  //         .filter((item) => {\n  //           return item.fullName?.toLowerCase().includes(search);\n  //         })\n  //         .map((item) => {\n  //           return employeeElement(item);\n  //         })\n  //     );\n  //   }, [selectedCust, custDataOne, search]);\n\n  return (\n    <>\n      <div className=\"row engScroll\">\n        {custDataList.length === 0 && (\n          <div className=\"col-md-12\" id=\"noExecDiv\">\n            No Executives found\n          </div>\n        )}\n        {isLoading ? (\n          <div className=\"loader\">\n            <div className=\"loader-animation\" style={{ textAlign: \"center\" }}>\n              <>\n                Loading...\n                <BiLoaderCircle />\n              </>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n\n        {custDataList}\n      </div>\n      {/* <div className=\"row engScroll\">\n        {custDataListOne.length === 0 && (\n          <div className=\"col-md-12\" id=\"noExecDiv\">\n            No Executives found\n          </div>\n        )}\n\n        {custDataListOne}\n      </div> */}\n    </>\n  );\n}\n","import { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport CustomerListRender from \"../Customer/CustomerListRender\";\nimport SelectedItems from \"../Customer/SelectedItems\";\nimport { environment } from \"../../environments/environment\";\nimport axios from \"axios\";\nimport SalesCustomerList from \"../Customer/SalesCustomerList\";\n\nwindow.addEventListener(\"beforeunload\", () => {\n  localStorage.removeItem(\"selectedEngCust\");\n  localStorage.removeItem(\"selectedEngCustOne\");\n});\n\nconst SalesCustomer = forwardRef((props, ref) => {\n  const baseUrl = environment.baseUrl;\n  const [selectedEngCust, setSelectedEngCust] = useState([]);\n  const [selectedCustDisp, setselectedCustDisp] = useState([]);\n  const [allIndirectSelected, setallIndirectSelected] = useState(false);\n  const [custData, setcustData] = useState([]);\n  const [custDataOne, setcustDataOne] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  //======\n  const [selectedEngCustOne, setSelectedEngCustOne] = useState([]);\n  const [selectedCustDispOne, setselectedCustDispOne] = useState([]);\n  const [criterionCustData, setCriterionCustData] = useState([]);\n\n  const [allIndirectSelectedOne, setallIndirectSelectedOne] = useState(false);\n  const [allIndirectSelectedTwo, setallIndirectSelectedTwo] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  //---------------------------refMethod------------------------------------\n\n  useImperativeHandle(ref, () => ({\n    setGlobalState() {\n      localStorage.setItem(\"selectedEngCust\", JSON.stringify(selectedEngCust));\n\n      localStorage.setItem(\n        \"selectedEngCustOne\",\n        JSON.stringify(selectedEngCustOne)\n      );\n    },\n\n    resetTOlocalState() {\n      const localSE =\n        localStorage.getItem(\"selectedEngCust\") === null\n          ? []\n          : JSON.parse(localStorage.getItem(\"selectedEngCust\"));\n      setSelectedEngCust(localSE);\n      localSE.length === custData?.length\n        ? setallIndirectSelected(true)\n        : setallIndirectSelected(false);\n      const localSET =\n        localStorage.getItem(\"selectedEngCustOne\") === null\n          ? []\n          : JSON.parse(localStorage.getItem(\"selectedEngCustOne\"));\n      setSelectedEngCustOne(localSET);\n      localSET.length === custDataOne?.length\n        ? setallIndirectSelectedOne(true)\n        : setallIndirectSelectedOne(false);\n    },\n  }));\n\n  //---------------------------method------------------------------------------\n  const onSelectCust = (emp) => {\n    setSelectedEngCust((prevState) => {\n      return prevState.some((el) => el.id === emp.id)\n        ? prevState.filter((item) => {\n            return item.id !== emp.id;\n          })\n        : [...prevState, emp];\n    });\n  };\n\n  //=========\n  const onSelectCustOne = (emp) => {\n    setSelectedEngCustOne((prevState) => {\n      return prevState.some((el) => el.id === emp.id)\n        ? prevState.filter((item) => {\n            return item.id !== emp.id;\n          })\n        : [...prevState, emp];\n    });\n  };\n  //===========\n\n  const employeeElement = (emp) => {\n    return (\n      <div key={emp.id} className=\"option col-md-3 ellipsis row\">\n        <div className=\"col-md-2\" style={{ marginTop: \"3px\", width: \"10px\" }}>\n          {\" \"}\n          <input\n            type=\"checkbox\"\n            id={emp.id}\n            style={{\n              whiteSpace: \"nowrap\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              // marginRight: \"10px\",\n              marginTop: \"-2px\",\n            }}\n            // name={emp.fullName}\n            onChange={(e) => onSelectCust(emp)}\n            checked={selectedEngCust.some((el) => el.id === emp.id)}\n            className=\"mr-2\"\n          ></input>\n        </div>\n\n        <div\n          className=\" col-md-10 customerRoleMap\"\n          style={{\n            width: \"215px\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n          }}\n          title={emp.fullName}\n        >\n          {emp.fullName}\n        </div>\n      </div>\n    );\n  };\n  //=============\n\n  const employeeElementOne = (emp) => {\n    return (\n      <div key={emp.id} className=\"option col-md-3 ellipsis row\">\n        <div className=\"col-md-2\" style={{ marginTop: \"3px\", width: \"10px\" }}>\n          {\" \"}\n          <input\n            type=\"checkbox\"\n            id={emp.id}\n            style={{\n              whiteSpace: \"nowrap\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              // marginRight: \"10px\",\n              marginTop: \"-2px\",\n            }}\n            // name={emp.fullName}\n            onChange={(e) => onSelectCustOne(emp)}\n            checked={selectedEngCustOne.some((el) => el.id === emp.id)}\n            className=\"mr-2\"\n          ></input>\n        </div>\n\n        <div\n          className=\" col-md-10 customerRoleMap\"\n          style={{\n            width: \"215px\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n          }}\n          title={emp.fullName}\n        >\n          {emp.fullName}\n        </div>\n      </div>\n    );\n  };\n\n  const employeeElementTwo = (emp) => {\n    return (\n      <div key={emp.id} className=\"option col-md-3 ellipsis row\">\n        <div className=\"col-md-2\" style={{ marginTop: \"3px\", width: \"10px\" }}>\n          {\" \"}\n          <input\n            type=\"checkbox\"\n            id={emp.id}\n            style={{\n              whiteSpace: \"nowrap\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              // marginRight: \"10px\",\n              marginTop: \"-2px\",\n            }}\n            // name={emp.fullName}\n            onChange={(e) => onSelectCustOne(emp)}\n            checked={selectedEngCustOne.some((el) => el.id === emp.id)}\n            className=\"mr-2\"\n          ></input>\n        </div>\n\n        <div\n          className=\" col-md-10 customerRoleMap\"\n          style={{\n            width: \"215px\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n          }}\n          title={emp.fullName}\n        >\n          {emp.fullName}\n        </div>\n      </div>\n    );\n  };\n\n  //=============\n  const selectAllIndirect = () => {\n    !allIndirectSelected\n      ? setSelectedEngCust((prevState) => {\n          const empId = prevState.map((item) => item.id);\n          const newArray = custData.filter((item) => !empId.includes(item.id));\n          return [...prevState, ...newArray];\n        })\n      : setSelectedEngCust((prevState) => {\n          const empId = custData.map((item) => item.id);\n          const newArray = prevState.filter((item) => !empId.includes(item.id));\n          return newArray;\n        });\n    setallIndirectSelected((prevState) => !prevState);\n  };\n\n  const selectAllIndirectOne = () => {\n    !allIndirectSelectedOne\n      ? setSelectedEngCustOne((prevState) => {\n          const empId = prevState.map((item) => item.id);\n          const newArray = custDataOne.filter(\n            (item) => !empId.includes(item.id)\n          );\n          return [...prevState, ...newArray];\n        })\n      : setSelectedEngCustOne((prevState) => {\n          const empId = custDataOne.map((item) => item.id);\n          const newArray = prevState.filter((item) => !empId.includes(item.id));\n          return newArray;\n        });\n    setallIndirectSelectedOne((prevState) => !prevState);\n  };\n\n  const selectAllIndirectTwo = () => {\n    !allIndirectSelectedTwo\n      ? setSelectedEngCustOne((prevState) => {\n          const empId = prevState.map((item) => item.id);\n          const newArray = criterionCustData.filter(\n            (item) => !empId.includes(item.id)\n          );\n          return [...prevState, ...newArray];\n        })\n      : setSelectedEngCustOne((prevState) => {\n          const empId = criterionCustData.map((item) => item.id);\n          const newArray = prevState.filter((item) => !empId.includes(item.id));\n          return newArray;\n        });\n    setallIndirectSelectedTwo((prevState) => !prevState);\n  };\n\n  const getcustData = () => {\n    setIsLoading(true);\n    axios\n      .get(baseUrl + `/SalesMS/services/customerProspects`)\n\n      .then((resp) => {\n        const data = resp.data;\n        setcustData(data);\n        setIsLoading(false);\n        props.setPopupIsLoading(false);\n      })\n      .catch((resp) => {\n        console.log(resp);\n      });\n  };\n\n  const getcustDataOne = () => {\n    axios\n      .get(\n        baseUrl + `/administrationms/subkconversiontrend/geActiveCustomerList`\n      )\n\n      .then((resp) => {\n        const data = resp.data;\n        setcustDataOne(data);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getCriterionCustData = () => {\n    const requestBody = {\n      executiveIds: props.executiveIds,\n    };\n    axios\n      .post(baseUrl + `/SalesMS/services/customerCriteria`, requestBody)\n      .then((res) => {\n        setCriterionCustData(res.data);\n      })\n      .catch((error) => console.log(error));\n  };\n  //--------------------------------useEffect------------------------------------------\n  useEffect(() => {\n    setselectedCustDisp(() => {\n      return selectedEngCust\n        .filter((item) => {\n          return item.fullName?.toLowerCase().includes(search);\n        })\n        .map((item) => {\n          return employeeElement(item);\n        });\n    });\n  }, [selectedEngCust, search]);\n  //=====\n  useEffect(() => {\n    setselectedCustDispOne(() => {\n      return selectedEngCustOne\n        .filter((item) => {\n          return item.fullName?.toLowerCase().includes(search);\n        })\n        .map((item) => {\n          return employeeElementOne(item);\n        });\n    });\n  }, [selectedEngCustOne, search]);\n  //====\n\n  useEffect(() => {\n    getcustData();\n    getcustDataOne();\n    getCriterionCustData();\n  }, []);\n\n  useEffect(() => {\n    const localSE =\n      localStorage.getItem(\"selectedEngCust\") === null\n        ? []\n        : JSON.parse(localStorage.getItem(\"selectedEngCust\"));\n    setSelectedEngCust(localSE);\n    custData?.length == localSE?.length\n      ? setallIndirectSelected(true)\n      : setallIndirectSelected(false);\n  }, [custData]);\n  //===========================\n\n  useEffect(() => {\n    const localSE =\n      localStorage.getItem(\"selectedEngCustOne\") === null\n        ? []\n        : JSON.parse(localStorage.getItem(\"selectedEngCustOne\"));\n    setSelectedEngCustOne(localSE);\n    custDataOne?.length == localSE?.length &&\n    criterionCustData?.length == localSE?.length\n      ? (setallIndirectSelectedOne(true), setallIndirectSelectedTwo(true))\n      : (setallIndirectSelectedOne(false), setallIndirectSelectedTwo(false));\n  }, [custDataOne, criterionCustData]);\n  // useEffect(() => {\n  // localStorage.removeItem(\"selectedEngCust\");\n  // localStorage.removeItem(\"selectedEngCustOne\");  }, []);\n\n  return (\n    <div className=\"col-md-12 \">\n      <div className=\"col-md-12 mb-2\">\n        <div className=\"col-md-5 \">\n          <div className=\"form-group row\">\n            <label className=\"col-3\" htmlFor=\"engagementName\">\n              Search\n            </label>\n            <span className=\"col-1 \">:</span>\n            <div className=\"col-6\">\n              <input\n                type=\"text\"\n                placeholder=\"minimum 3 characters\"\n                onChange={(e) => setSearch(e.target.value.toLowerCase())}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-md-4 form-check\">\n        <input\n          type=\"checkbox\"\n          id=\"SelectedItems\"\n          name=\"SelectedItems\"\n          className=\"form-check-input\"\n          onChange={() => {\n            setSelectedEngCust([]);\n            setSelectedEngCustOne([]);\n            setallIndirectSelectedOne(false);\n            setallIndirectSelected(false);\n          }}\n          checked={selectedEngCust.length > 0 || selectedEngCustOne.length > 0}\n        ></input>\n        <label className=\"form-check-label\">\n          Selected Items<span className=\"col-1\">:</span>\n        </label>\n      </div>\n\n      <>\n        <div className=\"col-md-12 my-3 \">\n          <SelectedItems\n            selectedCustDisp={selectedCustDisp}\n            selectedCustDispOne={selectedCustDispOne}\n          />\n        </div>\n      </>\n\n      <div className=\"col-md-6 form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          onChange={selectAllIndirect}\n          checked={allIndirectSelected}\n        ></input>{\" \"}\n        <label className=\"form-check-label\">\n          Prospects<span className=\"col-1\">:</span>\n        </label>\n        &nbsp;\n      </div>\n      <SalesCustomerList\n        employeeElement={employeeElement}\n        selectedCust={selectedEngCust}\n        data={custData}\n        search={search}\n        isLoading={isLoading}\n        //custDataOne={custDataOne}\n      />\n\n      <div className=\"col-md-6 form-check mt-3\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          onChange={selectAllIndirectTwo}\n          checked={allIndirectSelectedTwo}\n        ></input>{\" \"}\n        <label className=\"form-check-label\">\n          Criterion Customers (Customers of Selected Sales Executives)\n          <span className=\"col-1\">:</span>\n        </label>\n        &nbsp;\n      </div>\n      <SalesCustomerList\n        employeeElement={employeeElementTwo}\n        selectedCust={selectedEngCustOne}\n        data={criterionCustData}\n        search={search}\n        //custDataOne={custDataOne}\n      />\n\n      <div className=\"col-md-6 form-check mt-3\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          onChange={selectAllIndirectOne}\n          checked={allIndirectSelectedOne}\n        ></input>{\" \"}\n        <label className=\"form-check-label\">\n          All Customers<span className=\"col-1\">:</span>\n        </label>\n        &nbsp;\n      </div>\n      <SalesCustomerList\n        employeeElement={employeeElementOne}\n        selectedCust={selectedEngCustOne}\n        data={custDataOne}\n        search={search}\n        //custDataOne={custDataOne}\n      />\n    </div>\n  );\n});\n\nexport default SalesCustomer;\n","import { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport CustomerListRender from \"./CustomerListRender\";\nimport SelectedItems from \"./SelectedItems\";\nimport { environment } from \"../../environments/environment\";\nimport axios from \"axios\";\n\nconst RevenueCustomer = forwardRef((props, ref, variance) => {\n  const baseUrl = environment.baseUrl;\n  const [selectedCust, setselectedCust] = useState([]);\n  const [selectedCustDisp, setselectedCustDisp] = useState([]);\n  const [allIndirectSelected, setallIndirectSelected] = useState(false);\n  const [custData, setcustData] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const { activeCustomersList } = props;\n  //---------------------------refMethod------------------------------------\n\n  useImperativeHandle(ref, () => ({\n    setGlobalState() {\n      localStorage.setItem(\"selectedCust\", JSON.stringify(selectedCust));\n    },\n    resetTOlocalState() {\n      const localSE =\n        localStorage.getItem(\"selectedCust\") === null\n          ? []\n          : JSON.parse(localStorage.getItem(\"selectedCust\"));\n      setselectedCust(localSE);\n      localSE.length === custData.length\n        ? setallIndirectSelected(true)\n        : setallIndirectSelected(false);\n    },\n  }));\n\n  //---------------------------method------------------------------------------\n  const onSelectCust = (emp) => {\n    setselectedCust((prevState) => {\n      return prevState.some((el) => el.id === emp.id)\n        ? prevState.filter((item) => {\n          return item.id !== emp.id;\n        })\n        : [...prevState, emp];\n    });\n  };\n\n  const employeeElement = (emp) => {\n    return (\n      <div key={emp.id} className=\"option col-md-3 ellipsis row\">\n        <div className=\"col-md-2\" style={{ marginTop: \"3px\", width: \"10px\" }}>\n          {\" \"}\n          <input\n            type=\"checkbox\"\n            id={emp.id}\n            style={{\n              whiteSpace: \"nowrap\",\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              marginTop: \"-2px\",\n            }}\n            onChange={(e) => onSelectCust(emp)}\n            checked={selectedCust.some((el) => el.id === emp.id)}\n            className=\"mr-2\"\n          ></input>\n        </div>\n\n        <div\n          className=\" col-md-10 customerRoleMap\"\n          style={{\n            width: \"215px\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n          }}\n          title={emp.fullName}\n        >\n          {emp.fullName}\n        </div>\n      </div>\n    );\n  };\n\n  const selectAllIndirect = () => {\n    !allIndirectSelected\n      ? setselectedCust((prevState) => {\n        const empId = prevState.map((item) => item.id);\n        const newArray = custData.filter((item) => !empId.includes(item.id));\n        return [...prevState, ...newArray];\n      })\n      : setselectedCust((prevState) => {\n        const empId = custData.map((item) => item.id);\n        const newArray = prevState.filter((item) => !empId.includes(item.id));\n        return newArray;\n      });\n    setallIndirectSelected((prevState) => !prevState);\n  };\n\n  const selectAllIndirectActive = () => {\n    !allIndirectSelected\n      ? setselectedCust((prevState) => {\n        const empId = prevState.map((item) => item.id);\n        const newArray = activeCustomersList.filter((item) => !empId.includes(item.id));\n        return [...prevState, ...newArray];\n      })\n      : setselectedCust((prevState) => {\n        const empId = activeCustomersList.map((item) => item.id);\n        const newArray = prevState.filter((item) => !empId.includes(item.id));\n        return newArray;\n      });\n    setallIndirectSelected((prevState) => !prevState);\n  };\n\n  const getcustData = () => {\n    axios\n      .get(\n        props.flag == 0 &&\n          (props.dataAccess == 641 ||\n            props.dataAccess == 690 ||\n            props.dataAccess == 930)\n          ? baseUrl +\n          `/CommonMS/master/getCustomers?loggedUserId=${loggedUserId}`\n          : baseUrl +\n          \"/revenuemetricsms/RevenueMarginAnalysis/getRevenueMarginCustomerList\"\n      )\n\n      .then((resp) => {\n        const data = resp.data;\n        setcustData(data);\n      })\n      .catch((resp) => { });\n  };\n\n  //--------------------------------useEffect------------------------------------------\n  useEffect(() => {\n    setselectedCustDisp(() => {\n      return selectedCust\n        .filter((item) => {\n          return item.fullName?.toLowerCase().includes(search);\n        })\n        .map((item) => {\n          return employeeElement(item);\n        });\n    });\n  }, [selectedCust, search]);\n\n  useEffect(() => {\n    getcustData();\n  }, []);\n\n  useEffect(() => {\n    const localSE =\n      localStorage.getItem(\"selectedCust\") === null\n        ? []\n        : JSON.parse(localStorage.getItem(\"selectedCust\"));\n    setselectedCust(localSE);\n    custData?.length == localSE?.length\n      ? setallIndirectSelected(true)\n      : setallIndirectSelected(false);\n  }, [custData]);\n\n  return (\n    <div className=\"col-md-12 \">\n      <div className=\"col-md-12 mb-2\">\n        <div className=\"col-md-5 \">\n          <div className=\"form-group row\">\n            <label className=\"col-3\" htmlFor=\"engagementName\">\n              Search\n            </label>\n            <span className=\"col-1 \">:</span>\n            <div className=\"col-6\">\n              <input\n                type=\"text\"\n                placeholder=\"minimum 3 characters\"\n                onChange={(e) => setSearch(e.target.value.toLowerCase())}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"col-md-4 form-check\">\n        <input\n          type=\"checkbox\"\n          id=\"SelectedItems\"\n          name=\"SelectedItems\"\n          className=\"form-check-input\"\n          onChange={() => {\n            setselectedCust([]);\n            setallIndirectSelected(false);\n          }}\n          checked={selectedCust.length > 0}\n        ></input>\n        <label className=\"form-check-label\">\n          Selected Items<span className=\"col-1\">:</span>\n        </label>\n      </div>\n\n      <>\n        <div className=\"col-md-12 my-3 \">\n          <SelectedItems selectedCustDisp={selectedCustDisp} selectedCustDispOne={[]} />\n        </div>\n      </>\n      {/* <div className=\"col-md-6 form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          onChange={selectAllIndirectActive}\n          checked={allIndirectSelected}\n        ></input>{\" \"}\n        <label className=\"form-check-label\">\n          Active Customers of Selected BU<span className=\"col-1\">:</span>\n        </label>\n        &nbsp;\n      </div> */}\n      {/* <>\n        <CustomerListRender\n          employeeElement={employeeElement}\n          selectedCust={selectedCust}\n          data={activeCustomersList}\n          search={search}\n        />\n      </> */}\n      {/* &nbsp; */}\n      <div className=\"col-md-6 form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input\"\n          onChange={selectAllIndirect}\n          checked={selectedCust.length == 1917 ? allIndirectSelected : false}\n        ></input>{\" \"}\n        <label className=\"form-check-label\">\n          All Customer<span className=\"col-1\">:</span>\n        </label>\n        {/* &nbsp; */}\n      </div>\n      <>\n        <CustomerListRender\n          employeeElement={employeeElement}\n          selectedCust={selectedCust}\n          data={custData}\n          search={search}\n        />\n      </>\n    </div>\n  );\n});\n\nexport default RevenueCustomer;\n","import Customer from \"./Customer\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { CModal } from \"@coreui/react\";\nimport { CModalBody } from \"@coreui/react\";\nimport { CModalFooter } from \"@coreui/react\";\nimport { CModalHeader } from \"@coreui/react\";\nimport { CModalTitle } from \"@coreui/react\";\nimport { CButton } from \"@coreui/react\";\nimport { RiSave3Line } from \"react-icons/ri\";\nimport { FaUndo } from \"react-icons/fa\";\nimport { ImCross } from \"react-icons/im\";\nimport EngagementCustomer from \"../DeliveryComponent/EngagementCustomer\";\nimport SalesCustomer from \"../ServiceComponent/SalesCustomer\";\nimport RevenueCustomer from \"./RevenueCustomer.js\";\n\nexport default function SelectCustDialogBox({\n  visible,\n  setVisible,\n  setSelectedItems,\n  selectedItems,\n  value,\n  flag,\n  variance,\n  executiveIds,\n  setUpdatedValue,\n  dataAccess,\n  setPopupIsLoading,\n  activeCustomersList,\n  setInitialLength,\n}) {\n  const CustomerRef = useRef(null);\n  const ProspectsRef = useRef(null);\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const customerPopup = () => {\n    setButtonPopup(!buttonPopup);\n  };\n  console.log(dataAccess);\n  useEffect(() => {}, [dataAccess]);\n  function CustomerPopUp(props) {\n    const { setVisible, buttonPopup, setButtonPopup } = props;\n    return (\n      <div>\n        <CModal\n          visible={buttonPopup}\n          alignment=\"center\"\n          backdrop=\"static\"\n          size=\"sm\"\n        >\n          <CModalHeader closeButton={false}>\n            <div className=\"row\">\n              <CModalTitle>\n                <div>Confirmation</div>\n              </CModalTitle>\n            </div>\n            <div>\n              <button\n                className=\"btn float end\"\n                type=\"popup\"\n                onClick={() => setButtonPopup(false)}\n              >\n                <ImCross />\n              </button>\n            </div>\n          </CModalHeader>\n          <CModalBody>\n            <h6>Save changes ?</h6>\n            <div className=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-3\">\n              <button\n                type=\"delete\"\n                className=\"btn btn-primary\"\n                onClick={() => {\n                  setVisible(false);\n                  setButtonPopup(false);\n                }}\n              >\n                Yes\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={() => {\n                  setVisible(false);\n                  setButtonPopup(false);\n                }}\n              >\n                No\n              </button>\n            </div>\n          </CModalBody>\n        </CModal>\n      </div>\n    );\n  }\n  return (\n    <>\n      <div>\n        <CModal\n          alignment=\"center\"\n          backdrop=\"static\"\n          visible={visible}\n          onClose={() => setVisible(false)}\n          size=\"xl\"\n        >\n          <CModalHeader closeButton={false}>\n            <div className=\"row\">\n              <CModalTitle>\n                {value == \"EngagementS\" ? (\n                  <div style={{ fontSize: \"15px\" }}>Select Customers</div>\n                ) : flag == 2 ? (\n                  <div>Select Sf Accounts</div>\n                ) : (\n                  <div>Select Customers / Prospects</div>\n                )}\n              </CModalTitle>\n            </div>\n            {value == \"EngagementS\" ? (\n              <div>\n                <button\n                  className=\"btn float end\"\n                  type=\"popup\"\n                  onClick={() => setVisible(false)}\n                >\n                  <ImCross />\n                </button>\n              </div>\n            ) : (\n              <div>\n                <button\n                  className=\"btn float end\"\n                  type=\"popup\"\n                  onClick={() => setVisible(false)}\n                >\n                  <ImCross />\n                </button>\n              </div>\n            )}\n          </CModalHeader>\n          <CModalBody>\n            {value == \"EngagementS\" ? (\n              <EngagementCustomer\n                setInitialLength={setInitialLength}\n                ref={CustomerRef}\n                setSelectedItems={setSelectedItems}\n                selectedItems={selectedItems}\n              />\n            ) : value == \"select\" ? (\n              <div>\n                <SalesCustomer\n                  value={value}\n                  ref={CustomerRef}\n                  setSelectedItems={setSelectedItems}\n                  selectedItems={selectedItems}\n                  executiveIds={executiveIds}\n                  setPopupIsLoading={setPopupIsLoading}\n                />\n              </div>\n            ) : variance == 1 ? (\n              <RevenueCustomer\n                value={value}\n                variance={variance}\n                ref={CustomerRef}\n                setSelectedItems={setSelectedItems}\n                selectedItems={selectedItems}\n                dataAccess={dataAccess}\n                flag={flag}\n                activeCustomersList={activeCustomersList}\n              />\n            ) : (\n              <Customer\n                value={value}\n                flag={flag}\n                variance={variance}\n                ref={CustomerRef}\n                setSelectedItems={setSelectedItems}\n                selectedItems={selectedItems}\n                setUpdatedValue={setUpdatedValue}\n                dataAccess={dataAccess}\n              />\n            )}\n          </CModalBody>\n\n          <CModalFooter>\n            <div className=\" form-group col-md-12 col-sm-12 col-xs-12 btn-container center my-2\">\n              <CButton\n                color=\"primary\"\n                title=\"Save Changes\"\n                onClick={() => {\n                  CustomerRef.current.setGlobalState();\n                  setVisible(false);\n                  setButtonPopup(false);\n                }}\n              >\n                <RiSave3Line />\n                Save\n              </CButton>\n              <CButton\n                color=\"primary\"\n                title=\"Undo Changes\"\n                onClick={() => {\n                  CustomerRef.current.resetTOlocalState();\n                }}\n              >\n                <FaUndo size=\"1.0em\" title=\"Undo Chages\" />\n                Undo\n              </CButton>\n            </div>\n          </CModalFooter>\n        </CModal>\n      </div>\n\n      {buttonPopup && value !== \"EngagementS\" ? (\n        <CustomerPopUp\n          buttonPopup={buttonPopup}\n          setButtonPopup={setButtonPopup}\n          setVisible={setVisible}\n        />\n      ) : buttonPopup && value !== \"select\" ? (\n        <CustomerPopUp\n          buttonPopup={buttonPopup}\n          setButtonPopup={setButtonPopup}\n          setVisible={setVisible}\n        />\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n","export default function (props) {\n  const { selectedCustDisp, selectedCustDispOne } = props;\n\n  const isBothEmpty =\n    selectedCustDisp?.length === 0 && selectedCustDispOne?.length === 0;\n\n  return (\n    <div className=\"row engScroll\">\n      {isBothEmpty ? (\n        <div className=\"col-md-12\">None Selected</div>\n      ) : (\n        <>\n          {selectedCustDisp}\n          {selectedCustDispOne}\n        </>\n      )}\n      {/* <div className=\"clearfix\" style={{ height: '10px' }}></div> */}\n    </div>\n  );\n}\n"],"names":["CustomerListRender","params","employeeElement","selectedCust","data","search","isLoading","useState","custDataList","setcustDataList","useEffect","filter","item","fullName","toLowerCase","includes","map","className","length","id","style","textAlign","forwardRef","props","ref","baseUrl","environment","setselectedCust","selectedCustDisp","setselectedCustDisp","allIndirectSelected","setallIndirectSelected","custData","setcustData","setSearch","loggedUserId","localStorage","getItem","setIsLoading","useImperativeHandle","setGlobalState","setItem","JSON","stringify","resetTOlocalState","localSE","parse","emp","marginTop","width","type","whiteSpace","overflow","textOverflow","onChange","e","prevState","some","el","onSelectCust","checked","title","axios","flag","dataAccess","then","resp","sfAccResult","catch","htmlFor","placeholder","target","value","name","SelectedItems","empId","newArray","selectedEngCust","setSelectedEngCust","console","log","setInitialLength","SalesCustomerList","custDataOne","window","addEventListener","removeItem","setcustDataOne","selectedEngCustOne","setSelectedEngCustOne","selectedCustDispOne","setselectedCustDispOne","criterionCustData","setCriterionCustData","allIndirectSelectedOne","setallIndirectSelectedOne","allIndirectSelectedTwo","setallIndirectSelectedTwo","localSET","onSelectCustOne","employeeElementOne","setPopupIsLoading","error","requestBody","executiveIds","res","getCriterionCustData","variance","activeCustomersList","SelectCustDialogBox","visible","setVisible","setSelectedItems","selectedItems","setUpdatedValue","CustomerRef","useRef","buttonPopup","setButtonPopup","CustomerPopUp","alignment","backdrop","size","closeButton","onClick","onClose","fontSize","color","current","isBothEmpty"],"sourceRoot":""}