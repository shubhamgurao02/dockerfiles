{"version":3,"file":"static/js/4084.a176dd40.chunk.js","mappings":"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","sources":["views/ProjectComponent/ProjectHierarchyTree.js","views/ResourceSkillsComponent/Resources.js","views/Common/HierarchyView.js","views/ResourceSkillsComponent/ResourceSkillHierarchy.js","views/ResourceSkillsComponent/ResourceSkills.js"],"sourcesContent":["import * as React from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport PropTypes from \"prop-types\";\nimport SvgIcon from \"@mui/material/SvgIcon\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport TreeItem, { useTreeItem, treeItemClasses } from \"@mui/lab/TreeItem\";\nimport Collapse from \"@mui/material/Collapse\";\nimport { useSpring, animated } from \"@react-spring/web\";\nimport { FaBriefcase, FaUserAlt } from \"react-icons/fa\";\nimport { signal } from \"@preact/signals\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\nimport \"./projecthierarchy.scss\";\nimport clsx from \"clsx\";\nimport Box from \"@mui/material/Box\";\nimport competenciesTable from \"../ProgressComponent/competenciesTable\";\nimport Typography from \"@mui/material/Typography\";\nimport { useState } from \"react\";\nimport { useRef } from \"react\";\nimport { useEffect } from \"react\";\nconst baseUrl = environment.baseUrl;\n\nfunction MinusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\n    </SvgIcon>\n  );\n}\n\nfunction CloseSquare(props) {\n  return (\n    <SvgIcon\n      className=\"close\"\n      fontSize=\"inherit\"\n      style={{ width: 14, height: 14 }}\n      {...props}\n    >\n      <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" />\n    </SvgIcon>\n  );\n}\n\nfunction PlusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\n    </SvgIcon>\n  );\n}\n\nfunction TransitionComponent(props) {\n  const style = useSpring({\n    from: {\n      opacity: 0,\n      transform: \"translate3d(20px,0,0)\",\n    },\n    to: {\n      opacity: props.in ? 1 : 0,\n      transform: `translate3d(${props.in ? 0 : 20}px,0,0)`,\n    },\n  });\n\n  return (\n    <animated.div style={style}>\n      <Collapse {...props} />\n    </animated.div>\n  );\n}\n\nTransitionComponent.propTypes = {\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n};\nconst competencyTableData = signal([]);\n\nconst ProjectHierarchyTree = React.memo(\n  (props) => {\n    const {\n      defaultExpandedRows,\n      data,\n      setFlag,\n      flag,\n      setTableData,\n      projectName,\n      hierarchyCount,\n    } = props;\n    const [dataProjectId, setDataProjectId] = useState(\"\");\n    let modData;\n    const jsonToTree = (flatArray, options) => {\n      options = {\n        id: \"id\",\n        parentId: \"parent\",\n        children: \"subrows\",\n        ...options,\n      };\n      const dictionary = {}; // a hash table mapping to the specific array objects with their ids as key\n      const tree = [];\n      const children = options.children;\n      flatArray.forEach((node) => {\n        const nodeId = node[options.id];\n        const nodeParentId = node[options.parentId];\n        // set up current node data in dictionary\n        dictionary[nodeId] = {\n          [children]: [], // init a children property\n          ...node, // add other propertys\n          ...dictionary[nodeId], // children will be replaced if this node already has children property which was set below\n        };\n        dictionary[nodeParentId] = dictionary[nodeParentId] || {\n          [children]: [],\n        }; // if it's not exist in dictionary, init an object with children property\n        dictionary[nodeParentId][children].push(dictionary[nodeId]); // add reference to current node object in parent node object\n      });\n      // find root nodes\n      Object.values(dictionary).forEach((obj) => {\n        if (typeof obj[options.id] === \"undefined\") {\n          tree.push(...obj[children]);\n        }\n      });\n      return tree;\n    };\n\n    const hierarchy = jsonToTree(data);\n\n    const fromDate = new Date(projectName.projectFromDate);\n    const date = new Date(fromDate);\n    const formattedFromDate = `${date.getDate()} ${date.toLocaleString(\n      \"default\",\n      { month: \"short\" }\n    )} ${date.getFullYear()}`;\n\n    const toDate = new Date(projectName.projectToDate);\n    const tdate = new Date(toDate);\n    const formattedToDate = `${tdate.getDate()} ${tdate.toLocaleString(\n      \"default\",\n      { month: \"short\" }\n    )} ${tdate.getFullYear()}`;\n\n    let a1 = document.getElementsByClassName(\"iconContainer\");\n\n    useEffect(() => {\n      setTimeout(() => {\n        addFolderIcon();\n      }, 500);\n\n      let aa = document.getElementsByClassName(\n        \"MuiTreeView-root hierarchyTree\"\n      );\n\n      document.addEventListener(\n        \"click\",\n        function (params) {\n          setTimeout(() => {\n            const boxes = Array.from(\n              document.getElementsByClassName(\"iconContainer\")\n            );\n            let bb = Array.from(boxes[0].children);\n            bb.forEach((box) => {\n              if (box.tagName == \"SPAN\") {\n                box.remove();\n              }\n            });\n\n            if (a1[0]?.children[1]?.tagName == \"SPAN\") {\n              return;\n            }\n            addFolderIcon();\n          }, 500);\n        },\n        true\n      );\n    }, []);\n\n    const addFolderIcon = () => {\n      let spn = document.createElement(\"span\");\n      spn.innerHTML =\n        '<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 512 512\" class=\"hierarchyIcons folder\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M320 336c0 8.84-7.16 16-16 16h-96c-8.84 0-16-7.16-16-16v-48H0v144c0 25.6 22.4 48 48 48h416c25.6 0 48-22.4 48-48V288H320v48zm144-208h-80V80c0-25.6-22.4-48-48-48H176c-25.6 0-48 22.4-48 48v48H48c-25.6 0-48 22.4-48 48v80h512v-80c0-25.6-22.4-48-48-48zm-144 0H192V96h128v32z\"></path></svg>';\n      a1[0].appendChild(spn);\n    };\n\n    // expand and collapse only when click on icon(plus or minus icons) not on element\n    const CustomContent = React.forwardRef(function CustomContent(props, ref) {\n      const {\n        classes,\n        className,\n        label,\n        nodeId,\n        icon: iconProp,\n        expansionIcon,\n        displayIcon,\n      } = props;\n\n      const {\n        disabled,\n        expanded,\n        selected,\n        focused,\n        handleExpansion,\n        handleSelection,\n        preventSelection,\n      } = useTreeItem(nodeId);\n\n      const icon = iconProp || expansionIcon || displayIcon;\n\n      const handleMouseDown = (event) => {\n        preventSelection(event);\n      };\n\n      const handleExpansionClick = (event) => {\n        handleExpansion(event);\n      };\n\n      const handleSelectionClick = async (event) => {\n        // debugger;\n        handleSelection(event);\n        console.log(event);\n        let propData = nodeId;\n        let splitdata = propData?.split(\"_\")[2];\n        let projectId = propData?.split(\"_\")[0];\n        let roleId = propData?.split(\"_\")[1];\n\n        let fData = competenciesTable(\n          splitdata,\n          projectId,\n          roleId,\n          setDataProjectId,\n          setFlag,\n          setTableData\n        );\n      };\n\n      return (\n        <div\n          className={clsx(className, classes.root, {\n            [classes.expanded]: expanded,\n            [classes.selected]: selected,\n            [classes.focused]: focused,\n            [classes.disabled]: disabled,\n          })}\n          onMouseDown={handleMouseDown}\n          ref={ref}\n        >\n          <div onClick={handleExpansionClick} className={classes.iconContainer}>\n            {icon}\n          </div>\n          <Typography\n            onClick={handleSelectionClick}\n            component=\"div\"\n            // className={classes.label}\n          >\n            {label}\n          </Typography>\n        </div>\n      );\n    });\n\n    const hasChildren = (nodeId) => {\n      const isParent = data.find((obj) => obj.parent == nodeId);\n      return isParent ? true : false;\n    };\n\n    const StyledTreeItem = styled((props) => (\n      <div className=\"hierarchy tree\">\n        <TreeItem\n          ContentComponent={CustomContent} // expanding only when click on plus icon\n          {...props}\n          key={String(props.node.id)}\n          nodeId={String(props.node.id)}\n          icon={!hasChildren(props.node?.id) ? <CloseSquare /> : \"\"}\n          label={\n            <Box sx={{ display: \"flex\", alignItems: \"center\", p: 0.5, pr: 0 }}>\n              <Box color=\"inherit\" sx={{ mr: 1 }} />\n\n              <Typography\n                variant=\"body2\"\n                sx={{ fontWeight: \"inherit\", flexGrow: 1 }}\n              >\n                <span\n                  style={{\n                    color: props.node.text.includes(\"span\")\n                      ? props.node.text.split('\"')[1].split(\":\")[1]\n                      : \"\",\n                    fontWeight: props.node.parent.includes(\"#\") ? \"bold\" : \"\",\n                  }}\n                >\n                  <span\n                    style={{\n                      fontWeight: props.node.text.includes(\"b\") ? \"bold\" : \"\",\n                    }}\n                  >\n                    {<FaUserAlt />}&nbsp; &nbsp;\n                    {props.node.text.includes(\"span\")\n                      ? props.node.text\n                          .split('\">')[1]\n                          .split(\"(\")[0]\n                          .replaceAll(\"<b>\", \"\")\n                          .replaceAll(\"</b>\", \"\")\n                      : props.node.text\n                          .split(\"(\")[0]\n                          .replaceAll(\"<b>\", \"\")\n                          .replaceAll(\"</b>\", \"\")}\n                    {}\n                  </span>\n                  <span>\n                    {\" \"}\n                    {props.node.text.split(\"(\")[1] != undefined\n                      ? props.node.text.split(\"(\")[1].includes(\"span\")\n                        ? \"(\" +\n                          props.node.text\n                            .split(\"(\")[1]\n                            .replaceAll(\"</span>\", \"\")\n                        : \"(\" + props.node.text.split(\"(\")[1]\n                      : \"\"}\n                  </span>\n                </span>\n              </Typography>\n            </Box>\n          }\n          TransitionComponent={TransitionComponent}\n          title={\n            props.node.text.split(\"(\")[1] != undefined &&\n            props.node.text.split(\"(\")[1].includes(\"span\")\n              ? \"\"\n              : \"From Date    : \" +\n                formattedFromDate +\n                \"\\n\" +\n                \"To Date         : \" +\n                formattedToDate\n          }\n        >\n          {Array.isArray(props.node.subrows)\n            ? props.node.subrows.map((node) => renderTree(node))\n            : \"\"}\n        </TreeItem>\n      </div>\n    ))(({ theme }) => ({\n      [`& .${treeItemClasses.iconContainer}`]: {\n        \"& .close\": {\n          opacity: 0.3,\n        },\n      },\n      [`& .${treeItemClasses.group}`]: {\n        marginLeft: 15,\n        paddingLeft: 18,\n        borderLeft: `1px dashed ${alpha(theme.palette.text.primary, 0.4)}`,\n      },\n    }));\n\n    const temp = (data, projectId, roleId) => {\n      setDataProjectId(data + \"_\" + projectId);\n      setFlag(data == undefined ? false : true);\n\n      axios({\n        method: \"get\",\n        url:\n          baseUrl +\n          `/ProjectMS/project/getResCompts?resId=${data}&prjId=${projectId}&roleId=${roleId}`,\n      }).then((res) => {\n        let criticality = res.data;\n\n        setTableData(criticality);\n      });\n    };\n\n    const renderTree = (nodes) => (\n      <div>\n        <StyledTreeItem node={nodes}></StyledTreeItem>\n      </div>\n    );\n\n    return (\n      <div\n        style={{ maxHeight: \"400px\", minHeight: \"500px\", overflowY: \"auto\" }}\n      >\n        <TreeView\n          aria-label=\"rich object\"\n          defaultExpanded={[defaultExpandedRows]}\n          defaultParentIcon={\n            <div className=\"iconContainer\">\n              <MinusSquare className=\"hierarchyIcons\" />\n            </div>\n          }\n          defaultCollapseIcon={\n            <div className=\"iconContainer\">\n              <MinusSquare className=\"hierarchyIcons\" />\n            </div>\n          }\n          defaultExpandIcon={\n            <div className=\"iconContainer\">\n              <PlusSquare className=\"hierarchyIcons\" />\n            </div>\n          }\n          defaultEndIcon={<FaUserAlt className=\"hierarchyIcons user\" />}\n          sx={{\n            \"& .css-1g86id8-MuiTreeItem-content .MuiTreeItem-label\": {\n              width: \"auto\",\n              minwidth: 0,\n            },\n          }}\n          className=\"hierarchyTree\"\n        >\n          {renderTree(hierarchy[0])}\n        </TreeView>\n      </div>\n    );\n  },\n\n  (prevProps, currentProps) => {\n    if (prevProps.hierarchyCount === currentProps.hierarchyCount) {\n      return true;\n    }\n\n    return false;\n  }\n);\n\nexport default ProjectHierarchyTree;\n","import React, { useState, useEffect } from \"react\";\nimport Tree from \"react-animated-tree-v2\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\n\nimport { memo } from \"react\";\n\n// import getResourceData from \"./ResourceSkillData\";\n\nfunction Resources({ onSubmit, hierarchydata }) {\n  const baseUrl = environment.baseUrl;\n\n  const [nodeVal, setNodeVal] = useState(\"\");\n  const [nodeData, setNodeData] = useState([]);\n  console.log(hierarchydata)\n  useEffect(() => {\n    // let data = getResourceData();\n    // let arrayData = data[0];\n    // console.log(\"dataA\", arrayData);\n    // console.log(\"inresource\", data);\n    // console.log(\"inresource\", data[0]);\n    setNodeData(hierarchydata);\n  }, []);\n  const treeStyles = {\n    // position: \"absolute\",\n    // top: 100,\n    // left: 40,\n    color: \"black\",\n    fill: \"black\",\n    width: \"100%\",\n  };\n  // console.log(nodeData, \"---- nodeData\")\n\n  const typeStyles = {\n    fontSize: \"2em\",\n    verticalAlign: \"middle\",\n  };\n  const handletree = (data) => {\n    console.log(\"data\", data, typeof data);\n    let id = data\n    console.log(id);\n\n    axios({\n      method: \"get\",\n      url: baseUrl + `/customersms/Customers/getReshierarchy?rid=${id}`,\n    })\n      .then(function (response) {\n        var resp = response.data;\n        setNodeData(resp);\n        console.log(resp)\n      })\n    // setNodeVal(data);\n    // console.log('i',nodeVal)\n    // onSubmit(data);\n  };\n  return (\n    <div className=\"group mb-3 customCard\">\n      {/* <h2>Resources</h2> */}\n      <div className=\"group-content row\">\n\n        {hierarchydata && hierarchydata.map((ele) => {\n          // console.log(hierarchydata)\n          return (\n            <div className=\"col-md-12\">\n              {/* <Tree content={ele.name} type=\"ITEM\" canHide open style={treeStyles}> */}\n              <Tree\n                content={ele.full_name}\n                canHide\n                open\n                style={treeStyles}\n                onClick={() => handletree(ele.id)}\n              >\n                {ele?.subrows?.map((e) => {\n                  return (\n                    ele.has_childs == 1 &&\n                    <Tree\n                      content={e.full_name}\n                      canHide\n                      type={<span style={typeStyles}></span>}\n                      onItemToggle={() => handletree(e.id)}\n                    >\n                      {e.has_childs == 1\n                        ?\n                        // e.map((el) => {\n                        // { console.log(el.has_childs) }\n                        // return (\n\n                        // el.has_childs == 1 &&\n                        <Tree\n                          // content={el.full_name}\n                          canHide\n                          style={{ color: \"#77eb67\" }}\n                          onItemToggle={() => handletree(e.id)}\n                        />\n\n                        // );\n\n                        // })\n                        : \"\"}\n                    </Tree>\n                  );\n                })}\n              </Tree>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Resources);\n","import * as React from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport PropTypes from \"prop-types\";\nimport SvgIcon from \"@mui/material/SvgIcon\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport Collapse from \"@mui/material/Collapse\";\nimport { useSpring, animated } from \"@react-spring/web\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { useEffect } from \"react\";\n\nfunction MinusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\n    </SvgIcon>\n  );\n}\n\nfunction PlusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\n    </SvgIcon>\n  );\n}\n\nfunction TransitionComponent(props) {\n  const style = useSpring({\n    from: {\n      opacity: 0,\n      transform: \"translate3d(20px,0,0)\",\n    },\n    to: {\n      opacity: props.in ? 1 : 0,\n      transform: `translate3d(${props.in ? 0 : 20}px,0,0)`,\n    },\n  });\n\n  return (\n    <animated.div style={style}>\n      <Collapse {...props} />\n    </animated.div>\n  );\n}\n\nTransitionComponent.propTypes = {\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n};\n\nconst StyledTreeItem = styled((props) => (\n  <div>\n    <TreeItem\n      {...props}\n      key={String(props.node?.id)}\n      nodeId={String(props.node?.id)}\n      // label={props.node?.full_name}\n      label={\n        <Tooltip title={props.node?.full_name}>\n          <span>{props.node?.full_name}</span>\n        </Tooltip>\n      }\n      TransitionComponent={TransitionComponent}\n    >\n      {Array.isArray(props.node?.subRows)\n        ? props.node?.subRows.map((node) => renderTree(node))\n        : console.log(\"coming here?\")}\n    </TreeItem>\n  </div>\n))(({ theme }) => ({\n  [`& .${treeItemClasses.iconContainer}`]: {\n    \"& .close\": {\n      opacity: 0.3,\n    },\n  },\n  [`& .${treeItemClasses.group}`]: {\n    marginLeft: 15,\n    paddingLeft: 18,\n    borderLeft: `1px dashed ${alpha(theme.palette.text.primary, 0.4)}`,\n  },\n}));\n\nconst renderTree = (nodes) => (\n  <div>\n    <StyledTreeItem node={nodes}></StyledTreeItem>\n  </div>\n);\n\nexport default function HierarchyView(props) {\n  const { defaultExpandedRows, data } = props;\n  useEffect(() => {\n    setTimeout(() => {\n      document\n        .getElementsByClassName(\"MuiTreeItem-root\")[0]\n        .children[0].click();\n    }, 1000);\n  }, []);\n  console.log(data);\n  const jsonToTree = (flatArray, options) => {\n    if (!Array.isArray(flatArray)) {\n      return [];\n    }\n    options = {\n      id: \"id\",\n      parentId: \"parent_id\",\n      children: \"subRows\",\n      ...options,\n    };\n    const dictionary = {}; // a hash table mapping to the specific array objects with their ids as key\n    const tree = [];\n    const children = options.children;\n    flatArray?.forEach((node) => {\n      const nodeId = node[options.id];\n      const nodeParentId = node[options.parentId];\n      // set up current node data in dictionary\n      dictionary[nodeId] = {\n        [children]: [], // init a children property\n        ...node, // add other propertys\n        ...dictionary[nodeId], // children will be replaced if this node already has children property which was set below\n      };\n      dictionary[nodeParentId] = dictionary[nodeParentId] || { [children]: [] }; // if it's not exist in dictionary, init an object with children property\n      dictionary[nodeParentId][children].push(dictionary[nodeId]); // add reference to current node object in parent node object\n    });\n    // find root nodes\n    Object.values(dictionary).forEach((obj) => {\n      if (typeof obj[options.id] === \"undefined\") {\n        tree.push(...obj[children]);\n      }\n    });\n    return tree;\n  };\n  const hierarchy = jsonToTree(data);\n\n  return (\n    <TreeView\n      aria-label=\"rich object\"\n      defaultExpanded={[defaultExpandedRows]}\n      defaultParentIcon={\n        <div className=\"iconContainer\">\n          <MinusSquare className=\"hierarchyIcons\" />\n        </div>\n      }\n      defaultCollapseIcon={<MinusSquare className=\"hierarchyIcons\" />}\n      defaultExpandIcon={<PlusSquare className=\"hierarchyIcons\" />}\n      sx={{\n        \"& .css-1g86id8-MuiTreeItem-content .MuiTreeItem-label\": {\n          width: \"auto\",\n          minwidth: 0,\n        },\n      }}\n      className=\"hierarchyTree\"\n    >\n      {renderTree(hierarchy[0])}\n    </TreeView>\n  );\n}\n","import * as React from \"react\";\nimport TreeView from \"@mui/lab/TreeView\";\nimport PropTypes from \"prop-types\";\nimport SvgIcon from \"@mui/material/SvgIcon\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport TreeItem, { treeItemClasses } from \"@mui/lab/TreeItem\";\nimport Collapse from \"@mui/material/Collapse\";\nimport { useSpring, animated } from \"@react-spring/web\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { useEffect } from \"react\";\n\nfunction MinusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\n    </SvgIcon>\n  );\n}\n\nfunction PlusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\n    </SvgIcon>\n  );\n}\n\nfunction TransitionComponent(props) {\n  const style = useSpring({\n    from: {\n      opacity: 0,\n      transform: \"translate3d(20px,0,0)\",\n    },\n    to: {\n      opacity: props.in ? 1 : 0,\n      transform: `translate3d(${props.in ? 0 : 20}px,0,0)`,\n    },\n  });\n\n  return (\n    <animated.div style={style}>\n      <Collapse {...props} />\n    </animated.div>\n  );\n}\n\nTransitionComponent.propTypes = {\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n};\n\nconst StyledTreeItem = styled(({ onNodeClick, node, ...props }) => (\n  <div key={String(node?.id)}>\n    <TreeItem\n      {...props}\n      nodeId={String(node?.id)}\n      label={\n        <Tooltip title={node?.full_name}>\n          <span>{node?.full_name}</span>\n        </Tooltip>\n      }\n      onClick={() => {\n        onNodeClick(node?.id);\n        console.log(node?.id);\n      }}\n      TransitionComponent={TransitionComponent}\n    >\n      {Array.isArray(node?.subRows)\n        ? node?.subRows.map((childNode) => (\n            <StyledTreeItem\n              key={String(childNode?.id)}\n              node={childNode}\n              onNodeClick={onNodeClick}\n            />\n          ))\n        : null}\n    </TreeItem>\n  </div>\n))(({ theme }) => ({\n  [`& .${treeItemClasses.iconContainer}`]: {\n    \"& .close\": {\n      opacity: 0.3,\n    },\n  },\n  [`& .${treeItemClasses.group}`]: {\n    marginLeft: 15,\n    paddingLeft: 18,\n    borderLeft: `1px dashed ${alpha(theme.palette.text.primary, 0.4)}`,\n  },\n}));\n\nconst renderTree = (nodes) => (\n  <div>\n    <StyledTreeItem node={nodes}></StyledTreeItem>\n  </div>\n);\n\nexport default function ResourceSkillHierarchy(props) {\n  const { defaultExpandedRows, data, setResourceClickId } = props;\n  useEffect(() => {\n    setTimeout(() => {\n      document\n        .getElementsByClassName(\"MuiTreeItem-root\")[0]\n        .children[0].click();\n    }, 1000);\n  }, []);\n  const handleNodeClick = (id) => {\n    console.log(id);\n    setResourceClickId(parseInt(id) - 1); // This will log the clicked node's id value\n  };\n  console.log(data);\n  const jsonToTree = (flatArray, options) => {\n    if (!Array.isArray(flatArray)) {\n      return [];\n    }\n    options = {\n      id: \"id\",\n      parentId: \"parent_id\",\n      children: \"subRows\",\n      ...options,\n    };\n    const dictionary = {}; // a hash table mapping to the specific array objects with their ids as key\n    const tree = [];\n    const children = options.children;\n    flatArray?.forEach((node) => {\n      const nodeId = node[options.id];\n      const nodeParentId = node[options.parentId];\n      // set up current node data in dictionary\n      dictionary[nodeId] = {\n        [children]: [], // init a children property\n        ...node, // add other propertys\n        ...dictionary[nodeId], // children will be replaced if this node already has children property which was set below\n      };\n      dictionary[nodeParentId] = dictionary[nodeParentId] || { [children]: [] }; // if it's not exist in dictionary, init an object with children property\n      dictionary[nodeParentId][children].push(dictionary[nodeId]); // add reference to current node object in parent node object\n    });\n    // find root nodes\n    Object.values(dictionary).forEach((obj) => {\n      if (typeof obj[options.id] === \"undefined\") {\n        tree.push(...obj[children]);\n      }\n    });\n    return tree;\n  };\n  const hierarchy = jsonToTree(data);\n  return (\n    <TreeView\n      aria-label=\"rich object\"\n      defaultExpanded={[defaultExpandedRows]}\n      defaultParentIcon={\n        <div className=\"iconContainer\">\n          <MinusSquare className=\"hierarchyIcons\" />\n        </div>\n      }\n      defaultCollapseIcon={<MinusSquare className=\"hierarchyIcons\" />}\n      defaultExpandIcon={<PlusSquare className=\"hierarchyIcons\" />}\n      sx={{\n        \"& .css-1g86id8-MuiTreeItem-content .MuiTreeItem-label\": {\n          width: \"auto\",\n          minwidth: 0,\n        },\n      }}\n      className=\"hierarchyTree\"\n    >\n      {data.map((node) => (\n        <StyledTreeItem\n          key={String(node?.id)}\n          node={node}\n          onNodeClick={handleNodeClick}\n        />\n      ))}\n      {/* {renderTree(hierarchy[0])} */}\n    </TreeView>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { FaStar, FaPlus } from \"react-icons/fa\";\nimport { FaRegStar } from \"react-icons/fa\";\nimport Resources from \"./Resources\";\nimport moment from \"moment\";\nimport { SettingsRemoteSharp, WifiLock } from \"@mui/icons-material\";\n// import getResourceData from \"./ResourceSkillData\";\n// import { getTableData } from \"./ResourceSkillData\";\nimport { environment } from \"../../environments/environment\";\nimport DisplayStar from \"./DisplayStar\";\nimport { Pagination } from \"@mui/lab\";\n\nimport Loader from \"../Loader/Loader\";\nimport FlatPrimeReactTable from \"../PrimeReactTableComponent/FlatPrimeReactTable\";\nimport HierarchyView from \"../Common/HierarchyView\";\nimport GlobalHelp from \"../PrimeReactTableComponent/GlobalHelp\";\nimport ScreenBreadcrumbs from \"../Common/ScreenBreadcrumbs\";\nimport ProjectHierarchyTree from \"../ProjectComponent/ProjectHierarchyTree\";\nimport ResourceSkillHierarchy from \"./ResourceSkillHierarchy\";\nfunction ResourceSkills() {\n  const [employeeData, setEmployeeData] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const [loader1, setLoader1] = useState(false);\n  const [tableData, setTableData] = useState([]);\n  const [hierarchydata, setHierarchyData] = useState([]);\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const [bool, setBool] = useState(false);\n  const [currentItem, setCurrentItem] = useState(0);\n  const [pageCount, setpageCount] = useState(1);\n  const [itemOffSet, setItemOffSet] = useState(0);\n  const itemPerPage = 10;\n  const initialPage = 1;\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [startIndex, setStartIndex] = useState(0);\n  const [endIndex, setEndIndex] = useState(itemPerPage);\n  const [finalRow, setFinalRow] = useState(itemPerPage);\n  const totalRows = tableData.length;\n  const Firstrow = itemOffSet + 1;\n  useEffect(() => {\n    const startIndex = (currentPage - 1) * itemPerPage;\n    const endIndex = startIndex + itemPerPage;\n    setItemOffSet(startIndex);\n    setStartIndex(startIndex);\n    setEndIndex(endIndex);\n  }, [currentPage, itemPerPage]);\n  const handlePageClick = (event, value) => {\n    setCurrentPage(value);\n  };\n\n  useEffect(() => {\n    const newOffSet = (currentPage - 1) * itemPerPage;\n    setItemOffSet(newOffSet);\n  }, [currentPage, itemPerPage]);\n\n  useEffect(() => {\n    const endOffset = itemOffSet + itemPerPage;\n    const length = tableData.slice(itemOffSet, endOffset);\n\n    if (endOffset > totalRows) {\n      setFinalRow(totalRows);\n    } else {\n      setFinalRow(endOffset);\n    }\n    setCurrentItem(length);\n    setpageCount(Math.ceil(tableData.length / itemPerPage));\n    // displayTableFnc(length);\n  }, [tableData, itemOffSet, itemPerPage, pageCount]);\n  useEffect(() => {\n    const endOffset = itemOffSet + itemPerPage;\n    const length = tableData.slice(itemOffSet, endOffset);\n\n    if (endOffset > totalRows) {\n      setFinalRow(totalRows);\n    } else {\n      setFinalRow(endOffset);\n    }\n    setCurrentItem(length);\n    setpageCount(Math.ceil(tableData.length / itemPerPage));\n    // displayTableFnc(length);\n  }, [tableData, itemOffSet, itemPerPage, pageCount]);\n\n  let children = loggedUserId;\n  const baseUrl = environment.baseUrl;\n  const data = [];\n  const nodeData = [];\n  const directReportee = [];\n  const HelpPDFName = \"ResourceSkillTeams.pdf\";\n  const Header = \"Resource Skill Help\";\n  const [routes, setRoutes] = useState([]);\n  let textContent = \"Teams\";\n  let currentScreenName = [\"Resource Skills\"];\n\n  useEffect(() => {\n    getMenus();\n  }, []);\n\n  const getMenus = () => {\n    // setMenusData\n\n    axios({\n      method: \"GET\",\n      url: baseUrl + `/CommonMS/master/getMenus?loggedUserId=${loggedUserId}`,\n    }).then((resp) => {\n      let data = resp.data;\n\n      data.forEach((item) => {\n        if (item.display_name === textContent) {\n          setRoutes([item]);\n        }\n      });\n    });\n  };\n\n  const abortController = useRef(null);\n  const [resourceClickId, setResourceClickId] = useState(loggedUserId);\n  useEffect(() => {}, [resourceClickId]);\n  console.log(resourceClickId);\n  const handleAbort = () => {\n    abortController.current && abortController.current.abort();\n    setLoader(false);\n    setLoader1(false);\n  };\n  useEffect(() => {\n    getEmployeeData();\n    getEmployeeTableData();\n  }, [resourceClickId]);\n  useEffect(() => {\n    getResourcehierarchy();\n  }, []);\n  const [showTables, setShowTables] = useState(false);\n  const getEmployeeData = async () => {\n    const loaderTime = setTimeout(() => {\n      setLoader1(true);\n    }, 3000);\n\n    await axios({\n      method: \"get\",\n      url:\n        baseUrl +\n        `/customersms/Customers/getResourceDetails?rid=${resourceClickId}`,\n    }).then(function (response) {\n      var resp = response.data;\n      setEmployeeData(resp);\n      clearTimeout(loaderTime);\n      setLoader1(false);\n    });\n  };\n\n  const getEmployeeTableData = () => {\n    axios({\n      method: \"get\",\n      url:\n        baseUrl +\n        `/customersms/Customers/getSkillTableDetails?rid=${resourceClickId}`,\n    }).then(function (response) {\n      var resp = response.data;\n      setTableData(resp);\n    });\n  };\n  const [hierarchyCount, setHierarchyCount] = useState(0);\n\n  const getResourcehierarchy = () => {\n    const loaderTime = setTimeout(() => {\n      setLoader(true);\n    }, 2000);\n    const loaderTime1 = setTimeout(() => {\n      setLoader1(true);\n    }, 2000);\n    axios({\n      method: \"get\",\n      url:\n        baseUrl +\n        `/customersms/Customers/getResourcehierarchy?rid=${loggedUserId}`,\n    }).then(function (response) {\n      let dd = jsonToTree(response.data);\n      setHierarchyData(dd);\n      setHierarchyCount((prev) => prev + 1);\n      setBool(true);\n      // setLoader(false);\n      clearTimeout(loaderTime);\n      setLoader(false);\n      setShowTables(true);\n      clearTimeout(loaderTime1);\n\n      setLoader1(false);\n    });\n  };\n\n  const jsonToTree = (flatArray, options) => {\n    options = {\n      id: \"id\",\n      parentId: \"parent_id\",\n      children: \"subRows\",\n      ...options,\n    };\n    const dictionary = {}; // a hash table mapping to the specific array objects with their ids as key\n    const tree = [];\n    const children = options.children;\n    flatArray.forEach((node) => {\n      const nodeId = node[options.id];\n      const nodeParentId = node[options.parentId];\n      // set up current node data in dictionary\n      dictionary[nodeId] = {\n        [children]: [], // init a children property\n        ...node, // add other propertys\n        ...dictionary[nodeId], // children will be replaced if this node already has children property which was set below\n      };\n      dictionary[nodeParentId] = dictionary[nodeParentId] || { [children]: [] }; // if it's not exist in dictionary, init an object with children property\n      dictionary[nodeParentId][children].push(dictionary[nodeId]); // add reference to current node object in parent node object\n    });\n    // find root nodes\n    Object.values(dictionary).forEach((obj) => {\n      if (typeof obj[options.id] === \"undefined\") {\n        tree.push(...obj[children]);\n      }\n    });\n    return tree;\n  };\n  const displayIssues = tableData.map((list, index) => {\n    return (\n      // tableData.length > 0 &&\n      <tr className=\"table-fields\" key={index}>\n        <td className=\"ellipsis\" title={list.group_name}>\n          {list.group_name}\n        </td>\n\n        <td className=\"ellipsis\" title={list.display_name}>\n          {list.display_name}\n        </td>\n        <td className=\"ellipsis\">\n          <span>\n            <DisplayStar skillRating={list.skill_rating_id} />\n          </span>\n        </td>\n        <td className=\"ellipsis\" title={list.experience}>\n          {list.experience == null ? \"NA\" : list.experience}\n        </td>\n        <td\n          className=\"ellipsis\"\n          title={list.skill_status == 1 ? \"Approved\" : \"Requested\"}\n        >\n          {list.skill_status == 1 ? \"Approved\" : \"Requested\"}\n        </td>\n        <td\n          className=\"ellipsis\"\n          title={\n            list.last_used == null\n              ? \"\"\n              : moment(list.last_used).format(\"DD-MMM-yyyy\")\n          }\n        >\n          {list.last_used == null\n            ? \"NA\"\n            : moment(list.last_used).format(\"DD-MMM-yyyy\")}\n        </td>\n        <td className=\"ellipsis\" title={list.skill_category}>\n          {list.skill_category}\n        </td>\n      </tr>\n    );\n  });\n  const currentData = displayIssues.slice(startIndex, endIndex);\n  return (\n    <>\n      <div className=\"col-md-12\">\n        <div className=\"pageTitle\">\n          <div className=\"childOne\"></div>\n          <div className=\"childTwo\">\n            <h2>Resource Skills</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n      </div>\n      <ScreenBreadcrumbs\n        routes={routes}\n        currentScreenName={currentScreenName}\n      />\n\n      <div\n        className=\"helpBtn col-md-1\"\n        style={{ float: \"right\", paddingTop: \"5px\" }}\n      >\n        <GlobalHelp pdfname={HelpPDFName} name={Header} />\n      </div>\n\n      <div className=\"col-md-12  \">\n        {showTables == true ? (\n          <div className=\"group-content row\">\n            <div className=\"customCard col-md-3\">\n              <div className=\"childTwo\">\n                <h2>Resource</h2>\n              </div>\n              <div\n                style={{\n                  minHeight: \"calc(100vh - 225px)\",\n                  maxHeight: \"calc(100vh - 225px)\",\n                  overflow: \"auto\",\n                  border: \"1px solid #ccc\", // Add border style here\n                  padding: \"10px\",\n                }}\n              >\n                {bool && (\n                  <div\n                    style={{\n                      display: \"flex\",\n                    }}\n                  >\n                    <ResourceSkillHierarchy\n                      defaultExpandedRows={\"\"}\n                      data={hierarchydata}\n                      setResourceClickId={setResourceClickId}\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"col-md-9 \">\n              {employeeData.map((ele) => {\n                return (\n                  <>\n                    <h2\n                      style={{\n                        color: \"#297AB0\",\n                        fontSize: \"14px\",\n                        paddingTop: \"7px\",\n                      }}\n                    >\n                      Resource Details\n                    </h2>\n                    <div className=\"customCard card mb-2\">\n                      <div>\n                        <div className=\" group-content row\">\n                          <div className=\"col-md-4 mb-2\">\n                            <div className=\"form-group row\">\n                              <label\n                                className=\"col-4\"\n                                htmlFor=\"text-input-inline\"\n                              >\n                                Name\n                              </label>\n                              <span className=\"col-1 p-0\">:</span>\n                              <div className=\"col-7\">\n                                <p\n                                  className=\" ellipsis tooltip-ex\"\n                                  data-toggle=\"tooltip\"\n                                  title={ele.fullName}\n                                >\n                                  {ele.fullName == null ? \"NA\" : ele.fullName}{\" \"}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-4 mb-2\">\n                            <div className=\"form-group row\">\n                              <label\n                                className=\"col-4\"\n                                htmlFor=\"text-input-inline\"\n                              >\n                                Business Unit\n                              </label>\n                              <span className=\"col-1 p-0\">:</span>\n                              <div className=\"col-7\">\n                                <p\n                                  className=\" ellipsis tooltip-ex\"\n                                  data-toggle=\"tooltip\"\n                                  title={ele.name}\n                                >\n                                  {ele.name == null ? \"NA\" : ele.name}{\" \"}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-4 mb-2\">\n                            <div className=\"form-group row\">\n                              <label\n                                className=\"col-4\"\n                                htmlFor=\"text-input-inline\"\n                              >\n                                Title\n                              </label>\n                              <span className=\"col-1 p-0\">:</span>\n                              <div className=\"col-7\">\n                                <p\n                                  className=\" ellipsis tooltip-ex\"\n                                  data-toggle=\"tooltip\"\n                                  title={ele.long_title}\n                                >\n                                  {ele.long_title == null\n                                    ? \"NA\"\n                                    : ele.long_title}{\" \"}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-4 mb-2\">\n                            <div className=\"form-group row\">\n                              <label\n                                className=\"col-4\"\n                                htmlFor=\"text-input-inline\"\n                              >\n                                Official Email\n                              </label>\n                              <span className=\"col-1 p-0\">:</span>\n                              <div className=\"col-7\">\n                                <p\n                                  className=\" ellipsis tooltip-ex\"\n                                  data-toggle=\"tooltip\"\n                                  title={ele.email_official}\n                                >\n                                  {ele.email_official == null\n                                    ? \"NA\"\n                                    : ele.email_official}{\" \"}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-4 mb-2\">\n                            <div className=\"form-group row\">\n                              <label\n                                className=\"col-4\"\n                                htmlFor=\"text-input-inline\"\n                              >\n                                Supervisor\n                              </label>\n                              <span className=\"col-1 p-0\">:</span>\n                              <div className=\"col-7\">\n                                <p\n                                  className=\" ellipsis tooltip-ex\"\n                                  data-toggle=\"tooltip\"\n                                  title={ele.supervisorName}\n                                >\n                                  {ele.supervisorName == null\n                                    ? \"NA\"\n                                    : ele.supervisorName}{\" \"}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-4 mb-2\">\n                            <div className=\"form-group row\">\n                              <label\n                                className=\"col-4\"\n                                htmlFor=\"text-input-inline\"\n                              >\n                                Office Ext.\n                              </label>\n                              <span className=\"col-1 p-0\">:</span>\n                              <div className=\"col-7\">\n                                <p\n                                  className=\" ellipsis tooltip-ex\"\n                                  data-toggle=\"tooltip\"\n                                  title={ele.office_extn}\n                                >\n                                  {ele.office_extn == null ||\n                                  ele.office_extn == \"\"\n                                    ? \"NA\"\n                                    : ele.office_extn}{\" \"}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-4 mb-2\">\n                            <div className=\"form-group row\">\n                              <label\n                                className=\"col-4\"\n                                htmlFor=\"text-input-inline\"\n                              >\n                                Mobile Phone\n                              </label>\n                              <span className=\"col-1 p-0\">:</span>\n                              <div className=\"col-7\">\n                                <p\n                                  className=\" ellipsis tooltip-ex\"\n                                  data-toggle=\"tooltip\"\n                                  title={ele.office_phone}\n                                >\n                                  {(ele.office_phone == \"-\") |\n                                  (ele.office_phone == \"\")\n                                    ? \"NA\"\n                                    : ele.office_phone}{\" \"}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                );\n              })}\n              <div className=\"col-md-12 darkHeader\">\n                <table\n                  className=\"table table-bordered table-striped expenseTypeTable\"\n                  role=\"grid\"\n                >\n                  <thead>\n                    <tr>\n                      <th>\n                        <center>Skill Group</center>\n                      </th>\n                      <th>\n                        <center>Skill</center>\n                      </th>\n                      <th>\n                        <center>Rating</center>\n                      </th>\n                      <th>\n                        <center>Exp(Months)</center>\n                      </th>\n                      <th>\n                        <center>Status</center>\n                      </th>\n                      <th>\n                        <center>Last Used</center>\n                      </th>\n                      <th>\n                        <center>Type</center>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {currentData.length > 0 ? (\n                      currentData\n                    ) : (\n                      <tr>\n                        <td align=\"center\" colSpan=\"7\">\n                          No Records Found\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n              <div\n                className=\"col-md-6 pagination justify-content-center\"\n                style={{ marginLeft: \"283px\" }}\n              >\n                <label style={{ align: \"left\" }}>\n                  <Pagination\n                    count={Math.ceil(displayIssues.length / itemPerPage)}\n                    page={currentPage}\n                    onChange={handlePageClick}\n                    showFirstButton\n                    showLastButton\n                  />\n                </label>\n              </div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {/* <div className=\"group-content row\">\n          <div className=\"customCard col-md-3\">\n            <div className=\"childTwo\">\n              <h2>Resource</h2>\n            </div>\n\n            <div\n              style={{\n                minHeight: \"calc(100vh - 225px)\",\n                maxHeight: \"calc(100vh - 225px)\",\n                overflow: \"auto\",\n                border: \"1px solid #ccc\", // Add border style here\n                padding: \"10px\",\n              }}\n            >\n              {bool && (\n                <div\n                  style={{\n                    display: \"flex\",\n                  }}\n                >\n                  <ResourceSkillHierarchy\n                    defaultExpandedRows={\"\"}\n                    data={hierarchydata}\n                    setResourceClickId={setResourceClickId}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"col-md-9 \">\n            {employeeData.map((ele) => {\n              return (\n                <>\n                  <h2\n                    style={{\n                      color: \"#297AB0\",\n                      fontSize: \"14px\",\n                      paddingTop: \"7px\",\n                    }}\n                  >\n                    Resource Details\n                  </h2>\n                  <div className=\"customCard card mb-2\">\n                    <div>\n                      <div className=\" group-content row\">\n                        <div className=\"col-md-4 mb-2\">\n                          <div className=\"form-group row\">\n                            <label\n                              className=\"col-4\"\n                              htmlFor=\"text-input-inline\"\n                            >\n                              Name\n                            </label>\n                            <span className=\"col-1 p-0\">:</span>\n                            <div className=\"col-7\">\n                              <p\n                                className=\" ellipsis tooltip-ex\"\n                                data-toggle=\"tooltip\"\n                                title={ele.fullName}\n                              >\n                                {ele.fullName == null ? \"NA\" : ele.fullName}{\" \"}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col-md-4 mb-2\">\n                          <div className=\"form-group row\">\n                            <label\n                              className=\"col-4\"\n                              htmlFor=\"text-input-inline\"\n                            >\n                              Business Unit\n                            </label>\n                            <span className=\"col-1 p-0\">:</span>\n                            <div className=\"col-7\">\n                              <p\n                                className=\" ellipsis tooltip-ex\"\n                                data-toggle=\"tooltip\"\n                                title={ele.name}\n                              >\n                                {ele.name == null ? \"NA\" : ele.name}{\" \"}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col-md-4 mb-2\">\n                          <div className=\"form-group row\">\n                            <label\n                              className=\"col-4\"\n                              htmlFor=\"text-input-inline\"\n                            >\n                              Title\n                            </label>\n                            <span className=\"col-1 p-0\">:</span>\n                            <div className=\"col-7\">\n                              <p\n                                className=\" ellipsis tooltip-ex\"\n                                data-toggle=\"tooltip\"\n                                title={ele.long_title}\n                              >\n                                {ele.long_title == null ? \"NA\" : ele.long_title}{\" \"}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col-md-4 mb-2\">\n                          <div className=\"form-group row\">\n                            <label\n                              className=\"col-4\"\n                              htmlFor=\"text-input-inline\"\n                            >\n                              Official Email\n                            </label>\n                            <span className=\"col-1 p-0\">:</span>\n                            <div className=\"col-7\">\n                              <p\n                                className=\" ellipsis tooltip-ex\"\n                                data-toggle=\"tooltip\"\n                                title={ele.email_official}\n                              >\n                                {ele.email_official == null\n                                  ? \"NA\"\n                                  : ele.email_official}{\" \"}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col-md-4 mb-2\">\n                          <div className=\"form-group row\">\n                            <label\n                              className=\"col-4\"\n                              htmlFor=\"text-input-inline\"\n                            >\n                              Supervisor\n                            </label>\n                            <span className=\"col-1 p-0\">:</span>\n                            <div className=\"col-7\">\n                              <p\n                                className=\" ellipsis tooltip-ex\"\n                                data-toggle=\"tooltip\"\n                                title={ele.supervisorName}\n                              >\n                                {ele.supervisorName == null\n                                  ? \"NA\"\n                                  : ele.supervisorName}{\" \"}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col-md-4 mb-2\">\n                          <div className=\"form-group row\">\n                            <label\n                              className=\"col-4\"\n                              htmlFor=\"text-input-inline\"\n                            >\n                              Office Ext.\n                            </label>\n                            <span className=\"col-1 p-0\">:</span>\n                            <div className=\"col-7\">\n                              <p\n                                className=\" ellipsis tooltip-ex\"\n                                data-toggle=\"tooltip\"\n                                title={ele.office_extn}\n                              >\n                                {ele.office_extn == null ||\n                                ele.office_extn == \"\"\n                                  ? \"NA\"\n                                  : ele.office_extn}{\" \"}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"col-md-4 mb-2\">\n                          <div className=\"form-group row\">\n                            <label\n                              className=\"col-4\"\n                              htmlFor=\"text-input-inline\"\n                            >\n                              Mobile Phone\n                            </label>\n                            <span className=\"col-1 p-0\">:</span>\n                            <div className=\"col-7\">\n                              <p\n                                className=\" ellipsis tooltip-ex\"\n                                data-toggle=\"tooltip\"\n                                title={ele.office_phone}\n                              >\n                                {(ele.office_phone == \"-\") |\n                                (ele.office_phone == \"\")\n                                  ? \"NA\"\n                                  : ele.office_phone}{\" \"}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              );\n            })}\n            <div className=\"col-md-12 darkHeader\">\n              <table\n                className=\"table table-bordered table-striped expenseTypeTable\"\n                role=\"grid\"\n              >\n                <thead>\n                  <tr>\n                    <th>\n                      <center>Skill Group</center>\n                    </th>\n                    <th>\n                      <center>Skill</center>\n                    </th>\n                    <th>\n                      <center>Rating</center>\n                    </th>\n                    <th>\n                      <center>Exp(Months)</center>\n                    </th>\n                    <th>\n                      <center>Status</center>\n                    </th>\n                    <th>\n                      <center>Last Used</center>\n                    </th>\n                    <th>\n                      <center>Type</center>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {currentData.length > 0 ? (\n                    currentData\n                  ) : (\n                    <tr>\n                      <td align=\"center\" colSpan=\"7\">\n                        No Records Found\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n            <div\n              className=\"col-md-6 pagination justify-content-center\"\n              style={{ marginLeft: \"283px\" }}\n            >\n              <label style={{ align: \"left\" }}>\n                <Pagination\n                  count={Math.ceil(displayIssues.length / itemPerPage)}\n                  page={currentPage}\n                  onChange={handlePageClick}\n                  showFirstButton\n                  showLastButton\n                />\n              </label>\n            </div>\n          \n          </div>\n        </div> */}\n      </div>\n      {loader ? <Loader handleAbort={handleAbort} /> : \"\"}\n      {loader1 ? <Loader handleAbort={handleAbort} /> : \"\"}\n    </>\n  );\n}\n\nexport default ResourceSkills;\n"],"names":["environment","MinusSquare","props","fontSize","style","width","height","d","CloseSquare","className","PlusSquare","TransitionComponent","useSpring","from","opacity","transform","to","in","signal","ProjectHierarchyTree","React","defaultExpandedRows","data","setFlag","setTableData","flag","projectName","hierarchyCount","useState","setDataProjectId","hierarchy","flatArray","options","id","parentId","children","dictionary","tree","forEach","node","nodeId","nodeParentId","push","Object","values","obj","jsonToTree","fromDate","Date","projectFromDate","date","formattedFromDate","getDate","toLocaleString","month","getFullYear","toDate","projectToDate","tdate","formattedToDate","a1","document","getElementsByClassName","useEffect","setTimeout","addFolderIcon","addEventListener","params","boxes","Array","box","tagName","remove","spn","createElement","innerHTML","appendChild","CustomContent","ref","classes","label","iconProp","icon","expansionIcon","displayIcon","useTreeItem","disabled","expanded","selected","focused","handleExpansion","handleSelection","preventSelection","handleSelectionClick","event","console","log","splitdata","propData","split","projectId","roleId","competenciesTable","clsx","root","onMouseDown","onClick","iconContainer","component","StyledTreeItem","styled","ContentComponent","key","String","find","parent","sx","display","alignItems","p","pr","color","mr","variant","fontWeight","flexGrow","text","includes","replaceAll","undefined","title","isArray","subrows","map","renderTree","theme","treeItemClasses","marginLeft","paddingLeft","borderLeft","alpha","palette","primary","nodes","maxHeight","minHeight","overflowY","defaultExpanded","defaultParentIcon","defaultCollapseIcon","defaultExpandIcon","defaultEndIcon","minwidth","prevProps","currentProps","Collapse","TreeItem","Tooltip","full_name","subRows","onNodeClick","childNode","ResourceSkillHierarchy","setResourceClickId","click","handleNodeClick","parseInt","employeeData","setEmployeeData","loader","setLoader","loader1","setLoader1","tableData","hierarchydata","setHierarchyData","loggedUserId","localStorage","getItem","bool","setBool","setCurrentItem","pageCount","setpageCount","itemOffSet","setItemOffSet","itemPerPage","currentPage","setCurrentPage","startIndex","setStartIndex","endIndex","setEndIndex","setFinalRow","totalRows","length","endOffset","slice","Math","ceil","baseUrl","routes","setRoutes","getMenus","axios","method","url","then","resp","item","display_name","abortController","useRef","resourceClickId","handleAbort","current","abort","getEmployeeData","getEmployeeTableData","getResourcehierarchy","showTables","setShowTables","loaderTime","response","clearTimeout","setHierarchyCount","loaderTime1","dd","prev","displayIssues","list","index","group_name","DisplayStar","skillRating","skill_rating_id","experience","skill_status","last_used","moment","format","skill_category","currentData","ScreenBreadcrumbs","currentScreenName","float","paddingTop","GlobalHelp","pdfname","name","overflow","border","padding","ele","htmlFor","fullName","long_title","email_official","supervisorName","office_extn","office_phone","role","align","colSpan","Pagination","count","page","onChange","value","showFirstButton","showLastButton","Loader"],"sourceRoot":""}