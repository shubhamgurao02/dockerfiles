{"version":3,"file":"static/js/1776.2e649806.chunk.js","mappings":"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","sources":["views/ReportsComponent/ResourceAllocationReport.js","views/ReportsComponent/ResourceAllocationReportTable.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { FaChevronCircleDown, FaChevronCircleUp, FaSearch, FaCheck } from \"react-icons/fa\";\nimport { CCollapse } from \"@coreui/react\";\nimport { getTableData } from \"./ResourceAllocationReportTable\";\nimport FlatPrimeReactTable from \"../PrimeReactTableComponent/FlatPrimeReactTable\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\n\n\nfunction ResourceAllocationReport() {\n  const [visible, setVisible] = useState(false);\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [dataAr, setDataAr] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\n  const [country, setCountry] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState([]);\n  const initialValue = { buIds: \"\", country: \"\" };\n  const [formData, setFormData] = useState(initialValue);\n  const baseUrl = environment.baseUrl;\n\n  const getCountries = () => {\n    axios\n      .get(baseUrl + `/CostMS/cost/getCountries`)\n\n      .then((Response) => {\n        let countries = [];\n\n        let data = Response.data;\n        data.length > 0 &&\n          data.forEach((e) => {\n            let countryObj = {\n              label: e.country_name,\n              value: e.id,\n            };\n            countries.push(countryObj);\n          });\n        setCountry(countries);\n        setSelectedCountry(countries);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getDepartments = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/CostMS/cost/getDepartments`,\n    })\n\n      .then((Response) => {\n        let departments = [];\n\n        let data = Response.data;\n        data.length > 0 &&\n          data.forEach((e) => {\n            let buObj = {\n              label: e.label,\n              value: e.value,\n            };\n            departments.push(buObj);\n          });\n        setDepartments(departments);\n        setSelectedDepartments(departments);\n        setFormData((prevVal) => ({\n          ...prevVal,\n          [\"buIds\"]: departments.toString(),\n        }));\n      })\n  };\n\n\n  useEffect(() => {\n\n    getCountries();\n    getDepartments()\n    let tdata = getTableData();\n\n    //console.log('ski1',tdata);\n    setDataAr(tdata);\n\n  }, []);\n  return (\n    <div>\n      <div className=\"col-md-12\">\n        <div className=\"pageTitle\">\n          <div className=\"childOne\"></div>\n          <div className=\"childTwo\">\n            <h2>Resource Allocation Report</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n      </div>\n      <div className=\"group mb-3 customCard\">\n        <div className=\"col-md-12 collapseHeader\">\n          <h2>Search Filters</h2>\n\n          <div\n            onClick={() => {\n              setVisible(!visible);\n\n              visible\n                ? setCheveronIcon(FaChevronCircleUp)\n                : setCheveronIcon(FaChevronCircleDown);\n            }}\n          >\n            <span>{cheveronIcon}</span>\n          </div>\n        </div>\n        {/* <h2>Resource Allocation Report</h2> */}\n        <CCollapse visible={!visible}>\n          <div className=\"group-content row\">\n            <div className=\"col-md-3 mb-2 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"businessUnit\">\n                  Business Unit\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <MultiSelect\n                    id=\"buIds\"\n                    options={departments}\n                    hasSelectAll={true}\n                    isLoading={false}\n                    shouldToggleOnHover={false}\n                    disableSearch={false}\n                    value={selectedDepartments}\n                    // valueRenderer={customValueRenderer}\n                    disabled={false}\n                    onChange={(s) => {\n                      setSelectedDepartments(s);\n                      let filteredValues = [];\n                      s.forEach((d) => {\n                        filteredValues.push(d.value);\n                      });\n\n                      setFormData((prevVal) => ({\n                        ...prevVal,\n                        [\"buIds\"]: filteredValues.toString(),\n                      }));\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-3 mb-2 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"country\">\n                  Country\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <MultiSelect\n                    id=\"country\"\n                    options={country}\n                    hasSelectAll={true}\n                    value={selectedCountry}\n                    disabled={false}\n                    // valueRenderer={customValueRenderer}\n                    onChange={(e) => {\n                      setSelectedCountry(e);\n                      let filteredCountry = [];\n                      e.forEach((d) => {\n                        filteredCountry.push(d.value);\n                      });\n                      setFormData((prevVal) => ({\n                        ...prevVal,\n                        [\"country\"]: filteredCountry.toString(),\n                      }));\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-2\">\n              <button className=\"btn btn-primary \">Search</button>\n            </div>\n          </div>\n        </CCollapse>\n      </div>\n      {/* <div className=\"col-md-12\">\n          <FlatPrimeReactTable data={dataAr}/>\n    </div> */}\n    </div>\n  );\n}\n\nexport default ResourceAllocationReport;\n","export function getTableData() {\n    let tabledata=[\n        {\n            resource : 'Resource',\n            empId : 'Emp Id',\n            unit : 'Unit',\n            supervisor : 'Supervisor',\n            country : 'Country',\n            resourceType : 'Resource type',\n            resourceStatus : 'Resource Status',\n            projectName : 'Project Name',\n            allocStDt : 'Alloc St Dt',\n            allocEndDt : 'Alloc End Dt',\n            nextAllocDt : 'Next Alloc Dt',\n            netCapPerDay : 'Net Cap (Per Day)',\n            billableAlloc : 'Billable Alloc',\n            billableAssigned : 'Billable Assigned',\n            billableActuals : 'Billable Actuals',\n            billableApproved :'Billable Approved',\n            nonbillableAlloc : 'Non Billable Alloc',\n            nonbillableAssigned : 'Non Billable Assigned',\n            nonbillableActuals : 'Non Billable Actuals',\n            nonbillableApproved :'Non Billable Approved',\n            plannedRevenue : 'Planned Revenue',\n            actualRevenue : 'Actual Revenue',\n            approvedRevenue: 'Approved Revenue',\n            costRoleBased : 'Cost(Role Based per Hr)',\n            gmRoleBased : 'GM(Role Based)',\n            totalAlloc : 'Total Alloc'\n           \n        }\n\n    ]\n return tabledata\n}"],"names":["useState","visible","setVisible","FaChevronCircleUp","cheveronIcon","setCheveronIcon","setDataAr","departments","setDepartments","selectedDepartments","setSelectedDepartments","country","setCountry","selectedCountry","setSelectedCountry","buIds","setFormData","baseUrl","environment","useEffect","axios","then","Response","countries","data","length","forEach","e","countryObj","label","country_name","value","id","push","catch","error","console","log","method","url","buObj","prevVal","toString","resource","empId","unit","supervisor","resourceType","resourceStatus","projectName","allocStDt","allocEndDt","nextAllocDt","netCapPerDay","billableAlloc","billableAssigned","billableActuals","billableApproved","nonbillableAlloc","nonbillableAssigned","nonbillableActuals","nonbillableApproved","plannedRevenue","actualRevenue","approvedRevenue","costRoleBased","gmRoleBased","totalAlloc","className","onClick","FaChevronCircleDown","htmlFor","options","hasSelectAll","isLoading","shouldToggleOnHover","disableSearch","disabled","onChange","s","filteredValues","d","filteredCountry"],"sourceRoot":""}