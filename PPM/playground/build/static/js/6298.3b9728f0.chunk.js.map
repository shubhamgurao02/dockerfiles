{"version":3,"file":"static/js/6298.3b9728f0.chunk.js","mappings":"qKASWA,IAaT,SAAUC,GAGRC,SAASA,EAAgBC,EAAKC,EAAMC,EAAMC,GACjCH,EAAAA,eAAmBC,KACpBD,EAAIC,GAAQE,EAAAA,MAAS,KAAMD,GAEA,oBAAhBE,aACPC,OAAOC,cACH,IAAIF,YACA,yBACA,CAAEG,OAAQ,CAAEN,KAAMA,EAAMO,OAAQR,EAAIC,OARV,CAc9CF,EAfIU,EAAWX,EAAaA,EAAAA,SAAsB,CAAC,EAezB,2CAA4C,IAAI,WAetE,IAAIY,EA6EJ,OA5EC,SAAUA,GAqBPA,EAAAA,QANAC,SAAiBC,GAIb,OAHKA,EAAAA,aACDA,EAAAA,WAAmB,IAAIC,EAAUD,IAE9BA,CAJa,EAiBxB,IAAIC,EAA2B,WAMvBA,SAASA,EAAUD,GACfE,KAAKC,QAAU,GACnBD,KAAKF,MAAQA,CAFa,CA4B9B,OAZAC,EAAAA,UAAAA,UAAgCG,SAAUC,GACtCH,KAAKF,MAAMM,WAAWH,QAAQI,KAAKF,EADa,EAMpDJ,EAAAA,UAAAA,OAA6BO,SAAUC,EAASC,GAC5C,IAAIC,EAAQT,KACZA,KAAKC,QAAQS,SAAQ,SAAUP,GAC3BA,EAAAA,KAAcM,EAAAA,MAAaF,EAASC,EADC,GAFW,EAMjDT,CAlCgC,CAAZ,GAoC/BH,EAAAA,UAAuCG,CApE1C,EAqEEH,IAA+BA,EAA6B,CAAC,IAOzDA,CA5F2E,IA8FtFX,EAAgBU,EAAU,4CAA6C,CAACA,EAAS,qBAAqB,SAAUgB,GA20B5G,OAj0BIC,EAAgBD,EAAAA,cA2zBIE,CAChBC,UA9yBQA,CAqKRC,KAAM,YAONC,IAAK,iCAqBLC,QAAS,CAQLC,YAAQ,EAMRC,UAAM,EAMNC,gBAAY,EAMZC,YAAQ,GAWZC,cAAe,IAmBfC,MAAO,EAUPC,QAAS,CAWLC,cAAe,CAiCXC,UAAW,2BAIXC,cAAe,yBAgBfC,OAAQ,OASRC,SAAU,qBA4BVC,UAAW,oGAuCnBC,oBAAqB,CAIjBC,eAAgB,CACZC,QAAS,iBACTC,QAASA,WACDlC,KAAKmC,YACLnC,KAAKmC,WAAWC,QAFH,GAS7BC,WAAY,CACRJ,QAAS,aACTC,QAASA,WACLlC,KAAKsC,OADY,GAOzBC,UAAW,CACPA,WAAW,GAKfC,YAAa,CACTP,QAAS,cACTC,QAASA,WACLlC,KAAKyC,aADY,GAOzBC,aAAc,CACVT,QAAS,eACTC,QAASA,WACLlC,KAAKyC,YAAY,CACb1B,KAAM,cAFO,GASzB4B,YAAa,CACTV,QAAS,cACTC,QAASA,WACLlC,KAAKyC,YAAY,CACb1B,KAAM,mBAFO,GASzB6B,YAAa,CACTX,QAAS,cACTC,QAASA,WACLlC,KAAKyC,YAAY,CACb1B,KAAM,iBAFO,KAiWzB8B,KArVGA,CAOHb,eAAgB,sBAOhBc,eAAgB,wBAOhBT,WAAY,cAOZG,YAAa,qBAObE,aAAc,sBAOdC,YAAa,wBAObC,YAAa,4BAQbG,mBAAoB,sBA6RpB3C,WApRSA,CAUT4C,cAAe,CAoBXC,WAAY,GASZC,QAAS,KASTC,QAAS,KAUTC,MAAO,QAMPC,cAAe,EASfC,OAAQ,GAkDRC,cAAe,MASfC,MAAO,GAUPC,WAAY,UAUZC,aAAc,UASdC,kBAAmB,EAcnBC,MAAO,CAkBHC,QAAS,IAiBjBC,UAAW,CAEPC,OAAQ,aAAaC,OAAO,WAE5BC,WAAY,UAEZJ,QAAS,SAkBbK,cAAe,CAEXL,QAAS,YAETM,MAAO,UAEPF,WAAY,OAEZG,SAAUxD,EAAgB,OAAS,OAEnCyD,WAAY,iCAiBhBC,mBAAoB,CAEhBL,WAAY,UAEZE,MAAO,YA7zB4F,IA60BnHlF,EAAgBU,EAAU,2CAA4C,IAAI,WAiBtE,IAAI4E,EAoEJ,OAnEC,SAAUA,GA4BPC,SAASA,EAAKC,EAAGC,EAAGlB,EAAOF,GAqBvB,MApBUqB,CACF,CAAC,IACLF,EACAC,EAAI,KACA,CAAC,IACLD,EAAIjB,EACJkB,EAAI,KACA,CAAC,IACLD,EACAC,EAAIpB,EAAS,EAAI,IACb,CAAC,IACLmB,EAAIjB,EACJkB,EAAIpB,EAAS,EAAI,IACb,CAAC,IACLmB,EACAC,EAAIpB,EAAS,KACT,CAAC,IACLmB,EAAIjB,EACJkB,EAAIpB,EAAS,KAnBc,CA0BnCsB,SAASA,EAASH,EAAGC,EAAGlB,EAAOF,GAI3B,OAHIuB,EAAKvB,EAAS,EAAK,GACnBnE,EAAO,IACJA,OAAYa,KAAK8E,OAAOtB,EAAQqB,EAAGH,EAAGG,EAAGA,GAAI7E,KAAK8E,OAAOtB,EAAQqB,EAAGH,EAAIG,EAAI,EAAGA,EAAGA,GAAI7E,KAAK8E,OAAOtB,EAAQqB,EAAGH,EAAI,GAAKG,EAAI,GAAIA,EAAGA,GAHrG,CAhDvC,IAAIE,EAAkB,GAkBtBR,EAAAA,QARA1E,SAAiBmF,IACsC,IAA/CD,EAAAA,QAAwBC,KACxBD,EAAAA,KAAqBC,IACjBC,EAAUD,EAAAA,UAAAA,SACdC,KAAeT,EACf,WAAmBI,EAAAA,KAAcK,GALN,CAhBtC,EA4DEV,IAAqBA,EAAmB,CAAC,IAOrCA,CArF2E,IAuFtFtF,EAAgBU,EAAU,qCAAsC,CAACA,EAAS,6BAA8BA,EAAS,uBAAuB,SAAUuF,EAAKC,GAsCnJC,SAASA,IAMLpF,KAAKmC,WAAa,IAAIkD,EAAWrF,KANN,CAtCuH,IAsBlJsF,EAAWH,EAAAA,SACXI,EAAYJ,EAAAA,UAMZK,EAAkB,GAgClBH,EAA4B,WAMxBA,SAASA,EAAWvF,GAMhBE,KAAKF,MAAQA,EASjBE,KAAKyF,QAAS,EACVC,EAAY5F,EAAAA,SAEXE,KAAK2F,eACqC,oBAAhCD,EAAAA,kBACP1F,KAAK2F,aAAe,CAChBC,iBAAkB,mBAClBC,kBAAmB,oBACnB/C,eAAgB,kBAGf4C,EAAAA,qBACL1F,KAAK2F,aAAe,CAChBC,iBAAkB,sBAClBC,kBAAmB,uBACnB/C,eAAgB,uBAGf4C,EAAAA,wBACL1F,KAAK2F,aAAe,CAChBC,iBAAkB,yBAClBC,kBAAmB,0BACnB/C,eAAgB,wBAGf4C,EAAAA,sBACL1F,KAAK2F,aAAe,CAChBC,iBAAkB,qBAClBC,kBAAmB,sBACnB/C,eAAgB,qBA5CD,CAiO/B,OArKAuC,EAAAA,QAAqBS,SAAUC,IACkB,IAAzCP,EAAAA,QAAwBO,KACxBP,EAAAA,KAAqBO,GAErB,EAASA,EAAY,eAAgBX,GAJF,EAsB3CC,EAAAA,UAAAA,MAA6BW,WAAY,IACjC7D,EAAanC,KACbF,EAAQqC,EAAAA,MACR8D,EAAenG,EAAAA,QAAAA,MACnByF,EAAUzF,EAAO,kBAAmB,MAAM,WAGlCqC,EAAAA,QACAA,EAAAA,cACArC,EAAAA,UAAAA,yBAAyCoG,UACzCpG,EAAAA,UAAAA,cAA8BqC,EAAAA,aAAAA,kBAI9BA,EAAAA,wBACAA,EAAAA,sBAAmCA,EAAAA,yBAGvCrC,EAAAA,QAAcqC,EAAAA,UAAsBA,EAAAA,YAAuB,GAC3DA,EAAAA,eAAuB,EACvBA,EAAAA,gBAAwB,EACxB8D,EAAAA,MAAqB9D,EAAAA,gBACrB8D,EAAAA,OAAsB9D,EAAAA,iBACtBA,EAAAA,qBAA6B,EAC7BA,EAAAA,sBAA8B,EAC9BA,EAAAA,QAAoB,EACpBA,EAAAA,eAtBkD,GAJjB,EAyCzCkD,EAAAA,UAAAA,KAA4Bc,WAAY,IAChChE,EAAanC,KACbF,EAAQqC,EAAAA,MACR8D,EAAenG,EAAAA,QAAAA,MACnByF,EAAUzF,EAAO,iBAAkB,MAAM,WAQrC,GAPImG,IACA9D,EAAAA,gBAA6B8D,EAAAA,MAC7B,mBAA8BA,EAAAA,QAElC9D,EAAAA,UAAuBrC,EAAAA,WACvBqC,EAAAA,WAAwBrC,EAAAA,YAEpBqC,EAAAA,aAAyB,CACzB,IAAIiE,EAAiBd,EAASxF,EAAAA,UAAAA,cAC1BqC,EAAAA,aAAAA,kBACA,WAGQA,EAAAA,QACAA,EAAAA,QAAoB,EACxB,YAGArC,EAAAA,QAAc,KAAM,MAAM,GAC1BqC,EAAAA,QAAoB,EACpB,kBAVQ,IAaZkE,EAAkBf,EAASxF,EAAO,UAClCsG,GACJjE,EAAAA,sBAAmCmE,WAC/BF,IACAC,GAF2C,EAI/C,IAAIE,EAAUzG,EAAAA,SAAeqC,EAAAA,aAAAA,qBACzBoE,GAEAA,EAAA,OAAiB,WACbC,MACA,+CAFyB,GAzBR,CARoB,GAJjB,EAuDxCnB,EAAAA,UAAAA,cAAqCoB,WAAY,IACzC3G,EAAQE,KAAKF,MACb4G,EAAoB5G,EAAAA,kBACpB6G,EAAmB7G,EAAAA,QAAAA,UACnBgC,EAAa6E,GACTA,EAAAA,SACAA,EAAAA,QAAAA,cAAAA,UACJ9D,EAAO/C,EAAAA,QAAAA,KACP6G,GACAA,EAAAA,qBACA9D,GACAA,EAAAA,gBACAA,EAAAA,gBACAf,GACA4E,IACIE,EAAmBF,EAAkB5E,EAAAA,QAAkB,qBAEvDoD,EAAAA,eAAmB0B,EAAmB5G,KAAKyF,OAGZ5C,EAAAA,eAF1B8D,EAAAA,oBAAAA,eAAAA,MAEG9D,EAAAA,eApB6B,EAsCjDwC,EAAAA,UAAAA,OAA8BwB,WACT1E,KACZsD,OADYtD,KAKb2E,QALa3E,KAEb4E,MAHkC,EASnC1B,CAvOiC,CAAZ,GA4ShC,OAAOA,CAzW+I,IA2W1JpG,EAAgBU,EAAU,wBAAyB,CAACA,EAAS,mBAAoBA,EAAS,uBAAuB,SAAUqH,EAAG7B,GAU1H,IAAI8B,EAAMD,EAAAA,IACNE,EAAgB/B,EAAAA,cAChBgC,EAAiBhC,EAAAA,eACjBiC,EAAQjC,EAAAA,MACRkC,EAAalC,EAAAA,WAqJbmC,EAAgB,CACZC,KArIRA,SAAcC,GAAU,IAChBC,EAAU,CACNC,KAAM,mBACNC,IAAK,kBACLC,KAAM,aACNC,MAAO,4BAEXC,EAAI,IAAIC,eAiBZ,IAAKP,EAAAA,IACD,OAAO,EAEXM,EAAAA,MAAQN,EAAAA,MAAiB,OAAlBQ,cAAwCR,EAAAA,KAAc,GACxDA,EAAAA,SAAqBA,EAAAA,QAAiB,iBACvCM,EAAAA,iBAAmB,eAAgBL,EAAQD,EAAAA,UAAqB,SAAWC,EAAAA,MAE/EJ,EAAWG,EAAAA,SAAkB,SAAUS,EAAKC,GACxCJ,EAAAA,iBAAmBI,EAAKD,EADqB,IAG7CT,EAAAA,eACAM,EAAAA,aAAiBN,EAAAA,cAGrBM,EAAAA,mBAAuBK,WAEnB,GAAqB,IAAjBL,EAAAA,WAAoB,CACpB,GAAiB,MAAbA,EAAAA,OAAkB,CAClB,GAA8B,SAA1BN,EAAAA,aAAkC,CAClC,MAAMM,EAAAA,aACN,GAA0B,SAAtBN,EAAAA,SACA,IACIY,EAAMC,KAAKC,MAAMF,EAEX,CAAV,MAAOG,GACH,GAAIA,aAAaC,MACb,YAjCpBhB,EAAAA,OACAA,EAAAA,MAgCuCM,EAAGS,GAFpB,CANoB,CAatC,OAAOf,EAAAA,SAAoBA,EAAAA,QAAiBY,EAAKN,EAd/B,CAxBtBN,EAAAA,OACAA,EAAAA,MAuCYM,EAAGA,EAAAA,aAjBK,CAFO,EAsB/BN,EAAAA,MAA0C,kBAAlBA,EAAAA,OACxBA,EAAAA,KAAgBa,KAAKI,UAAUjB,EAAAA,OAEnCM,EAAAA,KAAON,EAAAA,KA/Da,EAsIhBkB,QA3DRA,SAAiB1H,EAAK2H,GAClBrB,EAAAA,KAAmB,CACftG,IAAKA,EACL2H,QAASA,EACTC,SAAU,OACVnB,QAAS,CAGL,eAAgB,eARG,EA4DvBoB,KAjCRA,SAAc7H,EAAK8H,EAAMC,GAErB,IAAIC,EAAO9B,EAAc,OACrBE,EAAM,CACF6B,OAAQ,OACRC,OAAQlI,EACRmI,QAAS,uBAEbJ,GAAiB,CACbK,QAAS,QAEbnC,EAAAA,MAEJI,EAAWyB,GAAM,SAAUb,EAAKoB,GAC5BnC,EAAc,QAAS,CACnBnG,KAAM,SACNsI,KAAMA,EACNC,MAAOrB,QACR,EAAQe,EALuB,IAQtCA,EAAAA,SAEA7B,EAAe6B,EAvBsB,GA0EzC,OAAO1B,CA/MsH,IAiNjIrI,EAAgBU,EAAU,oCAAqC,CAACA,EAAS,6BAA8BA,EAAS,uBAAwBA,EAAS,4CAA6CA,EAAS,oBAAqBA,EAAS,6CAA8CA,EAAS,4CAA6CA,EAAS,sCAAuCA,EAAS,mBAAoBA,EAAS,yBAA0BA,EAAS,uBAAuB,SAAUuF,EAAKqE,EAAO3J,EAA4B4J,EAAG3I,EAAmB0D,EAAkBc,EAAY2B,EAAGyC,EAAItE,GAAG,IAmCjkBuE,EAvBAC,EAAiBH,EAAAA,eACjBI,EAAaJ,EAAAA,WACbvC,EAAMD,EAAAA,IACN6C,EAAS7C,EAAAA,OACT8C,EAAM9C,EAAAA,IACN1B,EAAWH,EAAAA,SACX4E,EAAM5E,EAAAA,IACN+B,EAAgB/B,EAAAA,cAChBgC,EAAiBhC,EAAAA,eACjB6E,EAAS7E,EAAAA,OACT8E,EAAO9E,EAAAA,KACPI,EAAYJ,EAAAA,UACZ+E,EAAW/E,EAAAA,SACXiC,EAAQjC,EAAAA,MACRkC,EAAalC,EAAAA,WACbgF,EAAOhF,EAAAA,KACPiF,EAAcjF,EAAAA,YACdkF,EAAYlF,EAAAA,UA0wChB,OAnwCC,SAAUuE,GA8DPY,SAASA,EAAU/J,GAAS,IACpBT,EAAQE,KACRuK,EAAWzK,EAAAA,SACX0K,EAAapD,EAAMtH,EAAAA,QAAAA,WAAAA,cACnBS,GACA2B,EAAUsI,EAAAA,QACV1I,EAAY0I,EAAAA,UACZvH,EAAauH,EAAAA,YAAyB,GAU1C,GARK1K,EAAAA,WACDA,EAAAA,SAAiB,GAGhBA,EAAAA,oBACDA,EAAAA,kBAA0B,GAC1B2K,EAAA,kBAA0B,KAEH,IAAvBD,EAAAA,SAAiCA,EAAAA,MAArC,CAGA,IACIE,EADAC,EAAOH,EAAAA,MAEN1K,EAAAA,aACD6K,EAAAA,KAAYR,EAAKQ,EAAAA,KAAW,WAC5B,SAAcR,EAAKQ,EAAAA,OAAa,SAEhCzI,EACAwI,EAAWA,SAAUnC,GACbA,GACAA,EAAAA,kBAEJrG,EAAAA,KAAapC,EAAOyI,EAJA,EAOnBzG,IACL4I,EAAWA,SAAUnC,GAEbA,GACAA,EAAAA,kBAEJzI,EAAAA,YAAkB8K,EAAAA,cAAsB9I,EAAW8I,EAAAA,WAAmBA,EAAAA,WAAmBA,EAAAA,MAAcA,EAAAA,OAAeA,GACtHA,EAAAA,SAAgB,EANI,GASxBJ,EAAAA,MAAmBA,EAAAA,OACnBG,EAAAA,YAAmBR,EAAKQ,EAAAA,YAAkB,IAEpCH,EAAAA,MACNR,EAAOW,EAAM,CACTnH,MAAOgH,EAAAA,MACPlH,OAAQkH,EAAAA,OACR3G,QAAS,IAGZ/D,EAAAA,aACD6K,EAAK,kBAAoB,QACzBA,EAAAA,KAAYR,EAAKQ,EAAAA,KAAW,WAC5B,SAAcR,EAAKQ,EAAAA,OAAa,SAEpC,IAAIC,EAASL,EAAAA,OACGC,EAAAA,KAAiB,EAAG,EAChCE,EACAC,OACA,OACA,OACA,OACA,EACAH,EAAAA,SARS,SASKjK,EAAAA,WATL,KAUC,CACNsK,MAAOV,EAAKrK,EAAAA,QAAAA,KAAmB0K,EAAAA,WAAwBA,EAAAA,UAAsB,MAIrF,GAFAI,EAAAA,cAAwBrK,EAAAA,eACpB,mBAAqBT,EAAAA,WACrB0K,EAAAA,OAAmB,CACnB,MAASD,EAAAA,OACGC,EAAAA,OAAmBA,EAAAA,QAAsBvH,EAAa,EAAIuH,EAAAA,QAAsBvH,EAAa,EAAIA,EAAYA,EAEvH,CACEO,MAAOP,EACPK,OAAQL,IALH,SAOK,4BAPL,KAQC,CACN6H,OAAQ,IATH,IAWAF,GACJ9K,EAAAA,YACD8B,EAAAA,KAAY,CACRmJ,OAAQP,EAAAA,aACRQ,KAAMR,EAAAA,WACN,eAAgBA,EAAAA,mBAAgC,GAjBrC,CAqBvBI,EAAAA,IACS9K,EAAAA,gBADT,MAEWkK,EAAOQ,EAAY,CAC1BhH,MAAOoH,EAAAA,MACPnG,EAAG0F,EAAKK,EAAAA,EAAc1K,EAAAA,iBACtB,EAAM,cACVA,EAAAA,eAAwB8K,EAAAA,MAAeJ,EAAAA,gBACb,UAArB,SAAgC,EAAI,GACzC1K,EAAAA,kBAAAA,KAA6B8K,EAAQhJ,EAtFrC,CAjBwB,CAqH5BqJ,SAASA,IAEL,GADYnL,KACPoL,iBAAL,CAFkB,IAKdC,EAJQrL,KAIHoL,iBACLE,EAAaD,EAAAA,WACbE,EAAcF,EAAAA,YACdG,EAAcH,EAAAA,YAPNrL,KASZyL,eATYzL,KASS0L,UAErB,GAAG9K,QAAQ+K,KAAKL,GAAY,SAAUM,EAAMC,GAClB,IAAlBD,EAAAA,WACAA,EAAAA,MAAAA,QAAsBL,EAAYM,IAAM,GAFD,IAXnC7L,KAgBZ8L,YAAmB,EAEfN,GAlBQxL,KAmBR+L,QAAAA,MAnBQ/L,KAmBmBwL,UAnBnBxL,KAqBLoL,iBACPY,OAAgB,EAChBvG,EAvBYzF,KAuBK,aAtBjB,CAFkB,CAoCtBiM,SAASA,IAAc,IAEfC,EAAO/E,EAAAA,KACP3F,EAFQxB,KAEQS,QAAAA,UAAAA,cAChB2K,EAAmB,CACfE,WAAYY,EAAAA,WACZX,YAAa,GACbC,iBAAa,GANTxL,KAQZ8L,YAAmB,EARP9L,KASZmM,QAAAA,MAAoB,KAAM,GAC1B1G,EAVYzF,KAUK,eAEIwB,GAZTxB,KAaJoM,WAAmB5K,IAEvB4J,EAAAA,YAA+B,CAfvBpL,KAgBJS,QAAAA,MAAAA,WACA,GACA,GAlBIT,KAoBR+L,QAAcvK,OAAe,GAAQ,IAGzC,GAAGZ,QAAQ+K,KAAKP,EAAAA,YAA6B,SAAUQ,EAAMC,GACnC,IAAlBD,EAAAA,WACAR,EAAAA,YAA6BS,GAAKD,EAAAA,MAAAA,QAClC,gBAAqB,OAHmC,IAvBpD5L,KA8BZyL,eAAqBS,GA9BTlM,KAgCZoL,iBAAyBA,CAjCN,CAsCvBiB,SAASA,EAAcrM,GACDA,EAClBsM,kBACA9G,EAASxF,EAAO,SAFEA,EAEQsM,iBAE1B9G,EAASxF,EAAO,UAJEA,EAISuM,cALD,CA+G9BC,SAASA,EAAY5K,EAAW6K,EAAO9H,EAAGC,EAAGlB,EAAOF,EAAQsH,GAAQ,IAC5D9K,EAAQE,KACRwM,EAAa1M,EAAAA,QAAAA,WACboM,EAAapM,EAAAA,WACb2M,EAAc3M,EAAAA,YACd4M,EAAY,SAAWhL,EACvBiL,EAAcC,KAAKC,IAAIrJ,EACvBF,GAEAkB,EAAO1E,EAAM4M,GAEjB,IAAKlI,EAAM,CAEP1E,EAAAA,kBAA0BA,EAAM4M,GAAalI,EACzC0C,EAAc,MAAO,CACjBxF,UAAWA,GACZ,CACCoL,SAAU,WACVhC,OAAQ,IACRjH,QAAS8I,EAAc,KACvBI,cAAe,QAChBjN,EAAAA,UAAkBA,EAAAA,WACzB,MAAYoH,EAAc,KAAM,CAAExF,UAAW,mBAAqB,CAC9DsL,UAAW,OACXC,OAAQ,EACRpJ,QAAS,GACVW,GAEE1E,EAAAA,YACDiK,EAAImD,EAAWlD,EAAO,CAClBmD,aAAc,oBACdC,gBAAiB,oBACjBC,UAAW,qBACZb,EAAAA,YAGPhI,EAAAA,SAAgB8I,WACZvD,EAAIvF,EAAM,CAAE4E,QAAS,SACjBwB,GACAA,EAAAA,SAAgB,GAEpB9K,EAAAA,UAAiB,EAEjBiK,EAAIjK,EAAAA,SAAgB,CAAEyN,SAAU,WAChCxD,EAAIjK,EAAAA,UAAiB,CAAEyN,SAAU,WACjCpI,EAAAA,aAAeX,EAAAA,WACfe,EAAUzF,EAAO,mBAVO,EAa5BA,EAAAA,aAAAA,KAAwBwF,EAASd,EAAM,cAAc,WACjDA,EAAAA,UAAiBsF,EAAAA,WAAetF,EAAAA,SAAe,IADc,IAE7Dc,EAASd,EAAM,cAAc,WAC7BW,EAAAA,aAAeX,EAAAA,UAD0B,IAK7Cc,EAAS2B,EAAK,WAAW,SAAUsB,GAC1BzI,EAAAA,QAAAA,QAAsByI,EAAAA,OAAU7G,IACjC8C,EAAAA,UAF8B,IAIlCc,EAASd,EAAM,SAAS,WACpB1E,EAAAA,UACA0E,EAAAA,UAFgC,KAMxC+H,EAAAA,SAAc,SAAUiB,GAKpB,GAJoB,kBAATA,IACPA,EAAO1N,EAAAA,QAAAA,UAAAA,oBACkB0N,IAEzBtD,EAASsD,GAAM,GAAO,CACtB,IAAIC,OAAU,EACVD,EAAAA,UACAC,EAAUvG,EAAc,UAAM,OAAQ,EAAQgG,IAKzB,aAAjBM,EAAAA,SACA1N,EAAAA,qBACA0N,EAAAA,QAAe,YAEnBC,EAAUvG,EAAc,KAAM,CAC1BxF,UAAW,uBACXQ,QAASA,SAAUqG,GACXA,GACAA,EAAAA,kBAEJ/D,EAAAA,WACIgJ,EAAAA,SACAA,EAAAA,QAAAA,MACW1N,EAAO4N,UAPJ,QAUvB,EAAQR,GACXhI,EAAAA,eAAmBuI,EAASD,EAAAA,MACxB1N,EAAAA,QAAAA,KAAmB0N,EAAAA,UAClB1N,EAAAA,aACD2N,EAAAA,YAAsBE,WAClB5D,EAAI/J,KAAMwM,EAAAA,mBADoB,EAGlCiB,EAAAA,WAAqBG,WACjB7D,EAAI/J,KAAMwM,EAAAA,cADmB,EAGjC,EAAIiB,EAASzD,EAAO,CAChB6D,OAAQ,WACTrB,EAAAA,eAA4B,CAAC,MAIxC1M,EAAAA,kBAAAA,KAA6B2N,EAxCP,CALA,IAkD9B3N,EAAAA,kBAAAA,KAA6BoN,EAAW1I,GACxC1E,EAAAA,gBAAwB0E,EAAAA,YACxB1E,EAAAA,iBAAyB0E,EAAAA,YA3GlB,CA6GPV,EAAY,CAAEsF,QAAS,SAEvB3E,EAAI3E,EAAAA,gBAAwBoM,EAC5BpI,EAAAA,MAAmBoI,EAAazH,EAAIjB,EAAQmJ,EAAe,KAG3D7I,EAAAA,KAAkBW,EAAIkI,EAAe,KAGrCjI,EAAIpB,EAASxD,EAAAA,iBAAyB2M,GACA,QAAtC7B,EAAAA,aAAAA,cACA9G,EAAAA,OAAoB2I,EAAc/H,EAAIiI,EAAe,KAGrD7I,EAAAA,IAAiBY,EAAIpB,EAASqJ,EAAe,KAEjD5C,EAAIvF,EAAMV,GAEViG,EAAIjK,EAAAA,SAAgB,CAAEyN,SAAU,KAChCxD,EAAIjK,EAAAA,UAAiB,CAAEyN,SAAU,KACjCzN,EAAAA,UAAiB,EACjByF,EAAUzF,EAAO,kBA7I+C,CAsJpEuM,SAASA,EAAc9D,GAAG,IAKlBmE,EAJA5M,EAAQyI,EAAIA,EAAAA,OAAWvI,KACvB8N,EAAoBhO,EAAAA,kBACpB4G,EAAoB5G,EAAAA,kBACpBiO,EAAejO,EAAAA,aAGfgO,IACAA,EAAAA,SAA0B,SAAUE,EAAMrC,GAElCqC,IACAA,EAAAA,QAAeA,EAAAA,aAAoB,KACnCtB,EAAY,SAAWsB,EAAAA,cACnBlO,EAAM4M,WACC5M,EAAM4M,GAEjB,EAAkBf,GAAKqC,EAAAA,UARc,IAW7C,SAA2B,GAG3BlO,EAAAA,iBACAA,EAAAA,eAAAA,iBACOA,EAAAA,gBAGP4G,IACAA,EAAAA,SAA0B,SAAUsH,EAAMrC,GAClCqC,IAEA7I,EAAAA,aAAe6I,EAAAA,WACf5D,EAAY4D,EAAM,cAGlBtH,EAAkBiF,GACdqC,EAAAA,WACIA,EAAAA,YACIA,EAAAA,aACIA,EAAAA,QAAe,KAE/B,EAAeA,GAbsB,IAgB7C,SAA2B,GAE3BD,IACAA,EAAAA,SAAqB,SAAUE,GAC3BA,GADmC,IAGvC,SAAsB,EAlDJ,CA+E1BxL,SAASA,EAAYkE,EAAkBuH,GAC/BC,EAAMnO,KAAKoO,gBAAgBzH,EAC3BuH,GAEJvH,EAAmBS,EAAMpH,KAAKO,QAAQO,UAAW6F,GAEjD8C,EAAAA,KAAQ9C,EAAAA,IAAsB,CAC1B0H,SAAU1H,EAAAA,SACNA,EAAAA,SAAAA,QAAkC,MAAO,KACzC3G,KAAKsO,cACTvN,KAAM4F,EAAAA,KAENnD,MAAOmD,EAAAA,OAA0B,EACjCpF,MAAOoF,EAAAA,MACPwH,IAAKA,GACNxH,EAAAA,eAf8C,CA8BrD4H,SAASA,IAIL,OAHIvO,KAAKwO,YACLxO,KAAKyO,eAEFzO,KAAK0F,UAAUgJ,SAJF,CAgBxBJ,SAASA,IACL,IAAIK,EAAI3O,KAAK4O,YAAY/D,OAAS7K,KAAK4O,YAAY/D,MAAMjD,KACrDyG,EAAWrO,KAAKO,QAAQO,UAAUuN,SACtC,OAAIA,EACOA,EAAAA,QAAiB,MAAO,MAElB,kBAANM,IACPN,EAAWM,EAAAA,cAAAA,QAEE,kBAAmB,IAFrB,QAGE,UAAW,KAHb,QAIE,eAAgB,IAJlB,QAKE,UAAW,IALb,QAME,SAAU,KANZ,OAOC,EAAG,IAPJ,QAQE,UAAW,OAEvBN,GAA8B,EAAlBA,EAAAA,UACbA,EAAW,SAERA,EApBY,CA2CvBQ,SAASA,EAAOX,GAAc,IAGtBY,EAEAvO,EAAU6G,EAJFtH,KAIQS,QAChB2N,GAEJ3N,EAAAA,YAAsB6G,EAPVtH,KAOgB8O,YAAAA,YAA+BV,GAAgBA,EAAAA,aAG3E3N,EAAAA,KAAe6G,EAVHtH,KAUS8O,YAAAA,KAAwBV,GAAgBA,EAAAA,MAE7D,IAAIa,EAAU7H,EAAc,MACxB,KAAM,CACF4F,SAAU,WACVkC,IAAK,UACLxL,MAhBI1D,KAgBGoM,WAAmB,KAC1B5I,OAjBIxD,KAiBI2M,YAAoB,MAEhCxF,EAAAA,MAEAgI,EArBQnP,KAqBG0L,SAAAA,MAAAA,MACX0D,EAtBQpP,KAsBI0L,SAAAA,MAAAA,OACZ2D,EAAc5O,EAAAA,UAAAA,aACVA,EAAAA,MAAAA,OACC,MAAM6O,KAAKH,IAAaI,SAASJ,EAAU,MAC3C1O,EAAAA,QAAkB,IAAM,KAC7B+O,EAAe/O,EAAAA,UAAAA,cACXA,EAAAA,MAAAA,QACC,MAAM6O,KAAKF,IAAcG,SAASH,EAAW,KAC9C,IAERlF,EAAOzJ,EAAAA,MAAe,CAClBgP,WAAW,EACX/D,SAAUuD,EACVS,WAAW,EACXjF,SAAU,cACV/G,MAAO2L,EACP7L,OAAQgM,IAEZ/O,EAAAA,UAAAA,SAA4B,SACrBA,EAAAA,KAEPA,EAAAA,OAAiB,GA3CLT,KA4CZ2P,OAAAA,SAAqB,SAAUC,IAC3BZ,EAAgB1H,EAAMsI,EAAAA,YAAmB,CACrCH,WAAW,EACXI,qBAAqB,EACrBC,cAAc,EACdC,QAASH,EAAAA,WAGRZ,YACDvO,EAAAA,OAAAA,KAAoBuO,EATU,IAYtC,IAAIgB,EAAQ,CAAC,EAxDDhQ,KAyDZiQ,KAAAA,SAAmB,SAAUC,GAEpBA,EAAAA,YAAAA,cACDA,EAAAA,YAAAA,YAA+B3F,KAE9B2F,EAAAA,QAAAA,aACIF,EAAME,EAAAA,QACPF,EAAME,EAAAA,OAAa,EACnB,EAAQA,EAAAA,MAAa,IAEzB,EAAQA,EAAAA,MAAR,KAAwB5I,EAAM4I,EAAAA,YAAkB,CAC5CH,QAASG,EAAAA,WAXc,I,IAgB/BC,EAAY,IAzEJnQ,KAyEQoQ,YAAkB3P,EAzE1BT,KA0ER4K,UAiCJ,OA/BIwD,GACA,CAAC,QAAS,QAAS,UAAnB,SAAqC,SAAUiC,GAC3C,IAAIC,EAAc,CAAC,EACflC,EAAaiC,KACbC,EAAYD,GAAQjC,EAAaiC,GACjC,SAAiBC,GAJ4B,IA7E7CtQ,KAsFZiQ,KAAAA,SAAmB,SAAUC,GAAM,IAC3BK,EAAWpG,EAAKgG,EAAAA,MAChB,SAAUK,GACN,OAAOA,EAAAA,QAAAA,cACHN,EAAAA,YAAAA,WAFQ,IAGhBO,EAAWP,EAAAA,cAAoBQ,EAAUD,EAAAA,QAAkBE,EAAUF,EAAAA,QACrEF,IACqB,qBAAZG,GACLA,IAAYH,EAAAA,KAAqC,qBAAZI,GACrCA,IAAYJ,EAAAA,MAChBA,EAAAA,YAAqBG,EAASC,GAAS,GAAM,EAVlB,IAcnCtC,EAAM8B,EAAAA,eACN1K,EAAUvF,KAAM,SAAU,CAAEiQ,UAAWA,IACvC9B,EAtGYrO,KAsGN4Q,YAAkBvC,EAAK5N,GAE7BA,EAAU,KACV0P,EAAAA,UACA9I,EAAe4H,GACRZ,CA5GmB,CAkH9BC,SAASA,EAAgB7N,EAAS2N,GAC9B,IAAIyC,EAAwB3Q,KAAKO,QAAQO,UACzC,OAAOd,KAAK6O,OAAOzH,EAAM,CAAEtH,MAAO,CAAE8Q,aAAc,IAAOD,EAAAA,aAAoCzC,EAAc,CACvGpN,UAAW,CACPqO,YAAe5O,GAAWA,EAAAA,aACtBoQ,EAAAA,YACJrB,aAAgB/O,GAAWA,EAAAA,cACvBoQ,EAAAA,gBAPgC,CAmBhDE,SAASA,EAAUC,GACf,OAAOA,EAAAA,QAAa,YAAY,SAAUC,EAAGC,GACzC,MAAO,IAAMA,EAAAA,aAD+B,GAD3B,CAkBzBvC,SAASA,IAAe,IAIhBwC,EAHAC,EAAWC,EACXC,EAAY1H,EAAAA,gBACZ2H,EAAgB,CAAC,EAIjBC,EAASrK,EAAAA,cAAkB,UAC/B8C,EAAIuH,EAAQ,CACR9N,MAAO,MACPF,OAAQ,MACRiO,WAAY,WAEhBtK,EAAAA,KAAAA,YAAqBqK,GACrB,IAAIE,EAAaF,EAAAA,eAAwBA,EAAAA,cAAAA,SACrCE,GACAA,EAAAA,KAAAA,YAA2BA,EAAAA,gBAA0B3H,EAAQ,QAQjE4H,SAASA,EAAQ/F,GACb,IAAIgG,EAAiB,CAAC,EA0DtB,GAAIF,GACkB,IAAlB9F,EAAAA,WAC6C,IAA7CiG,EAAAA,QAAyBjG,EAAAA,UAAuB,CAChD,MAAS5B,EAAAA,iBAAqB4B,EAAM,MACpC,EAAiC,QAAlB,WACX,CAAC,EACD5B,EAAAA,iBAAqB4B,EAAAA,WAAiB,MAG1C,IAAK2F,EAAc3F,EAAAA,UAAgB,CAQ/BuF,EAAWO,EAAAA,qBAA+B,OAAO,GACjD,MAAQA,EAAAA,gBAA0B9F,EAAAA,aAAmBA,EAAAA,UACrDuF,EAAAA,YAAqBW,GAGjBjD,IAAAA,EAAI7E,EAAAA,iBAAqB8H,EACzB,MACAC,EAAW,CAAC,EAChB,IAAK3J,IAAIA,KAAOyG,EACU,kBAAXA,EAAEzG,IACR,WAAWkH,KAAKlH,KACjB2J,EAAS3J,GAAOyG,EAAEzG,IAG1BmJ,EAAc3F,EAAAA,UAAiBmG,EAGT,SAAlBnG,EAAAA,iBACO2F,EAAAA,KAAAA,KAEXJ,EAAAA,YAAqBW,EA5BU,CA+BnC,IAAKE,IAAIA,KAAKC,EACV,GAEA/K,EAAAA,WACIA,EAAAA,MACAA,EAAAA,UAEAgL,OAAOC,eAAexG,KAAKsG,EAAQD,GAAI,CAC1BI,EAAAA,EAAOJ,GAAIA,IAAAA,EAAAA,EAvFhC,GADAK,EAAaC,GAAc,EACvBhB,EAAAA,OAAkB,CAIlB,IADAzF,EAAIyF,EAAAA,OACGzF,MAAQyG,GACXA,EAAchB,EAAUzF,GAAV,KAAkBmF,GAEpCqB,GAAcC,CAPI,CActB,IAJa,cAATtB,GAAgC,SAAR7I,IACxBkK,GAAa,GAEjBxG,EAAIuF,EAAAA,OACGvF,MAAQwG,GACXA,EAAcjB,EAASvF,GAAT,KAAiBmF,IACZ,oBAAR7I,EAEVkK,GAIIE,EAAavB,KAAU7I,GACN,QAAlByD,EAAAA,UACA2F,EAAc3F,EAAAA,UAAeoF,KAAU7I,IAElCqK,IACqC,IAAtCA,EAAAA,QAA2BxB,GAO3BY,EAAeZ,GAAQ7I,EANnBA,GACAyD,EAAAA,aAAkBmF,EAAUC,GAAO7I,GAyDJ,CAK/C8B,EAAI2B,EAAMgG,GAEY,QAAlBhG,EAAAA,UACAA,EAAAA,aAAkB,eAAgB,OAEhB,SAAlBA,EAAAA,UAIJ,GAAGhL,QAAQ+K,KAAKC,EAAAA,UAAiBA,EAAAA,WAAiB+F,EA3DF,CA7DjC,CAoIvBA,CAAQzR,KAAK0F,UAAU6M,cAAc,QAJjCtB,EAAAA,WAAAA,YAAgCA,GAEhCK,EAAAA,WAAAA,YAA8BA,EA1Jd,CAyKxB/F,SAASA,EAAeiH,IACR1S,KACX2S,SACG,CAFQ3S,KAEP2S,SAFO3S,KAES4S,oBACjB,CAHQ5S,KAGP4F,YAFLhF,SAE+B,SAAUiS,GACrCH,EAAAA,YAAmBG,EADuB,GAJlB,CAehCC,SAASA,IAAc,IACf9S,EAAQE,KAmBZF,EAAAA,UAAkB,CACd+S,OAAQA,SAAUtS,EAASC,GAPvBV,EAAAA,kBAAyB,EAC7BsH,GAAM,EAAMtH,EAAAA,QAAAA,UAOYS,GANpB4J,EAM6B3J,GANhB,IACbV,EAAAA,QAI+B,GAOvCF,EAAAA,QACaE,GADb,sBAEe,SAAUS,EAASC,GAhB1BV,EAAAA,kBAAyB,EAC7BsH,GAAM,EAAMtH,EAAAA,QAAAA,WAgBSS,GAfjB4J,EAe0B3J,GAfb,IACbV,EAAAA,QAakC,GA9BvB,CAmDvBwC,SAASA,IACL,IAAIxC,EAAQE,KACRF,EAAAA,aAGJgM,EAAgBhM,EACXkH,EAAAA,UACDlH,EAAAA,cAIJgT,YAAW,WACPhJ,EAAAA,QACAA,EAAAA,QAEK9C,EAAAA,UACD8L,YAAW,WACPhT,EAAAA,YADmB,GAEpB,IAPY,GASpB,GApBU,CA4BjBsM,SAASA,IAAkB,IACnBtM,EAAQE,KACR2G,EAAmB7G,EAAAA,QAAAA,UACnB0B,EAAUmF,EAAAA,QACVoM,EAAUjT,EAAAA,mBAA2BA,EAAAA,kBACzCA,EAAAA,aAAqB,EACjBA,EAAAA,kBACAA,EAAAA,gBAEAiT,IAAwC,IAA7BpM,EAAAA,UACX7G,EAAAA,aAAqB,GACrBA,EAAAA,eAAuBA,EAAAA,gBACnBA,EAAAA,SAAAA,EAAiB,mBAAjB,KAAyC,CACrCgL,OAAQ,IADZ,MAGJzD,EAAW7F,GAAS,SAAUoJ,GAC1B9K,EAAAA,UAAgB8K,EADkB,IAGtC,oBAAyB,EAlBN,CAoC3B8F,SAASA,EAAYvC,EAAK5N,GACtB,IAAIyS,EAAQ7E,EAAAA,QAAY,UAAY,EAChC8E,EAAO9E,EAAAA,OAAW6E,GAoCtB,OAlCA7E,EAAMA,EAAAA,OAAW,EAAG6E,GAEhBzS,GAAWA,EAAAA,WAAqBA,EAAAA,UAAAA,WAC5B0S,IACAA,EAAO,qCACS1S,EAAAA,MAAAA,MAAsB,aACrBA,EAAAA,MAAAA,OAAuB,gDAGpC0S,EAAAA,QAAa,0BAA4B,SACzC,0BAEJ,EAAM9E,EAAAA,QAAY,SAAU8E,EAAO,WAG3C9E,EAAMA,EAAAA,QACO,kBAAmB,IAD1B,QAEO,sBAAuB,IAF9B,QAGO,wBAAyB,IAHhC,QAIO,sCAAwC,WAJ/C,QAKO,eAAgB,SALvB,QAMO,QAAS,oDANhB,QAOO,sBAAwB,gBAP/B,QAQO,KAAM,KARb,QAUO,iEACb,gCAXM,QAaO,UAAW,QAblB,QAcO,SAAU,QAEnBnO,KAAKkT,gBACL/E,EAAMnO,KAAKkT,cAAc/E,IAEtBA,CAtCwB,CAjmCnC,IAAI3I,EAAkB,GAElB2L,EAAiB,CACb,IACA,sCACA,SACA,4BACA,eACA,cACA,oBACA,cACA,WACA,YAGJmB,EAAqB,iFAUzB5I,EAAAA,gBAA4B,GAC5B,IAUIoC,EAVA6F,EAAmB,CACf,WACA,OACA,QAgTRjI,EAAAA,QA/CA7J,SAAiBkG,EAAYf,GACzBT,EAAAA,QAAyBS,GACzBK,EAAAA,QAAmBU,IAC0B,IAAzCP,EAAAA,QAAwBO,KACxBP,EAAAA,KAAqBO,IACjBoN,EAAapN,EAAAA,WACjBoN,WAAwBlI,EACxBkI,EAAAA,YAAyB1Q,EACzB0Q,EAAAA,aAA0B1E,EAC1B0E,EAAAA,MAAmB7Q,EACnB6Q,EAAAA,YAAyBzC,EACzByC,EAAAA,aAA0B5E,EAC1B4E,EAAAA,OAAoBtE,EACpBsE,EAAAA,gBAA6B/E,EAC7B+E,EAAAA,YAAyB7E,EACzB6E,EAAAA,eAA4B5H,EAC5B4H,EAAAA,YAAyBpH,EACzBoH,EAAAA,YAAyB7G,EACzB6G,EAAAA,UAAuB7I,EACvB6I,EAAAA,cAA2B9G,EAC3B8G,EAAAA,gBAA6B/G,EAC7B+G,EAAAA,UAAAA,KAA0BhH,GAC1B7G,EAASS,EAAY,OAAQ6M,GACzB5L,EAAAA,UACAA,EAAAA,IAAAA,WAAiB,SAAjB,aAAsC,SAAUoM,GACvCtH,IAGDsH,EAAAA,QACAtH,EAAAA,cAGAA,EAAAA,aARkD,MAarB,IAAzCtG,EAAAA,QAAwBoE,KACxBpE,EAAAA,KAAqBoE,GACrBD,EAAAA,UAA2BvC,EAAMvG,EAAAA,UAA6B8I,EAAAA,WAC9DA,EAAAA,KAAsBvC,EAAMvG,EAAAA,KAAwB8I,EAAAA,MAIpD,aAA4BvC,EAAMvG,EAAAA,WAA8B8I,EAAAA,YA5CzB,CAzSlD,EAopCED,IAAcA,EAAY,CAAC,IA+GvBA,CAvyC8jB,IAyyCzkBzK,EAAgBU,EAAU,mCAAoC,CAACA,EAAS,mBAAoBA,EAAS,qCAAsCA,EAAS,2BAA2B,SAAUX,EAAY0K,EAAWpC,GAEpMtI,EACRsI,cAAkBA,EADVtI,EAERuI,KAASD,EAAAA,KAFDtI,EAGR0J,QAAYpB,EAAAA,QAHJtI,EAIR6J,KAASvB,EAAAA,KACToC,EAAAA,QALQ1K,EAKUuK,MALVvK,EAKmBqU,SAPgM,GAx3F3M,EAZc3T,EAAO4T,SACrCvU,EAAA,QAAqBA,EACrBW,EAAA,QAAiBX,IAEjBwU,EAAuC,CAAC,eAAxC,gBAAiEvU,GAG7D,OAFAD,EAAQC,GACRD,EAAAA,WAAqBC,EACdD,CAHX,6B","sources":["../node_modules/highcharts/modules/exporting.src.js"],"sourcesContent":["/**\n * @license Highcharts JS v10.3.2 (2022-11-28)\n *\n * Exporting module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/exporting', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(\n                    new CustomEvent(\n                        'HighchartsModuleLoaded',\n                        { detail: { path: path, module: obj[path] }\n                    })\n                );\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Chart/ChartNavigationComposition.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ChartNavigationComposition;\n        (function (ChartNavigationComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(chart) {\n                if (!chart.navigation) {\n                    chart.navigation = new Additions(chart);\n                }\n                return chart;\n            }\n            ChartNavigationComposition.compose = compose;\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Initializes `chart.navigation` object which delegates `update()` methods\n             * to all other common classes (used in exporting and navigationBindings).\n             * @private\n             */\n            var Additions = /** @class */ (function () {\n                    /* *\n                     *\n                     *  Constructor\n                     *\n                     * */\n                    function Additions(chart) {\n                        this.updates = [];\n                    this.chart = chart;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Registers an `update()` method in the `chart.navigation` object.\n                 *\n                 * @private\n                 * @param {UpdateFunction} updateFn\n                 * The `update()` method that will be called in `chart.update()`.\n                 */\n                Additions.prototype.addUpdate = function (updateFn) {\n                    this.chart.navigation.updates.push(updateFn);\n                };\n                /**\n                 * @private\n                 */\n                Additions.prototype.update = function (options, redraw) {\n                    var _this = this;\n                    this.updates.forEach(function (updateFn) {\n                        updateFn.call(_this.chart, options, redraw);\n                    });\n                };\n                return Additions;\n            }());\n            ChartNavigationComposition.Additions = Additions;\n        })(ChartNavigationComposition || (ChartNavigationComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartNavigationComposition;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isTouchDevice = H.isTouchDevice;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        // Add the export related options\n        /**\n         * Options for the exporting module. For an overview on the matter, see\n         * [the docs](https://www.highcharts.com/docs/export-module/export-module-overview).\n         *\n         * @requires     modules/exporting\n         * @optionparent exporting\n         */\n        var exporting = {\n                /**\n                 * Experimental setting to allow HTML inside the chart (added through\n                 * the `useHTML` options), directly in the exported image. This allows\n                 * you to preserve complicated HTML structures like tables or bi-directional\n                 * text in exported charts.\n                 *\n                 * Disclaimer: The HTML is rendered in a `foreignObject` tag in the\n                 * generated SVG. The official export server is based on PhantomJS,\n                 * which supports this, but other SVG clients, like Batik, does not\n                 * support it. This also applies to downloaded SVG that you want to\n                 * open in a desktop client.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     4.1.8\n                 * @apioption exporting.allowHTML\n                 */\n                /**\n                 * Additional chart options to be merged into the chart before exporting to\n                 * an image format. This does not apply to printing the chart via the export\n                 * menu.\n                 *\n                 * For example, a common use case is to add data labels to improve\n                 * readability of the exported chart, or to add a printer-friendly color\n                 * scheme to exported PDFs.\n                 *\n                 * @sample {highcharts} highcharts/exporting/chartoptions-data-labels/\n                 *         Added data labels\n                 * @sample {highstock} highcharts/exporting/chartoptions-data-labels/\n                 *         Added data labels\n                 *\n                 * @type      {Highcharts.Options}\n                 * @apioption exporting.chartOptions\n                 */\n                /**\n                 * Whether to enable the exporting module. Disabling the module will\n                 * hide the context button, but API methods will still be available.\n                 *\n                 * @sample {highcharts} highcharts/exporting/enabled-false/\n                 *         Exporting module is loaded but disabled\n                 * @sample {highstock} highcharts/exporting/enabled-false/\n                 *         Exporting module is loaded but disabled\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     2.0\n                 * @apioption exporting.enabled\n                 */\n                /**\n                 * Function to call if the offline-exporting module fails to export\n                 * a chart on the client side, and [fallbackToExportServer](\n                 * #exporting.fallbackToExportServer) is disabled. If left undefined, an\n                 * exception is thrown instead. Receives two parameters, the exporting\n                 * options, and the error from the module.\n                 *\n                 * @see [fallbackToExportServer](#exporting.fallbackToExportServer)\n                 *\n                 * @type      {Highcharts.ExportingErrorCallbackFunction}\n                 * @since     5.0.0\n                 * @requires  modules/exporting\n                 * @requires  modules/offline-exporting\n                 * @apioption exporting.error\n                 */\n                /**\n                 * Whether or not to fall back to the export server if the offline-exporting\n                 * module is unable to export the chart on the client side. This happens for\n                 * certain browsers, and certain features (e.g.\n                 * [allowHTML](#exporting.allowHTML)), depending on the image type exporting\n                 * to. For very complex charts, it is possible that export can fail in\n                 * browsers that don't support Blob objects, due to data URL length limits.\n                 * It is recommended to define the [exporting.error](#exporting.error)\n                 * handler if disabling fallback, in order to notify users in case export\n                 * fails.\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     4.1.8\n                 * @requires  modules/exporting\n                 * @requires  modules/offline-exporting\n                 * @apioption exporting.fallbackToExportServer\n                 */\n                /**\n                 * The filename, without extension, to use for the exported chart.\n                 *\n                 * @sample {highcharts} highcharts/exporting/filename/\n                 *         Custom file name\n                 * @sample {highstock} highcharts/exporting/filename/\n                 *         Custom file name\n                 *\n                 * @type      {string}\n                 * @default   chart\n                 * @since     2.0\n                 * @apioption exporting.filename\n                 */\n                /**\n                 * An object containing additional key value data for the POST form that\n                 * sends the SVG to the export server. For example, a `target` can be set to\n                 * make sure the generated image is received in another frame, or a custom\n                 * `enctype` or `encoding` can be set.\n                 *\n                 * @type      {Highcharts.HTMLAttributes}\n                 * @since     3.0.8\n                 * @apioption exporting.formAttributes\n                 */\n                /**\n                 * Path where Highcharts will look for export module dependencies to\n                 * load on demand if they don't already exist on `window`. Should currently\n                 * point to location of [CanVG](https://github.com/canvg/canvg) library,\n                 * [jsPDF](https://github.com/parallax/jsPDF) and\n                 * [svg2pdf.js](https://github.com/yWorks/svg2pdf.js), required for client\n                 * side export in certain browsers.\n                 *\n                 * @type      {string}\n                 * @default   https://code.highcharts.com/{version}/lib\n                 * @since     5.0.0\n                 * @apioption exporting.libURL\n                 */\n                /**\n                 * Analogous to [sourceWidth](#exporting.sourceWidth).\n                 *\n                 * @type      {number}\n                 * @since     3.0\n                 * @apioption exporting.sourceHeight\n                 */\n                /**\n                 * The width of the original chart when exported, unless an explicit\n                 * [chart.width](#chart.width) is set, or a pixel width is set on the\n                 * container. The width exported raster image is then multiplied by\n                 * [scale](#exporting.scale).\n                 *\n                 * @sample {highcharts} highcharts/exporting/sourcewidth/\n                 *         Source size demo\n                 * @sample {highstock} highcharts/exporting/sourcewidth/\n                 *         Source size demo\n                 * @sample {highmaps} maps/exporting/sourcewidth/\n                 *         Source size demo\n                 *\n                 * @type      {number}\n                 * @since     3.0\n                 * @apioption exporting.sourceWidth\n                 */\n                /**\n                 * The pixel width of charts exported to PNG or JPG. As of Highcharts\n                 * 3.0, the default pixel width is a function of the [chart.width](\n                 * #chart.width) or [exporting.sourceWidth](#exporting.sourceWidth) and the\n                 * [exporting.scale](#exporting.scale).\n                 *\n                 * @sample {highcharts} highcharts/exporting/width/\n                 *         Export to 200px wide images\n                 * @sample {highstock} highcharts/exporting/width/\n                 *         Export to 200px wide images\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption exporting.width\n                 */\n                /**\n                 * Default MIME type for exporting if `chart.exportChart()` is called\n                 * without specifying a `type` option. Possible values are `image/png`,\n                 *  `image/jpeg`, `application/pdf` and `image/svg+xml`.\n                 *\n                 * @type  {Highcharts.ExportingMimeTypeValue}\n                 * @since 2.0\n                 */\n                type: 'image/png',\n                /**\n                 * The URL for the server module converting the SVG string to an image\n                 * format. By default this points to Highchart's free web service.\n                 *\n                 * @since 2.0\n                 */\n                url: 'https://export.highcharts.com/',\n                /**\n                 * Settings for a custom font for the exported PDF, when using the\n                 * `offline-exporting` module. This is used for languages containing\n                 * non-ASCII characters, like Chinese, Russian, Japanese etc.\n                 *\n                 * As described in the [jsPDF\n                 * docs](https://github.com/parallax/jsPDF#use-of-unicode-characters--utf-8),\n                 * the 14 standard fonts in PDF are limited to the ASCII-codepage.\n                 * Therefore, in order to support other text in the exported PDF, one or\n                 * more TTF font files have to be passed on to the exporting module.\n                 *\n                 * See more in [the\n                 * docs](https://www.highcharts.com/docs/export-module/client-side-export).\n                 *\n                 * @sample {highcharts} highcharts/exporting/offline-download-pdffont/\n                 *         Download PDF in a language containing non-Latin characters.\n                 *\n                 * @since 10.0.0\n                 * @requires modules/offline-exporting\n                 */\n                pdfFont: {\n                    /**\n                     * The TTF font file for normal `font-style`. If font variations like\n                     * `bold` or `italic` are not defined, the `normal` font will be used\n                     * for those too.\n                     *\n                     * @type string|undefined\n                     */\n                    normal: void 0,\n                    /**\n                     * The TTF font file for bold text.\n                     *\n                     * @type string|undefined\n                     */\n                    bold: void 0,\n                    /**\n                     * The TTF font file for bold and italic text.\n                     *\n                     * @type string|undefined\n                     */\n                    bolditalic: void 0,\n                    /**\n                     * The TTF font file for italic text.\n                     *\n                     * @type string|undefined\n                     */\n                    italic: void 0\n                },\n                /**\n                 * When printing the chart from the menu item in the burger menu, if\n                 * the on-screen chart exceeds this width, it is resized. After printing\n                 * or cancelled, it is restored. The default width makes the chart\n                 * fit into typical paper format. Note that this does not affect the\n                 * chart when printing the web page as a whole.\n                 *\n                 * @since 4.2.5\n                 */\n                printMaxWidth: 780,\n                /**\n                 * Defines the scale or zoom factor for the exported image compared\n                 * to the on-screen display. While for instance a 600px wide chart\n                 * may look good on a website, it will look bad in print. The default\n                 * scale of 2 makes this chart export to a 1200px PNG or JPG.\n                 *\n                 * @see [chart.width](#chart.width)\n                 * @see [exporting.sourceWidth](#exporting.sourceWidth)\n                 *\n                 * @sample {highcharts} highcharts/exporting/scale/\n                 *         Scale demonstrated\n                 * @sample {highstock} highcharts/exporting/scale/\n                 *         Scale demonstrated\n                 * @sample {highmaps} maps/exporting/scale/\n                 *         Scale demonstrated\n                 *\n                 * @since 3.0\n                 */\n                scale: 2,\n                /**\n                 * Options for the export related buttons, print and export. In addition\n                 * to the default buttons listed here, custom buttons can be added.\n                 * See [navigation.buttonOptions](#navigation.buttonOptions) for general\n                 * options.\n                 *\n                 * @type     {Highcharts.Dictionary<*>}\n                 * @requires modules/exporting\n                 */\n                buttons: {\n                    /**\n                     * Options for the export button.\n                     *\n                     * In styled mode, export button styles can be applied with the\n                     * `.highcharts-contextbutton` class.\n                     *\n                     * @declare  Highcharts.ExportingButtonsOptionsObject\n                     * @extends  navigation.buttonOptions\n                     * @requires modules/exporting\n                     */\n                    contextButton: {\n                        /**\n                         * A click handler callback to use on the button directly instead of\n                         * the popup menu.\n                         *\n                         * @sample highcharts/exporting/buttons-contextbutton-onclick/\n                         *         Skip the menu and export the chart directly\n                         *\n                         * @type      {Function}\n                         * @since     2.0\n                         * @apioption exporting.buttons.contextButton.onclick\n                         */\n                        /**\n                         * See [navigation.buttonOptions.symbolFill](\n                         * #navigation.buttonOptions.symbolFill).\n                         *\n                         * @type      {Highcharts.ColorString}\n                         * @default   #666666\n                         * @since     2.0\n                         * @apioption exporting.buttons.contextButton.symbolFill\n                         */\n                        /**\n                         * The horizontal position of the button relative to the `align`\n                         * option.\n                         *\n                         * @type      {number}\n                         * @default   -10\n                         * @since     2.0\n                         * @apioption exporting.buttons.contextButton.x\n                         */\n                        /**\n                         * The class name of the context button.\n                         */\n                        className: 'highcharts-contextbutton',\n                        /**\n                         * The class name of the menu appearing from the button.\n                         */\n                        menuClassName: 'highcharts-contextmenu',\n                        /**\n                         * The symbol for the button. Points to a definition function in\n                         * the `Highcharts.Renderer.symbols` collection. The default\n                         * `menu` function is part of the exporting module. Possible\n                         * values are \"circle\", \"square\", \"diamond\", \"triangle\",\n                         * \"triangle-down\", \"menu\", \"menuball\" or custom shape.\n                         *\n                         * @sample highcharts/exporting/buttons-contextbutton-symbol/\n                         *         Use a circle for symbol\n                         * @sample highcharts/exporting/buttons-contextbutton-symbol-custom/\n                         *         Custom shape as symbol\n                         *\n                         * @type  {Highcharts.SymbolKeyValue|\"menu\"|\"menuball\"|string}\n                         * @since 2.0\n                         */\n                        symbol: 'menu',\n                        /**\n                         * The key to a [lang](#lang) option setting that is used for the\n                         * button's title tooltip. When the key is `contextButtonTitle`, it\n                         * refers to [lang.contextButtonTitle](#lang.contextButtonTitle)\n                         * that defaults to \"Chart context menu\".\n                         *\n                         * @since 6.1.4\n                         */\n                        titleKey: 'contextButtonTitle',\n                        /**\n                         * This option is deprecated, use\n                         * [titleKey](#exporting.buttons.contextButton.titleKey) instead.\n                         *\n                         * @deprecated\n                         * @type      {string}\n                         * @apioption exporting.buttons.contextButton._titleKey\n                         */\n                        /**\n                         * A collection of strings pointing to config options for the menu\n                         * items. The config options are defined in the\n                         * `menuItemDefinitions` option.\n                         *\n                         * By default, there is the \"View in full screen\" and \"Print\" menu\n                         * items, plus one menu item for each of the available export types.\n                         *\n                         * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n                         *         Menu item definitions\n                         * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n                         *         Menu item definitions\n                         * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n                         *         Menu item definitions\n                         *\n                         * @type    {Array<string>}\n                         * @default [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\"]\n                         * @since   2.0\n                         */\n                        menuItems: [\n                            'viewFullscreen',\n                            'printChart',\n                            'separator',\n                            'downloadPNG',\n                            'downloadJPEG',\n                            'downloadPDF',\n                            'downloadSVG'\n                        ]\n                    }\n                },\n                /**\n                 * An object consisting of definitions for the menu items in the context\n                 * menu. Each key value pair has a `key` that is referenced in the\n                 * [menuItems](#exporting.buttons.contextButton.menuItems) setting,\n                 * and a `value`, which is an object with the following properties:\n                 *\n                 * - **onclick:** The click handler for the menu item\n                 *\n                 * - **text:** The text for the menu item\n                 *\n                 * - **textKey:** If internationalization is required, the key to a language\n                 *   string\n                 *\n                 * Custom text for the \"exitFullScreen\" can be set only in lang options\n                 * (it is not a separate button).\n                 *\n                 * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n                 *         Menu item definitions\n                 * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n                 *         Menu item definitions\n                 * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n                 *         Menu item definitions\n                 *\n                 *\n                 * @type    {Highcharts.Dictionary<Highcharts.ExportingMenuObject>}\n                 * @default {\"viewFullscreen\": {}, \"printChart\": {}, \"separator\": {}, \"downloadPNG\": {}, \"downloadJPEG\": {}, \"downloadPDF\": {}, \"downloadSVG\": {}}\n                 * @since   5.0.13\n                 */\n                menuItemDefinitions: {\n                    /**\n                     * @ignore\n                     */\n                    viewFullscreen: {\n                        textKey: 'viewFullscreen',\n                        onclick: function () {\n                            if (this.fullscreen) {\n                                this.fullscreen.toggle();\n                        }\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                printChart: {\n                    textKey: 'printChart',\n                    onclick: function () {\n                        this.print();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                separator: {\n                    separator: true\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPNG: {\n                    textKey: 'downloadPNG',\n                    onclick: function () {\n                        this.exportChart();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadJPEG: {\n                    textKey: 'downloadJPEG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/jpeg'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPDF: {\n                    textKey: 'downloadPDF',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'application/pdf'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadSVG: {\n                    textKey: 'downloadSVG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/svg+xml'\n                        });\n                    }\n                }\n            }\n        };\n        // Add language\n        /**\n         * @optionparent lang\n         */\n        var lang = {\n                /**\n                 * Exporting module only. The text for the menu item to view the chart\n                 * in full screen.\n                 *\n                 * @since 8.0.1\n                 */\n                viewFullscreen: 'View in full screen',\n                /**\n                 * Exporting module only. The text for the menu item to exit the chart\n                 * from full screen.\n                 *\n                 * @since 8.0.1\n                 */\n                exitFullscreen: 'Exit from full screen',\n                /**\n                 * Exporting module only. The text for the menu item to print the chart.\n                 *\n                 * @since    3.0.1\n                 * @requires modules/exporting\n                 */\n                printChart: 'Print chart',\n                /**\n                 * Exporting module only. The text for the PNG download menu item.\n                 *\n                 * @since    2.0\n                 * @requires modules/exporting\n                 */\n                downloadPNG: 'Download PNG image',\n                /**\n                 * Exporting module only. The text for the JPEG download menu item.\n                 *\n                 * @since    2.0\n                 * @requires modules/exporting\n                 */\n                downloadJPEG: 'Download JPEG image',\n                /**\n                 * Exporting module only. The text for the PDF download menu item.\n                 *\n                 * @since    2.0\n                 * @requires modules/exporting\n                 */\n                downloadPDF: 'Download PDF document',\n                /**\n                 * Exporting module only. The text for the SVG download menu item.\n                 *\n                 * @since    2.0\n                 * @requires modules/exporting\n                 */\n                downloadSVG: 'Download SVG vector image',\n                /**\n                 * Exporting module menu. The tooltip title for the context menu holding\n                 * print and export menu items.\n                 *\n                 * @since    3.0\n                 * @requires modules/exporting\n                 */\n                contextButtonTitle: 'Chart context menu'\n            };\n        /**\n         * A collection of options for buttons and menus appearing in the exporting\n         * module or in Stock Tools.\n         *\n         * @requires     modules/exporting\n         * @optionparent navigation\n         */\n        var navigation = {\n                /**\n                 * A collection of options for buttons appearing in the exporting\n                 * module.\n                 *\n                 * In styled mode, the buttons are styled with the\n                 * `.highcharts-contextbutton` and `.highcharts-button-symbol` classes.\n                 *\n                 * @requires modules/exporting\n                 */\n                buttonOptions: {\n                    /**\n                     * Whether to enable buttons.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-enabled/\n                     *         Exporting module loaded but buttons disabled\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     2.0\n                     * @apioption navigation.buttonOptions.enabled\n                     */\n                    /**\n                     * The pixel size of the symbol on the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    symbolSize: 14,\n                    /**\n                     * The x position of the center of the symbol inside the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    symbolX: 12.5,\n                    /**\n                     * The y position of the center of the symbol inside the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    symbolY: 10.5,\n                    /**\n                     * Alignment for the buttons.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-align/\n                     *         Center aligned\n                     *\n                     * @type  {Highcharts.AlignValue}\n                     * @since 2.0\n                     */\n                    align: 'right',\n                    /**\n                     * The pixel spacing between buttons.\n                     *\n                     * @since 2.0\n                     */\n                    buttonSpacing: 3,\n                    /**\n                     * Pixel height of the buttons.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    height: 22,\n                    /**\n                     * A text string to add to the individual button.\n                     *\n                     * @sample highcharts/exporting/buttons-text/\n                     *         Full text button\n                     * @sample highcharts/exporting/buttons-text-usehtml/\n                     *         Icon using CSS font in text\n                     * @sample highcharts/exporting/buttons-text-symbol/\n                     *         Combined symbol and text\n                     *\n                     * @type      {string}\n                     * @default   null\n                     * @since     3.0\n                     * @apioption navigation.buttonOptions.text\n                     */\n                    /**\n                     * Whether to use HTML for rendering the button. HTML allows for things\n                     * like inline CSS or image-based icons.\n                     *\n                     * @sample highcharts/exporting/buttons-text-usehtml/\n                     *         Icon using CSS font in text\n                     *\n                     * @type      boolean\n                     * @default   false\n                     * @since 10.3.0\n                     * @apioption navigation.buttonOptions.useHTML\n                     */\n                    /**\n                     * The vertical offset of the button's position relative to its\n                     * `verticalAlign`.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-verticalalign/\n                     *         Buttons at lower right\n                     *\n                     * @type      {number}\n                     * @default   0\n                     * @since     2.0\n                     * @apioption navigation.buttonOptions.y\n                     */\n                    /**\n                     * The vertical alignment of the buttons. Can be one of `\"top\"`,\n                     * `\"middle\"` or `\"bottom\"`.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-verticalalign/\n                     *         Buttons at lower right\n                     *\n                     * @type  {Highcharts.VerticalAlignValue}\n                     * @since 2.0\n                     */\n                    verticalAlign: 'top',\n                    /**\n                     * The pixel width of the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    width: 24,\n                    /**\n                     * Fill color for the symbol within the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-symbolfill/\n                     *         Blue symbol stroke for one of the buttons\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.0\n                     */\n                    symbolFill: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * The color of the symbol's stroke or line.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-symbolstroke/\n                     *         Blue symbol stroke\n                     *\n                     * @type  {Highcharts.ColorString}\n                     * @since 2.0\n                     */\n                    symbolStroke: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * The pixel stroke width of the symbol on the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    symbolStrokeWidth: 3,\n                    /**\n                     * A configuration object for the button theme. The object accepts\n                     * SVG properties like `stroke-width`, `stroke` and `fill`.\n                     * Tri-state button styles are supported by the `states.hover` and\n                     * `states.select` objects.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-theme/\n                     *         Theming the buttons\n                     *\n                     * @requires modules/exporting\n                     *\n                     * @since 3.0\n                     */\n                    theme: {\n                        /**\n                         * The default fill exists only to capture hover events.\n                         *\n                         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                         * @default   #ffffff\n                         * @apioption navigation.buttonOptions.theme.fill\n                         */\n                        /**\n                         * Default stroke for the buttons.\n                         *\n                         * @type      {Highcharts.ColorString}\n                         * @default   none\n                         * @apioption navigation.buttonOptions.theme.stroke\n                         */\n                        /**\n                         * Padding for the button.\n                         */\n                        padding: 5\n                    }\n                },\n                /**\n                 * CSS styles for the popup menu appearing by default when the export\n                 * icon is clicked. This menu is rendered in HTML.\n                 *\n                 * @see In styled mode, the menu is styled with the `.highcharts-menu`\n                 *      class.\n                 *\n                 * @sample highcharts/navigation/menustyle/\n                 *         Light gray menu background\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"border\": \"1px solid #999999\", \"background\": \"#ffffff\", \"padding\": \"5px 0\"}\n                 * @since   2.0\n                 */\n                menuStyle: {\n                    /** @ignore-option */\n                    border: \"1px solid \".concat(\"#999999\" /* Palette.neutralColor40 */),\n                    /** @ignore-option */\n                    background: \"#ffffff\" /* Palette.backgroundColor */,\n                    /** @ignore-option */\n                    padding: '5px 0'\n                },\n                /**\n                 * CSS styles for the individual items within the popup menu appearing\n                 * by default when the export icon is clicked. The menu items are\n                 * rendered in HTML. Font size defaults to `11px` on desktop and `14px`\n                 * on touch devices.\n                 *\n                 * @see In styled mode, the menu items are styled with the\n                 *      `.highcharts-menu-item` class.\n                 *\n                 * @sample {highcharts} highcharts/navigation/menuitemstyle/\n                 *         Add a grey stripe to the left\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"padding\": \"0.5em 1em\", \"color\": \"#333333\", \"background\": \"none\", \"fontSize\": \"11px/14px\", \"transition\": \"background 250ms, color 250ms\"}\n                 * @since   2.0\n                 */\n                menuItemStyle: {\n                    /** @ignore-option */\n                    padding: '0.5em 1em',\n                    /** @ignore-option */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @ignore-option */\n                    background: 'none',\n                    /** @ignore-option */\n                    fontSize: isTouchDevice ? '14px' : '11px',\n                    /** @ignore-option */\n                    transition: 'background 250ms, color 250ms'\n                },\n                /**\n                 * CSS styles for the hover state of the individual items within the\n                 * popup menu appearing by default when the export icon is clicked. The\n                 * menu items are rendered in HTML.\n                 *\n                 * @see In styled mode, the menu items are styled with the\n                 *      `.highcharts-menu-item` class.\n                 *\n                 * @sample highcharts/navigation/menuitemhoverstyle/\n                 *         Bold text on hover\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"background\": \"#335cad\", \"color\": \"#ffffff\"}\n                 * @since   2.0\n                 */\n                menuItemHoverStyle: {\n                    /** @ignore-option */\n                    background: \"#335cad\" /* Palette.highlightColor80 */,\n                    /** @ignore-option */\n                    color: \"#ffffff\" /* Palette.backgroundColor */\n                }\n            };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var ExportingDefaults = {\n                exporting: exporting,\n                lang: lang,\n                navigation: navigation\n            };\n\n        return ExportingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingSymbols.js', [], function () {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ExportingSymbols;\n        (function (ExportingSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var modifiedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedClasses.indexOf(SVGRendererClass) === -1) {\n                    modifiedClasses.push(SVGRendererClass);\n                    var symbols = SVGRendererClass.prototype.symbols;\n                    symbols.menu = menu;\n                    symbols.menuball = menuball.bind(symbols);\n                }\n            }\n            ExportingSymbols.compose = compose;\n            /**\n             * @private\n             */\n            function menu(x, y, width, height) {\n                var arr = [\n                        ['M',\n                    x,\n                    y + 2.5],\n                        ['L',\n                    x + width,\n                    y + 2.5],\n                        ['M',\n                    x,\n                    y + height / 2 + 0.5],\n                        ['L',\n                    x + width,\n                    y + height / 2 + 0.5],\n                        ['M',\n                    x,\n                    y + height - 1.5],\n                        ['L',\n                    x + width,\n                    y + height - 1.5]\n                    ];\n                return arr;\n            }\n            /**\n             * @private\n             */\n            function menuball(x, y, width, height) {\n                var h = (height / 3) - 2;\n                var path = [];\n                path = path.concat(this.circle(width - h, y, h, h), this.circle(width - h, y + h + 4, h, h), this.circle(width - h, y + 2 * (h + 4), h, h));\n                return path;\n            }\n        })(ExportingSymbols || (ExportingSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ExportingSymbols;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Fullscreen.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (AST, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Rafal Sebestjanski\n         *\n         *  Full screen for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n         * The module allows user to enable display chart in full screen mode.\n         * Used in StockTools too.\n         * Based on default solutions in browsers.\n         */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        var addEvent = U.addEvent,\n            fireEvent = U.fireEvent;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedClasses = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            /**\n             * @name Highcharts.Chart#fullscreen\n             * @type {Highcharts.Fullscreen}\n             * @requires modules/full-screen\n             */\n            this.fullscreen = new Fullscreen(this);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles displaying chart's container in the fullscreen mode.\n         *\n         * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n         *\n         * @class\n         * @name Highcharts.Fullscreen\n         *\n         * @requires modules/exporting\n         */\n        var Fullscreen = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function Fullscreen(chart) {\n                    /**\n                     * Chart managed by the fullscreen controller.\n                     * @name Highcharts.Fullscreen#chart\n                     * @type {Highcharts.Chart}\n                     */\n                    this.chart = chart;\n                /**\n                 * The flag is set to `true` when the chart is displayed in\n                 * the fullscreen mode.\n                 *\n                 * @name Highcharts.Fullscreen#isOpen\n                 * @type {boolean|undefined}\n                 * @since 8.0.1\n                 */\n                this.isOpen = false;\n                var container = chart.renderTo;\n                // Hold event and methods available only for a current browser.\n                if (!this.browserProps) {\n                    if (typeof container.requestFullscreen === 'function') {\n                        this.browserProps = {\n                            fullscreenChange: 'fullscreenchange',\n                            requestFullscreen: 'requestFullscreen',\n                            exitFullscreen: 'exitFullscreen'\n                        };\n                    }\n                    else if (container.mozRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'mozfullscreenchange',\n                            requestFullscreen: 'mozRequestFullScreen',\n                            exitFullscreen: 'mozCancelFullScreen'\n                        };\n                    }\n                    else if (container.webkitRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'webkitfullscreenchange',\n                            requestFullscreen: 'webkitRequestFullScreen',\n                            exitFullscreen: 'webkitExitFullscreen'\n                        };\n                    }\n                    else if (container.msRequestFullscreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'MSFullscreenChange',\n                            requestFullscreen: 'msRequestFullscreen',\n                            exitFullscreen: 'msExitFullscreen'\n                        };\n                    }\n                }\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Prepares the chart class to support fullscreen.\n             *\n             * @param {typeof_Highcharts.Chart} ChartClass\n             * The chart class to decorate with fullscreen support.\n             */\n            Fullscreen.compose = function (ChartClass) {\n                if (composedClasses.indexOf(ChartClass) === -1) {\n                    composedClasses.push(ChartClass);\n                    // Initialize fullscreen\n                    addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Stops displaying the chart in fullscreen mode.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function    Highcharts.Fullscreen#close\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.close = function () {\n                var fullscreen = this,\n                    chart = fullscreen.chart,\n                    optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenClose', null, function () {\n                    // Don't fire exitFullscreen() when user exited\n                    // using 'Escape' button.\n                    if (fullscreen.isOpen &&\n                        fullscreen.browserProps &&\n                        chart.container.ownerDocument instanceof Document) {\n                        chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n                    }\n                    // Unbind event as it's necessary only before exiting\n                    // from fullscreen.\n                    if (fullscreen.unbindFullscreenEvent) {\n                        fullscreen.unbindFullscreenEvent = fullscreen\n                            .unbindFullscreenEvent();\n                    }\n                    chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n                    fullscreen.origWidth = void 0;\n                    fullscreen.origHeight = void 0;\n                    optionsChart.width = fullscreen.origWidthOption;\n                    optionsChart.height = fullscreen.origHeightOption;\n                    fullscreen.origWidthOption = void 0;\n                    fullscreen.origHeightOption = void 0;\n                    fullscreen.isOpen = false;\n                    fullscreen.setButtonText();\n                });\n            };\n            /**\n             * Displays the chart in fullscreen mode.\n             * When fired customly by user before exporting context button is created,\n             * button's text will not be replaced - it's on the user side.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function Highcharts.Fullscreen#open\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.open = function () {\n                var fullscreen = this,\n                    chart = fullscreen.chart,\n                    optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenOpen', null, function () {\n                    if (optionsChart) {\n                        fullscreen.origWidthOption = optionsChart.width;\n                        fullscreen.origHeightOption = optionsChart.height;\n                    }\n                    fullscreen.origWidth = chart.chartWidth;\n                    fullscreen.origHeight = chart.chartHeight;\n                    // Handle exitFullscreen() method when user clicks 'Escape' button.\n                    if (fullscreen.browserProps) {\n                        var unbindChange_1 = addEvent(chart.container.ownerDocument, // chart's document\n                            fullscreen.browserProps.fullscreenChange,\n                            function () {\n                                // Handle lack of async of browser's\n                                // fullScreenChange event.\n                                if (fullscreen.isOpen) {\n                                    fullscreen.isOpen = false;\n                                fullscreen.close();\n                            }\n                            else {\n                                chart.setSize(null, null, false);\n                                fullscreen.isOpen = true;\n                                fullscreen.setButtonText();\n                            }\n                        });\n                        var unbindDestroy_1 = addEvent(chart, 'destroy',\n                            unbindChange_1);\n                        fullscreen.unbindFullscreenEvent = function () {\n                            unbindChange_1();\n                            unbindDestroy_1();\n                        };\n                        var promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                        if (promise) {\n                            // No dot notation because of IE8 compatibility\n                            promise['catch'](function () {\n                                alert(// eslint-disable-line no-alert\n                                'Full screen is not supported inside a frame.');\n                            });\n                        }\n                    }\n                });\n            };\n            /**\n             * Replaces the exporting context button's text when toogling the\n             * fullscreen mode.\n             *\n             * @private\n             *\n             * @since 8.0.1\n             *\n             * @requires modules/full-screen\n             */\n            Fullscreen.prototype.setButtonText = function () {\n                var chart = this.chart,\n                    exportDivElements = chart.exportDivElements,\n                    exportingOptions = chart.options.exporting,\n                    menuItems = (exportingOptions &&\n                        exportingOptions.buttons &&\n                        exportingOptions.buttons.contextButton.menuItems),\n                    lang = chart.options.lang;\n                if (exportingOptions &&\n                    exportingOptions.menuItemDefinitions &&\n                    lang &&\n                    lang.exitFullscreen &&\n                    lang.viewFullscreen &&\n                    menuItems &&\n                    exportDivElements) {\n                    var exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n                    if (exportDivElement) {\n                        AST.setElementHTML(exportDivElement, !this.isOpen ?\n                            (exportingOptions.menuItemDefinitions.viewFullscreen\n                                .text ||\n                                lang.viewFullscreen) : lang.exitFullscreen);\n                    }\n                }\n            };\n            /**\n             * Toggles displaying the chart in fullscreen mode.\n             * By default, when the exporting module is enabled, a context button with\n             * a drop down menu in the upper right corner accesses this function.\n             * Exporting module required.\n             *\n             * @since 8.0.1\n             *\n             * @sample      highcharts/members/chart-togglefullscreen/\n             *              Toggle fullscreen mode from a HTML button\n             *\n             * @function Highcharts.Fullscreen#toggle\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.toggle = function () {\n                var fullscreen = this;\n                if (!fullscreen.isOpen) {\n                    fullscreen.open();\n                }\n                else {\n                    fullscreen.close();\n                }\n            };\n            return Fullscreen;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired when closing the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenCloseCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired when opening the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenOpenCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        (''); // keeps doclets above separated from following code\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires when a fullscreen is closed through the context menu item,\n         * or a fullscreen is closed on the `Escape` button click,\n         * or the `Chart.fullscreen.close` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenCloseCallbackFunction}\n         * @since     10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenClose\n         */\n        /**\n         * Fires when a fullscreen is opened through the context menu item,\n         * or the `Chart.fullscreen.open` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenOpenCallbackFunction}\n         * @since     10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenOpen\n         */\n        (''); // keeps doclets above in transpiled file\n\n        return Fullscreen;\n    });\n    _registerModule(_modules, 'Core/HttpUtilities.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (G, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Christer Vasseng, Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var doc = G.doc;\n        var createElement = U.createElement,\n            discardElement = U.discardElement,\n            merge = U.merge,\n            objectEach = U.objectEach;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Perform an Ajax call.\n         *\n         * @function Highcharts.ajax\n         *\n         * @param {Highcharts.AjaxSettingsObject} settings\n         *        The Ajax settings to use.\n         *\n         * @return {false|undefined}\n         *         Returns false, if error occured.\n         */\n        function ajax(settings) {\n            var headers = {\n                    json: 'application/json',\n                    xml: 'application/xml',\n                    text: 'text/plain',\n                    octet: 'application/octet-stream'\n                },\n                r = new XMLHttpRequest();\n            /**\n             * Private error handler.\n             * @private\n             * @param {XMLHttpRequest} xhr\n             * Internal request object.\n             * @param {string|Error} err\n             * Occured error.\n             */\n            function handleError(xhr, err) {\n                if (settings.error) {\n                    settings.error(xhr, err);\n                }\n                else {\n                    // @todo Maybe emit a highcharts error event here\n                }\n            }\n            if (!settings.url) {\n                return false;\n            }\n            r.open((settings.type || 'get').toUpperCase(), settings.url, true);\n            if (!settings.headers || !settings.headers['Content-Type']) {\n                r.setRequestHeader('Content-Type', headers[settings.dataType || 'json'] || headers.text);\n            }\n            objectEach(settings.headers, function (val, key) {\n                r.setRequestHeader(key, val);\n            });\n            if (settings.responseType) {\n                r.responseType = settings.responseType;\n            }\n            // @todo lacking timeout handling\n            r.onreadystatechange = function () {\n                var res;\n                if (r.readyState === 4) {\n                    if (r.status === 200) {\n                        if (settings.responseType !== 'blob') {\n                            res = r.responseText;\n                            if (settings.dataType === 'json') {\n                                try {\n                                    res = JSON.parse(res);\n                                }\n                                catch (e) {\n                                    if (e instanceof Error) {\n                                        return handleError(r, e);\n                                    }\n                                }\n                            }\n                        }\n                        return settings.success && settings.success(res, r);\n                    }\n                    handleError(r, r.responseText);\n                }\n            };\n            if (settings.data && typeof settings.data !== 'string') {\n                settings.data = JSON.stringify(settings.data);\n            }\n            r.send(settings.data);\n        }\n        /**\n         * Get a JSON resource over XHR, also supporting CORS without preflight.\n         *\n         * @function Highcharts.getJSON\n         * @param {string} url\n         *        The URL to load.\n         * @param {Function} success\n         *        The success callback. For error handling, use the `Highcharts.ajax`\n         *        function instead.\n         */\n        function getJSON(url, success) {\n            HttpUtilities.ajax({\n                url: url,\n                success: success,\n                dataType: 'json',\n                headers: {\n                    // Override the Content-Type to avoid preflight problems with CORS\n                    // in the Highcharts demos\n                    'Content-Type': 'text/plain'\n                }\n            });\n        }\n        /**\n         * The post utility\n         *\n         * @private\n         * @function Highcharts.post\n         *\n         * @param {string} url\n         * Post URL\n         *\n         * @param {Object} data\n         * Post data\n         *\n         * @param {Highcharts.Dictionary<string>} [formAttributes]\n         * Additional attributes for the post request\n         */\n        function post(url, data, formAttributes) {\n            // create the form\n            var form = createElement('form',\n                merge({\n                    method: 'post',\n                    action: url,\n                    enctype: 'multipart/form-data'\n                },\n                formAttributes), {\n                    display: 'none'\n                },\n                doc.body);\n            // add the data\n            objectEach(data, function (val, name) {\n                createElement('input', {\n                    type: 'hidden',\n                    name: name,\n                    value: val\n                }, void 0, form);\n            });\n            // submit\n            form.submit();\n            // clean up\n            discardElement(form);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var HttpUtilities = {\n                ajax: ajax,\n                getJSON: getJSON,\n                post: post\n            };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.AjaxSettingsObject\n         */ /**\n        * The payload to send.\n        *\n        * @name Highcharts.AjaxSettingsObject#data\n        * @type {string|Highcharts.Dictionary<any>|undefined}\n        */ /**\n        * The data type expected.\n        * @name Highcharts.AjaxSettingsObject#dataType\n        * @type {\"json\"|\"xml\"|\"text\"|\"octet\"|undefined}\n        */ /**\n        * Function to call on error.\n        * @name Highcharts.AjaxSettingsObject#error\n        * @type {Function|undefined}\n        */ /**\n        * The headers; keyed on header name.\n        * @name Highcharts.AjaxSettingsObject#headers\n        * @type {Highcharts.Dictionary<string>|undefined}\n        */ /**\n        * Function to call on success.\n        * @name Highcharts.AjaxSettingsObject#success\n        * @type {Function|undefined}\n        */ /**\n        * The HTTP method to use. For example GET or POST.\n        * @name Highcharts.AjaxSettingsObject#type\n        * @type {string|undefined}\n        */ /**\n        * The URL to call.\n        * @name Highcharts.AjaxSettingsObject#url\n        * @type {string}\n        */\n        (''); // keeps doclets above in JS file\n\n        return HttpUtilities;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Exporting.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Chart/ChartNavigationComposition.js'], _modules['Core/Defaults.js'], _modules['Extensions/Exporting/ExportingDefaults.js'], _modules['Extensions/Exporting/ExportingSymbols.js'], _modules['Extensions/Exporting/Fullscreen.js'], _modules['Core/Globals.js'], _modules['Core/HttpUtilities.js'], _modules['Core/Utilities.js']], function (AST, Chart, ChartNavigationComposition, D, ExportingDefaults, ExportingSymbols, Fullscreen, G, HU, U) {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var defaultOptions = D.defaultOptions,\n            setOptions = D.setOptions;\n        var doc = G.doc,\n            SVG_NS = G.SVG_NS,\n            win = G.win;\n        var addEvent = U.addEvent,\n            css = U.css,\n            createElement = U.createElement,\n            discardElement = U.discardElement,\n            extend = U.extend,\n            find = U.find,\n            fireEvent = U.fireEvent,\n            isObject = U.isObject,\n            merge = U.merge,\n            objectEach = U.objectEach,\n            pick = U.pick,\n            removeEvent = U.removeEvent,\n            uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var Exporting;\n        (function (Exporting) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedClasses = [];\n            // These CSS properties are not inlined. Remember camelCase.\n            var inlineDenylist = [\n                    /-/,\n                    /^(clipPath|cssText|d|height|width)$/,\n                    /^font$/,\n                    /[lL]ogical(Width|Height)$/,\n                    /^parentRule$/,\n                    /perspective/,\n                    /TapHighlightColor/,\n                    /^transition/,\n                    /^length$/,\n                    /^[0-9]+$/ // #17538\n                ];\n            // These ones are translated to attributes rather than styles\n            var inlineToAttributes = [\n                    'fill',\n                    'stroke',\n                    'strokeLinecap',\n                    'strokeLinejoin',\n                    'strokeWidth',\n                    'textAnchor',\n                    'x',\n                    'y'\n                ];\n            Exporting.inlineAllowlist = [];\n            var unstyledElements = [\n                    'clipPath',\n                    'defs',\n                    'desc'\n                ];\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            var printingChart;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Add the export button to the chart, with options.\n             *\n             * @private\n             * @function Highcharts.Chart#addButton\n             * @param {Highcharts.NavigationButtonOptions} options\n             * @requires modules/exporting\n             */\n            function addButton(options) {\n                var chart = this,\n                    renderer = chart.renderer,\n                    btnOptions = merge(chart.options.navigation.buttonOptions,\n                    options),\n                    onclick = btnOptions.onclick,\n                    menuItems = btnOptions.menuItems,\n                    symbolSize = btnOptions.symbolSize || 12;\n                var symbol;\n                if (!chart.btnCount) {\n                    chart.btnCount = 0;\n                }\n                // Keeps references to the button elements\n                if (!chart.exportDivElements) {\n                    chart.exportDivElements = [];\n                    chart.exportSVGElements = [];\n                }\n                if (btnOptions.enabled === false || !btnOptions.theme) {\n                    return;\n                }\n                var attr = btnOptions.theme;\n                var callback;\n                if (!chart.styledMode) {\n                    attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n                    attr.stroke = pick(attr.stroke, 'none');\n                }\n                if (onclick) {\n                    callback = function (e) {\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        onclick.call(chart, e);\n                    };\n                }\n                else if (menuItems) {\n                    callback = function (e) {\n                        // consistent with onclick call (#3495)\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        chart.contextMenu(button.menuClassName, menuItems, button.translateX, button.translateY, button.width, button.height, button);\n                        button.setState(2);\n                    };\n                }\n                if (btnOptions.text && btnOptions.symbol) {\n                    attr.paddingLeft = pick(attr.paddingLeft, 30);\n                }\n                else if (!btnOptions.text) {\n                    extend(attr, {\n                        width: btnOptions.width,\n                        height: btnOptions.height,\n                        padding: 0\n                    });\n                }\n                if (!chart.styledMode) {\n                    attr['stroke-linecap'] = 'round';\n                    attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n                    attr.stroke = pick(attr.stroke, 'none');\n                }\n                var button = renderer\n                        .button(btnOptions.text, 0, 0,\n                    callback,\n                    attr,\n                    void 0,\n                    void 0,\n                    void 0,\n                    void 0,\n                    btnOptions.useHTML)\n                        .addClass(options.className)\n                        .attr({\n                        title: pick(chart.options.lang[btnOptions._titleKey || btnOptions.titleKey], '')\n                    });\n                button.menuClassName = (options.menuClassName ||\n                    'highcharts-menu-' + chart.btnCount++);\n                if (btnOptions.symbol) {\n                    symbol = renderer\n                        .symbol(btnOptions.symbol, btnOptions.symbolX - (symbolSize / 2), btnOptions.symbolY - (symbolSize / 2), symbolSize, symbolSize\n                    // If symbol is an image, scale it (#7957)\n                    , {\n                        width: symbolSize,\n                        height: symbolSize\n                    })\n                        .addClass('highcharts-button-symbol')\n                        .attr({\n                        zIndex: 1\n                    })\n                        .add(button);\n                    if (!chart.styledMode) {\n                        symbol.attr({\n                            stroke: btnOptions.symbolStroke,\n                            fill: btnOptions.symbolFill,\n                            'stroke-width': btnOptions.symbolStrokeWidth || 1\n                        });\n                    }\n                }\n                button\n                    .add(chart.exportingGroup)\n                    .align(extend(btnOptions, {\n                    width: button.width,\n                    x: pick(btnOptions.x, chart.buttonOffset) // #1654\n                }), true, 'spacingBox');\n                chart.buttonOffset += ((button.width + btnOptions.buttonSpacing) *\n                    (btnOptions.align === 'right' ? -1 : 1));\n                chart.exportSVGElements.push(button, symbol);\n            }\n            /**\n             * Clena up after printing a chart.\n             *\n             * @function Highcharts#afterPrint\n             *\n             * @private\n             *\n             * @param {Highcharts.Chart} chart\n             *        Chart that was (or suppose to be) printed\n             *\n             * @emits Highcharts.Chart#event:afterPrint\n             */\n            function afterPrint() {\n                var chart = this;\n                if (!chart.printReverseInfo) {\n                    return void 0;\n                }\n                var _a = chart.printReverseInfo,\n                    childNodes = _a.childNodes,\n                    origDisplay = _a.origDisplay,\n                    resetParams = _a.resetParams;\n                // put the chart back in\n                chart.moveContainers(chart.renderTo);\n                // restore all body content\n                [].forEach.call(childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        node.style.display = (origDisplay[i] || '');\n                    }\n                });\n                chart.isPrinting = false;\n                // Reset printMaxWidth\n                if (resetParams) {\n                    chart.setSize.apply(chart, resetParams);\n                }\n                delete chart.printReverseInfo;\n                printingChart = void 0;\n                fireEvent(chart, 'afterPrint');\n            }\n            /**\n             * Prepare chart and document before printing a chart.\n             *\n             * @function Highcharts#beforePrint\n             *\n             * @private\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             */\n            function beforePrint() {\n                var chart = this,\n                    body = doc.body,\n                    printMaxWidth = chart.options.exporting.printMaxWidth,\n                    printReverseInfo = {\n                        childNodes: body.childNodes,\n                        origDisplay: [],\n                        resetParams: void 0\n                    };\n                chart.isPrinting = true;\n                chart.pointer.reset(null, 0);\n                fireEvent(chart, 'beforePrint');\n                // Handle printMaxWidth\n                var handleMaxWidth = printMaxWidth &&\n                        chart.chartWidth > printMaxWidth;\n                if (handleMaxWidth) {\n                    printReverseInfo.resetParams = [\n                        chart.options.chart.width,\n                        void 0,\n                        false\n                    ];\n                    chart.setSize(printMaxWidth, void 0, false);\n                }\n                // hide all body content\n                [].forEach.call(printReverseInfo.childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        printReverseInfo.origDisplay[i] = node.style.display;\n                        node.style.display = 'none';\n                    }\n                });\n                // pull out the chart\n                chart.moveContainers(body);\n                // Storage details for undo action after printing\n                chart.printReverseInfo = printReverseInfo;\n            }\n            /**\n             * @private\n             */\n            function chartCallback(chart) {\n                var composition = chart;\n                composition.renderExporting();\n                addEvent(chart, 'redraw', composition.renderExporting);\n                // Destroy the export elements at chart destroy\n                addEvent(chart, 'destroy', composition.destroyExport);\n                // Uncomment this to see a button directly below the chart, for quick\n                // testing of export\n                /*\n                let button, viewImage, viewSource;\n                if (!chart.renderer.forExport) {\n                    viewImage = function () {\n                        let div = doc.createElement('div');\n                        div.innerHTML = chart.getSVGForExport();\n                        chart.renderTo.parentNode.appendChild(div);\n                    };\n\n                    viewSource = function () {\n                        let pre = doc.createElement('pre');\n                        pre.innerHTML = chart.getSVGForExport()\n                            .replace(/</g, '\\n&lt;')\n                            .replace(/>/g, '&gt;');\n                        chart.renderTo.parentNode.appendChild(pre);\n                    };\n\n                    viewImage();\n\n                    // View SVG Image\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Image';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewImage;\n\n                    // View SVG Source\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Source';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewSource;\n                }\n                //*/\n            }\n            /**\n             * @private\n             */\n            function compose(ChartClass, SVGRendererClass) {\n                ExportingSymbols.compose(SVGRendererClass);\n                Fullscreen.compose(ChartClass);\n                if (composedClasses.indexOf(ChartClass) === -1) {\n                    composedClasses.push(ChartClass);\n                    var chartProto = ChartClass.prototype;\n                    chartProto.afterPrint = afterPrint;\n                    chartProto.exportChart = exportChart;\n                    chartProto.inlineStyles = inlineStyles;\n                    chartProto.print = print;\n                    chartProto.sanitizeSVG = sanitizeSVG;\n                    chartProto.getChartHTML = getChartHTML;\n                    chartProto.getSVG = getSVG;\n                    chartProto.getSVGForExport = getSVGForExport;\n                    chartProto.getFilename = getFilename;\n                    chartProto.moveContainers = moveContainers;\n                    chartProto.beforePrint = beforePrint;\n                    chartProto.contextMenu = contextMenu;\n                    chartProto.addButton = addButton;\n                    chartProto.destroyExport = destroyExport;\n                    chartProto.renderExporting = renderExporting;\n                    chartProto.callbacks.push(chartCallback);\n                    addEvent(ChartClass, 'init', onChartInit);\n                    if (G.isSafari) {\n                        G.win.matchMedia('print').addListener(function (mqlEvent) {\n                            if (!printingChart) {\n                                return void 0;\n                            }\n                            if (mqlEvent.matches) {\n                                printingChart.beforePrint();\n                            }\n                            else {\n                                printingChart.afterPrint();\n                            }\n                        });\n                    }\n                }\n                if (composedClasses.indexOf(setOptions) === -1) {\n                    composedClasses.push(setOptions);\n                    defaultOptions.exporting = merge(ExportingDefaults.exporting, defaultOptions.exporting);\n                    defaultOptions.lang = merge(ExportingDefaults.lang, defaultOptions.lang);\n                    // Buttons and menus are collected in a separate config option set\n                    // called 'navigation'. This can be extended later to add control\n                    // buttons like zoom and pan right click menus.\n                    defaultOptions.navigation = merge(ExportingDefaults.navigation, defaultOptions.navigation);\n                }\n            }\n            Exporting.compose = compose;\n            /**\n             * Display a popup menu for choosing the export type.\n             *\n             * @private\n             * @function Highcharts.Chart#contextMenu\n             * @param {string} className\n             *        An identifier for the menu.\n             * @param {Array<string|Highcharts.ExportingMenuObject>} items\n             *        A collection with text and onclicks for the items.\n             * @param {number} x\n             *        The x position of the opener button\n             * @param {number} y\n             *        The y position of the opener button\n             * @param {number} width\n             *        The width of the opener button\n             * @param {number} height\n             *        The height of the opener button\n             * @requires modules/exporting\n             */\n            function contextMenu(className, items, x, y, width, height, button) {\n                var chart = this,\n                    navOptions = chart.options.navigation,\n                    chartWidth = chart.chartWidth,\n                    chartHeight = chart.chartHeight,\n                    cacheName = 'cache-' + className,\n                    menuPadding = Math.max(width,\n                    height); // for mouse leave detection\n                    var innerMenu,\n                    menu = chart[cacheName];\n                // create the menu only the first time\n                if (!menu) {\n                    // create a HTML element above the SVG\n                    chart.exportContextMenu = chart[cacheName] = menu =\n                        createElement('div', {\n                            className: className\n                        }, {\n                            position: 'absolute',\n                            zIndex: 1000,\n                            padding: menuPadding + 'px',\n                            pointerEvents: 'auto'\n                        }, chart.fixedDiv || chart.container);\n                    innerMenu = createElement('ul', { className: 'highcharts-menu' }, {\n                        listStyle: 'none',\n                        margin: 0,\n                        padding: 0\n                    }, menu);\n                    // Presentational CSS\n                    if (!chart.styledMode) {\n                        css(innerMenu, extend({\n                            MozBoxShadow: '3px 3px 10px #888',\n                            WebkitBoxShadow: '3px 3px 10px #888',\n                            boxShadow: '3px 3px 10px #888'\n                        }, navOptions.menuStyle));\n                    }\n                    // hide on mouse out\n                    menu.hideMenu = function () {\n                        css(menu, { display: 'none' });\n                        if (button) {\n                            button.setState(0);\n                        }\n                        chart.openMenu = false;\n                        // #10361, #9998\n                        css(chart.renderTo, { overflow: 'hidden' });\n                        css(chart.container, { overflow: 'hidden' });\n                        U.clearTimeout(menu.hideTimer);\n                        fireEvent(chart, 'exportMenuHidden');\n                    };\n                    // Hide the menu some time after mouse leave (#1357)\n                    chart.exportEvents.push(addEvent(menu, 'mouseleave', function () {\n                        menu.hideTimer = win.setTimeout(menu.hideMenu, 500);\n                    }), addEvent(menu, 'mouseenter', function () {\n                        U.clearTimeout(menu.hideTimer);\n                    }), \n                    // Hide it on clicking or touching outside the menu (#2258,\n                    // #2335, #2407)\n                    addEvent(doc, 'mouseup', function (e) {\n                        if (!chart.pointer.inClass(e.target, className)) {\n                            menu.hideMenu();\n                        }\n                    }), addEvent(menu, 'click', function () {\n                        if (chart.openMenu) {\n                            menu.hideMenu();\n                        }\n                    }));\n                    // create the items\n                    items.forEach(function (item) {\n                        if (typeof item === 'string') {\n                            item = chart.options.exporting\n                                .menuItemDefinitions[item];\n                        }\n                        if (isObject(item, true)) {\n                            var element = void 0;\n                            if (item.separator) {\n                                element = createElement('hr', void 0, void 0, innerMenu);\n                            }\n                            else {\n                                // When chart initialized with the table, wrong button\n                                // text displayed, #14352.\n                                if (item.textKey === 'viewData' &&\n                                    chart.isDataTableVisible) {\n                                    item.textKey = 'hideData';\n                                }\n                                element = createElement('li', {\n                                    className: 'highcharts-menu-item',\n                                    onclick: function (e) {\n                                        if (e) { // IE7\n                                            e.stopPropagation();\n                                        }\n                                        menu.hideMenu();\n                                        if (item.onclick) {\n                                            item.onclick\n                                                .apply(chart, arguments);\n                                        }\n                                    }\n                                }, void 0, innerMenu);\n                                AST.setElementHTML(element, item.text ||\n                                    chart.options.lang[item.textKey]);\n                                if (!chart.styledMode) {\n                                    element.onmouseover = function () {\n                                        css(this, navOptions.menuItemHoverStyle);\n                                    };\n                                    element.onmouseout = function () {\n                                        css(this, navOptions.menuItemStyle);\n                                    };\n                                    css(element, extend({\n                                        cursor: 'pointer'\n                                    }, navOptions.menuItemStyle || {}));\n                                }\n                            }\n                            // Keep references to menu divs to be able to destroy them\n                            chart.exportDivElements.push(element);\n                        }\n                    });\n                    // Keep references to menu and innerMenu div to be able to destroy\n                    // them\n                    chart.exportDivElements.push(innerMenu, menu);\n                    chart.exportMenuWidth = menu.offsetWidth;\n                    chart.exportMenuHeight = menu.offsetHeight;\n                }\n                var menuStyle = { display: 'block' };\n                // if outside right, right align it\n                if (x + chart.exportMenuWidth > chartWidth) {\n                    menuStyle.right = (chartWidth - x - width - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.left = (x - menuPadding) + 'px';\n                }\n                // if outside bottom, bottom align it\n                if (y + height + chart.exportMenuHeight > chartHeight &&\n                    button.alignOptions.verticalAlign !== 'top') {\n                    menuStyle.bottom = (chartHeight - y - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.top = (y + height - menuPadding) + 'px';\n                }\n                css(menu, menuStyle);\n                // #10361, #9998\n                css(chart.renderTo, { overflow: '' });\n                css(chart.container, { overflow: '' });\n                chart.openMenu = true;\n                fireEvent(chart, 'exportMenuShown');\n            }\n            /**\n             * Destroy the export buttons.\n             * @private\n             * @function Highcharts.Chart#destroyExport\n             * @param {global.Event} [e]\n             * @requires modules/exporting\n             */\n            function destroyExport(e) {\n                var chart = e ? e.target : this,\n                    exportSVGElements = chart.exportSVGElements,\n                    exportDivElements = chart.exportDivElements,\n                    exportEvents = chart.exportEvents;\n                var cacheName;\n                // Destroy the extra buttons added\n                if (exportSVGElements) {\n                    exportSVGElements.forEach(function (elem, i) {\n                        // Destroy and null the svg elements\n                        if (elem) { // #1822\n                            elem.onclick = elem.ontouchstart = null;\n                            cacheName = 'cache-' + elem.menuClassName;\n                            if (chart[cacheName]) {\n                                delete chart[cacheName];\n                            }\n                            exportSVGElements[i] = elem.destroy();\n                        }\n                    });\n                    exportSVGElements.length = 0;\n                }\n                // Destroy the exporting group\n                if (chart.exportingGroup) {\n                    chart.exportingGroup.destroy();\n                    delete chart.exportingGroup;\n                }\n                // Destroy the divs for the menu\n                if (exportDivElements) {\n                    exportDivElements.forEach(function (elem, i) {\n                        if (elem) {\n                            // Remove the event handler\n                            U.clearTimeout(elem.hideTimer); // #5427\n                            removeEvent(elem, 'mouseleave');\n                            // Remove inline events\n                            // (chart.exportDivElements as any)[i] =\n                            exportDivElements[i] =\n                                elem.onmouseout =\n                                    elem.onmouseover =\n                                        elem.ontouchstart =\n                                            elem.onclick = null;\n                            // Destroy the div by moving to garbage bin\n                            discardElement(elem);\n                        }\n                    });\n                    exportDivElements.length = 0;\n                }\n                if (exportEvents) {\n                    exportEvents.forEach(function (unbind) {\n                        unbind();\n                    });\n                    exportEvents.length = 0;\n                }\n            }\n            /**\n             * Exporting module required. Submit an SVG version of the chart to a server\n             * along with some parameters for conversion.\n             *\n             * @sample highcharts/members/chart-exportchart/\n             *         Export with no options\n             * @sample highcharts/members/chart-exportchart-filename/\n             *         PDF type and custom filename\n             * @sample highcharts/members/chart-exportchart-custom-background/\n             *         Different chart background in export\n             * @sample stock/members/chart-exportchart/\n             *         Export with Highcharts Stock\n             *\n             * @function Highcharts.Chart#exportChart\n             *\n             * @param {Highcharts.ExportingOptions} exportingOptions\n             *        Exporting options in addition to those defined in\n             *        [exporting](https://api.highcharts.com/highcharts/exporting).\n             *\n             * @param {Highcharts.Options} chartOptions\n             *        Additional chart options for the exported chart. For example a\n             *        different background color can be added here, or `dataLabels` for\n             *        export only.\n             *\n             * @requires modules/exporting\n             */\n            function exportChart(exportingOptions, chartOptions) {\n                var svg = this.getSVGForExport(exportingOptions,\n                    chartOptions);\n                // merge the options\n                exportingOptions = merge(this.options.exporting, exportingOptions);\n                // do the post\n                HU.post(exportingOptions.url, {\n                    filename: exportingOptions.filename ?\n                        exportingOptions.filename.replace(/\\//g, '-') :\n                        this.getFilename(),\n                    type: exportingOptions.type,\n                    // IE8 fails to post undefined correctly, so use 0\n                    width: exportingOptions.width || 0,\n                    scale: exportingOptions.scale,\n                    svg: svg\n                }, exportingOptions.formAttributes);\n            }\n            /**\n             * Return the unfiltered innerHTML of the chart container. Used as hook for\n             * plugins. In styled mode, it also takes care of inlining CSS style rules.\n             *\n             * @see Chart#getSVG\n             *\n             * @function Highcharts.Chart#getChartHTML\n             *\n             * @return {string}\n             * The unfiltered SVG of the chart.\n             *\n             * @requires modules/exporting\n             */\n            function getChartHTML() {\n                if (this.styledMode) {\n                    this.inlineStyles();\n                }\n                return this.container.innerHTML;\n            }\n            /**\n             * Get the default file name used for exported charts. By default it creates\n             * a file name based on the chart title.\n             *\n             * @function Highcharts.Chart#getFilename\n             *\n             * @return {string} A file name without extension.\n             *\n             * @requires modules/exporting\n             */\n            function getFilename() {\n                var s = this.userOptions.title && this.userOptions.title.text;\n                var filename = this.options.exporting.filename;\n                if (filename) {\n                    return filename.replace(/\\//g, '-');\n                }\n                if (typeof s === 'string') {\n                    filename = s\n                        .toLowerCase()\n                        .replace(/<\\/?[^>]+(>|$)/g, '') // strip HTML tags\n                        .replace(/[\\s_]+/g, '-')\n                        .replace(/[^a-z0-9\\-]/g, '') // preserve only latin\n                        .replace(/^[\\-]+/g, '') // dashes in the start\n                        .replace(/[\\-]+/g, '-') // dashes in a row\n                        .substr(0, 24)\n                        .replace(/[\\-]+$/g, ''); // dashes in the end;\n                }\n                if (!filename || filename.length < 5) {\n                    filename = 'chart';\n                }\n                return filename;\n            }\n            /**\n             * Return an SVG representation of the chart.\n             *\n             * @sample highcharts/members/chart-getsvg/\n             *         View the SVG from a button\n             *\n             * @function Highcharts.Chart#getSVG\n             *\n             * @param {Highcharts.Options} [chartOptions]\n             *        Additional chart options for the generated SVG representation. For\n             *        collections like `xAxis`, `yAxis` or `series`, the additional\n             *        options is either merged in to the original item of the same\n             *        `id`, or to the first item if a common id is not found.\n             *\n             * @return {string}\n             *         The SVG representation of the rendered chart.\n             *\n             * @emits Highcharts.Chart#event:getSVG\n             *\n             * @requires modules/exporting\n             */\n            function getSVG(chartOptions) {\n                var chart = this;\n                var svg,\n                    seriesOptions, \n                    // Copy the options and add extra options\n                    options = merge(chart.options,\n                    chartOptions);\n                // Use userOptions to make the options chain in series right (#3881)\n                options.plotOptions = merge(chart.userOptions.plotOptions, chartOptions && chartOptions.plotOptions);\n                // ... and likewise with time, avoid that undefined time properties are\n                // merged over legacy global time options\n                options.time = merge(chart.userOptions.time, chartOptions && chartOptions.time);\n                // create a sandbox where a new chart will be generated\n                var sandbox = createElement('div',\n                    null, {\n                        position: 'absolute',\n                        top: '-9999em',\n                        width: chart.chartWidth + 'px',\n                        height: chart.chartHeight + 'px'\n                    },\n                    doc.body);\n                // get the source size\n                var cssWidth = chart.renderTo.style.width,\n                    cssHeight = chart.renderTo.style.height,\n                    sourceWidth = options.exporting.sourceWidth ||\n                        options.chart.width ||\n                        (/px$/.test(cssWidth) && parseInt(cssWidth, 10)) ||\n                        (options.isGantt ? 800 : 600),\n                    sourceHeight = options.exporting.sourceHeight ||\n                        options.chart.height ||\n                        (/px$/.test(cssHeight) && parseInt(cssHeight, 10)) ||\n                        400;\n                // override some options\n                extend(options.chart, {\n                    animation: false,\n                    renderTo: sandbox,\n                    forExport: true,\n                    renderer: 'SVGRenderer',\n                    width: sourceWidth,\n                    height: sourceHeight\n                });\n                options.exporting.enabled = false; // hide buttons in print\n                delete options.data; // #3004\n                // prepare for replicating the chart\n                options.series = [];\n                chart.series.forEach(function (serie) {\n                    seriesOptions = merge(serie.userOptions, {\n                        animation: false,\n                        enableMouseTracking: false,\n                        showCheckbox: false,\n                        visible: serie.visible\n                    });\n                    // Used for the navigator series that has its own option set\n                    if (!seriesOptions.isInternal) {\n                        options.series.push(seriesOptions);\n                    }\n                });\n                var colls = {};\n                chart.axes.forEach(function (axis) {\n                    // Assign an internal key to ensure a one-to-one mapping (#5924)\n                    if (!axis.userOptions.internalKey) { // #6444\n                        axis.userOptions.internalKey = uniqueKey();\n                    }\n                    if (!axis.options.isInternal) {\n                        if (!colls[axis.coll]) {\n                            colls[axis.coll] = true;\n                            options[axis.coll] = [];\n                        }\n                        options[axis.coll].push(merge(axis.userOptions, {\n                            visible: axis.visible\n                        }));\n                    }\n                });\n                // Generate the chart copy\n                var chartCopy = new chart.constructor(options,\n                    chart.callback);\n                // Axis options and series options  (#2022, #3900, #5982)\n                if (chartOptions) {\n                    ['xAxis', 'yAxis', 'series'].forEach(function (coll) {\n                        var collOptions = {};\n                        if (chartOptions[coll]) {\n                            collOptions[coll] = chartOptions[coll];\n                            chartCopy.update(collOptions);\n                        }\n                    });\n                }\n                // Reflect axis extremes in the export (#5924)\n                chart.axes.forEach(function (axis) {\n                    var axisCopy = find(chartCopy.axes,\n                        function (copy) {\n                            return copy.options.internalKey ===\n                                axis.userOptions.internalKey;\n                    }), extremes = axis.getExtremes(), userMin = extremes.userMin, userMax = extremes.userMax;\n                    if (axisCopy &&\n                        ((typeof userMin !== 'undefined' &&\n                            userMin !== axisCopy.min) || (typeof userMax !== 'undefined' &&\n                            userMax !== axisCopy.max))) {\n                        axisCopy.setExtremes(userMin, userMax, true, false);\n                    }\n                });\n                // Get the SVG from the container's innerHTML\n                svg = chartCopy.getChartHTML();\n                fireEvent(this, 'getSVG', { chartCopy: chartCopy });\n                svg = chart.sanitizeSVG(svg, options);\n                // free up memory\n                options = null;\n                chartCopy.destroy();\n                discardElement(sandbox);\n                return svg;\n            }\n            /**\n             * @private\n             * @function Highcharts.Chart#getSVGForExport\n             */\n            function getSVGForExport(options, chartOptions) {\n                var chartExportingOptions = this.options.exporting;\n                return this.getSVG(merge({ chart: { borderRadius: 0 } }, chartExportingOptions.chartOptions, chartOptions, {\n                    exporting: {\n                        sourceWidth: ((options && options.sourceWidth) ||\n                            chartExportingOptions.sourceWidth),\n                        sourceHeight: ((options && options.sourceHeight) ||\n                            chartExportingOptions.sourceHeight)\n                    }\n                }));\n            }\n            /**\n             * Make hyphenated property names out of camelCase\n             * @private\n             * @param {string} prop\n             * Property name in camelCase\n             * @return {string}\n             * Hyphenated property name\n             */\n            function hyphenate(prop) {\n                return prop.replace(/([A-Z])/g, function (a, b) {\n                    return '-' + b.toLowerCase();\n                });\n            }\n            /**\n             * Analyze inherited styles from stylesheets and add them inline\n             *\n             * @private\n             * @function Highcharts.Chart#inlineStyles\n             *\n             * @todo What are the border styles for text about? In general, text has a\n             *       lot of properties.\n             *\n             * @todo Make it work with IE9 and IE10.\n             *\n             * @requires modules/exporting\n             */\n            function inlineStyles() {\n                var denylist = inlineDenylist,\n                    allowlist = Exporting.inlineAllowlist, // For IE\n                    defaultStyles = {};\n                var dummySVG;\n                // Create an iframe where we read default styles without pollution from\n                // this body\n                var iframe = doc.createElement('iframe');\n                css(iframe, {\n                    width: '1px',\n                    height: '1px',\n                    visibility: 'hidden'\n                });\n                doc.body.appendChild(iframe);\n                var iframeDoc = (iframe.contentWindow && iframe.contentWindow.document);\n                if (iframeDoc) {\n                    iframeDoc.body.appendChild(iframeDoc.createElementNS(SVG_NS, 'svg'));\n                }\n                /**\n                 * Call this on all elements and recurse to children\n                 * @private\n                 * @param {Highcharts.HTMLDOMElement} node\n                 *        Element child\n                     */\n                function recurse(node) {\n                    var filteredStyles = {};\n                    var styles,\n                        parentStyles,\n                        dummy,\n                        denylisted,\n                        allowlisted,\n                        i;\n                    /**\n                     * Check computed styles and whether they are in the allow/denylist\n                     * for styles or atttributes.\n                     * @private\n                     * @param {string} val\n                     *        Style value\n                     * @param {string} prop\n                     *        Style property name\n                             */\n                    function filterStyles(val, prop) {\n                        // Check against allowlist & denylist\n                        denylisted = allowlisted = false;\n                        if (allowlist.length) {\n                            // Styled mode in IE has a allowlist instead. Exclude all\n                            // props not in this list.\n                            i = allowlist.length;\n                            while (i-- && !allowlisted) {\n                                allowlisted = allowlist[i].test(prop);\n                            }\n                            denylisted = !allowlisted;\n                        }\n                        // Explicitly remove empty transforms\n                        if (prop === 'transform' && val === 'none') {\n                            denylisted = true;\n                        }\n                        i = denylist.length;\n                        while (i-- && !denylisted) {\n                            denylisted = (denylist[i].test(prop) ||\n                                typeof val === 'function');\n                        }\n                        if (!denylisted) {\n                            // If parent node has the same style, it gets inherited, no\n                            // need to inline it. Top-level props should be diffed\n                            // against parent (#7687).\n                            if ((parentStyles[prop] !== val ||\n                                node.nodeName === 'svg') &&\n                                defaultStyles[node.nodeName][prop] !== val) {\n                                // Attributes\n                                if (!inlineToAttributes ||\n                                    inlineToAttributes.indexOf(prop) !== -1) {\n                                    if (val) {\n                                        node.setAttribute(hyphenate(prop), val);\n                                    }\n                                    // Styles\n                                }\n                                else {\n                                    filteredStyles[prop] = val;\n                                }\n                            }\n                        }\n                    }\n                    if (iframeDoc &&\n                        node.nodeType === 1 &&\n                        unstyledElements.indexOf(node.nodeName) === -1) {\n                        styles = win.getComputedStyle(node, null);\n                        parentStyles = node.nodeName === 'svg' ?\n                            {} :\n                            win.getComputedStyle(node.parentNode, null);\n                        // Get default styles from the browser so that we don't have to\n                        // add these\n                        if (!defaultStyles[node.nodeName]) {\n                            /*\n                            if (!dummySVG) {\n                                dummySVG = doc.createElementNS(H.SVG_NS, 'svg');\n                                dummySVG.setAttribute('version', '1.1');\n                                doc.body.appendChild(dummySVG);\n                            }\n                            */\n                            dummySVG = iframeDoc.getElementsByTagName('svg')[0];\n                            dummy = iframeDoc.createElementNS(node.namespaceURI, node.nodeName);\n                            dummySVG.appendChild(dummy);\n                            // Get the defaults into a standard object (simple merge\n                            // won't do)\n                            var s = win.getComputedStyle(dummy,\n                                null),\n                                defaults = {};\n                            for (var key in s) {\n                                if (typeof s[key] === 'string' &&\n                                    !/^[0-9]+$/.test(key)) {\n                                    defaults[key] = s[key];\n                                }\n                            }\n                            defaultStyles[node.nodeName] = defaults;\n                            // Remove default fill, otherwise text disappears when\n                            // exported\n                            if (node.nodeName === 'text') {\n                                delete defaultStyles.text.fill;\n                            }\n                            dummySVG.removeChild(dummy);\n                        }\n                        // Loop through all styles and add them inline if they are ok\n                        for (var p in styles) {\n                            if (\n                            // Some browsers put lots of styles on the prototype...\n                            G.isFirefox ||\n                                G.isMS ||\n                                G.isSafari || // #16902\n                                // ... Chrome puts them on the instance\n                                Object.hasOwnProperty.call(styles, p)) {\n                                filterStyles(styles[p], p);\n                            }\n                        }\n                        // Apply styles\n                        css(node, filteredStyles);\n                        // Set default stroke width (needed at least for IE)\n                        if (node.nodeName === 'svg') {\n                            node.setAttribute('stroke-width', '1px');\n                        }\n                        if (node.nodeName === 'text') {\n                            return;\n                        }\n                        // Recurse\n                        [].forEach.call(node.children || node.childNodes, recurse);\n                    }\n                }\n                /**\n                 * Remove the dummy objects used to get defaults\n                 * @private\n                 */\n                function tearDown() {\n                    dummySVG.parentNode.removeChild(dummySVG);\n                    // Remove trash from DOM that stayed after each exporting\n                    iframe.parentNode.removeChild(iframe);\n                }\n                recurse(this.container.querySelector('svg'));\n                tearDown();\n            }\n            /**\n             * Move the chart container(s) to another div.\n             *\n             * @function Highcharts#moveContainers\n             *\n             * @private\n             *\n             * @param {Highcharts.HTMLDOMElement} moveTo\n             *        Move target\n             */\n            function moveContainers(moveTo) {\n                var chart = this;\n                (chart.fixedDiv ? // When scrollablePlotArea is active (#9533)\n                    [chart.fixedDiv, chart.scrollingContainer] :\n                    [chart.container]).forEach(function (div) {\n                    moveTo.appendChild(div);\n                });\n            }\n            /**\n             * Add update methods to handle chart.update and chart.exporting.update and\n             * chart.navigation.update. These must be added to the chart instance rather\n             * than the Chart prototype in order to use the chart instance inside the\n             * update function.\n             * @private\n             */\n            function onChartInit() {\n                var chart = this, \n                    /**\n                     * @private\n                     * @param {\"exporting\"|\"navigation\"} prop\n                     *        Property name in option root\n                     * @param {Highcharts.ExportingOptions|Highcharts.NavigationOptions} options\n                     *        Options to update\n                     * @param {boolean} [redraw=true]\n                     *        Whether to redraw\n                             */\n                    update = function (prop,\n                    options,\n                    redraw) {\n                        chart.isDirtyExporting = true;\n                    merge(true, chart.options[prop], options);\n                    if (pick(redraw, true)) {\n                        chart.redraw();\n                    }\n                };\n                chart.exporting = {\n                    update: function (options, redraw) {\n                        update('exporting', options, redraw);\n                    }\n                };\n                // Register update() method for navigation. Cannot be set the same way\n                // as for exporting, because navigation options are shared with bindings\n                // which has separate update() logic.\n                ChartNavigationComposition\n                    .compose(chart).navigation\n                    .addUpdate(function (options, redraw) {\n                    update('navigation', options, redraw);\n                });\n            }\n            /**\n             * Exporting module required. Clears away other elements in the page and\n             * prints the chart as it is displayed. By default, when the exporting\n             * module is enabled, a context button with a drop down menu in the upper\n             * right corner accesses this function.\n             *\n             * @sample highcharts/members/chart-print/\n             *         Print from a HTML button\n             *\n             * @function Highcharts.Chart#print\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             * @emits Highcharts.Chart#event:afterPrint\n             *\n             * @requires modules/exporting\n             */\n            function print() {\n                var chart = this;\n                if (chart.isPrinting) { // block the button while in printing mode\n                    return;\n                }\n                printingChart = chart;\n                if (!G.isSafari) {\n                    chart.beforePrint();\n                }\n                // Give the browser time to draw WebGL content, an issue that randomly\n                // appears (at least) in Chrome ~67 on the Mac (#8708).\n                setTimeout(function () {\n                    win.focus(); // #1510\n                    win.print();\n                    // allow the browser to prepare before reverting\n                    if (!G.isSafari) {\n                        setTimeout(function () {\n                            chart.afterPrint();\n                        }, 1000);\n                    }\n                }, 1);\n            }\n            /**\n             * Add the buttons on chart load\n             * @private\n             * @function Highcharts.Chart#renderExporting\n             * @requires modules/exporting\n             */\n            function renderExporting() {\n                var chart = this,\n                    exportingOptions = chart.options.exporting,\n                    buttons = exportingOptions.buttons,\n                    isDirty = chart.isDirtyExporting || !chart.exportSVGElements;\n                chart.buttonOffset = 0;\n                if (chart.isDirtyExporting) {\n                    chart.destroyExport();\n                }\n                if (isDirty && exportingOptions.enabled !== false) {\n                    chart.exportEvents = [];\n                    chart.exportingGroup = chart.exportingGroup ||\n                        chart.renderer.g('exporting-group').attr({\n                            zIndex: 3 // #4955, // #8392\n                        }).add();\n                    objectEach(buttons, function (button) {\n                        chart.addButton(button);\n                    });\n                    chart.isDirtyExporting = false;\n                }\n            }\n            /**\n             * Exporting module only. A collection of fixes on the produced SVG to\n             * account for expando properties, browser bugs, VML problems and other.\n             * Returns a cleaned SVG.\n             *\n             * @private\n             * @function Highcharts.Chart#sanitizeSVG\n             * @param {string} svg\n             *        SVG code to sanitize\n             * @param {Highcharts.Options} options\n             *        Chart options to apply\n             * @return {string}\n             *         Sanitized SVG code\n             * @requires modules/exporting\n             */\n            function sanitizeSVG(svg, options) {\n                var split = svg.indexOf('</svg>') + 6;\n                var html = svg.substr(split);\n                // Remove any HTML added to the container after the SVG (#894, #9087)\n                svg = svg.substr(0, split);\n                // Move HTML into a foreignObject\n                if (options && options.exporting && options.exporting.allowHTML) {\n                    if (html) {\n                        html = '<foreignObject x=\"0\" y=\"0\" ' +\n                            'width=\"' + options.chart.width + '\" ' +\n                            'height=\"' + options.chart.height + '\">' +\n                            '<body xmlns=\"http://www.w3.org/1999/xhtml\">' +\n                            // Some tags needs to be closed in xhtml (#13726)\n                            html.replace(/(<(?:img|br).*?(?=\\>))>/g, '$1 />') +\n                            '</body>' +\n                            '</foreignObject>';\n                        svg = svg.replace('</svg>', html + '</svg>');\n                    }\n                }\n                svg = svg\n                    .replace(/zIndex=\"[^\"]+\"/g, '')\n                    .replace(/symbolName=\"[^\"]+\"/g, '')\n                    .replace(/jQuery[0-9]+=\"[^\"]+\"/g, '')\n                    .replace(/url\\((\"|&quot;)(.*?)(\"|&quot;)\\;?\\)/g, 'url($2)')\n                    .replace(/url\\([^#]+#/g, 'url(#')\n                    .replace(/<svg /, '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" ')\n                    .replace(/ (|NS[0-9]+\\:)href=/g, ' xlink:href=') // #3567\n                    .replace(/\\n/, ' ')\n                    // Batik doesn't support rgba fills and strokes (#3095)\n                    .replace(/(fill|stroke)=\"rgba\\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\\.]+)\\)\"/g, // eslint-disable-line max-len\n                '$1=\"rgb($2)\" $1-opacity=\"$3\"')\n                    // Replace HTML entities, issue #347\n                    .replace(/&nbsp;/g, '\\u00A0') // no-break space\n                    .replace(/&shy;/g, '\\u00AD'); // soft hyphen\n                // Further sanitize for oldIE\n                if (this.ieSanitizeSVG) {\n                    svg = this.ieSanitizeSVG(svg);\n                }\n                return svg;\n            }\n        })(Exporting || (Exporting = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired after a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingAfterPrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired before a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingBeforePrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Function to call if the offline-exporting module fails to export a chart on\n         * the client side.\n         *\n         * @callback Highcharts.ExportingErrorCallbackFunction\n         *\n         * @param {Highcharts.ExportingOptions} options\n         *        The exporting options.\n         *\n         * @param {global.Error} err\n         *        The error from the module.\n         */\n        /**\n         * Definition for a menu item in the context menu.\n         *\n         * @interface Highcharts.ExportingMenuObject\n         */ /**\n        * The text for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#text\n        * @type {string|undefined}\n        */ /**\n        * If internationalization is required, the key to a language string.\n        *\n        * @name Highcharts.ExportingMenuObject#textKey\n        * @type {string|undefined}\n        */ /**\n        * The click handler for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#onclick\n        * @type {Highcharts.EventCallbackFunction<Highcharts.Chart>|undefined}\n        */ /**\n        * Indicates a separator line instead of an item.\n        *\n        * @name Highcharts.ExportingMenuObject#separator\n        * @type {boolean|undefined}\n        */\n        /**\n         * Possible MIME types for exporting.\n         *\n         * @typedef {\"image/png\"|\"image/jpeg\"|\"application/pdf\"|\"image/svg+xml\"} Highcharts.ExportingMimeTypeValue\n         */\n        (''); // keeps doclets above in transpiled file\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires after a chart is printed through the context menu item or the\n         * `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingAfterPrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.afterPrint\n         */\n        /**\n         * Fires before a chart is printed through the context menu item or\n         * the `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingBeforePrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.beforePrint\n         */\n        (''); // keeps doclets above in transpiled file\n\n        return Exporting;\n    });\n    _registerModule(_modules, 'masters/modules/exporting.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Exporting/Exporting.js'], _modules['Core/HttpUtilities.js']], function (Highcharts, Exporting, HttpUtilities) {\n\n        var G = Highcharts;\n        G.HttpUtilities = HttpUtilities;\n        G.ajax = HttpUtilities.ajax;\n        G.getJSON = HttpUtilities.getJSON;\n        G.post = HttpUtilities.post;\n        Exporting.compose(G.Chart, G.Renderer);\n\n    });\n}));"],"names":["factory","Highcharts","_registerModule","obj","path","args","fn","CustomEvent","window","dispatchEvent","detail","module","_modules","ChartNavigationComposition","compose","chart","Additions","this","updates","Additions.prototype.addUpdate","updateFn","navigation","push","Additions.prototype.update","options","redraw","_this","forEach","H","isTouchDevice","ExportingDefaults","exporting","type","url","pdfFont","normal","bold","bolditalic","italic","printMaxWidth","scale","buttons","contextButton","className","menuClassName","symbol","titleKey","menuItems","menuItemDefinitions","viewFullscreen","textKey","onclick","fullscreen","toggle","printChart","print","separator","downloadPNG","exportChart","downloadJPEG","downloadPDF","downloadSVG","lang","exitFullscreen","contextButtonTitle","buttonOptions","symbolSize","symbolX","symbolY","align","buttonSpacing","height","verticalAlign","width","symbolFill","symbolStroke","symbolStrokeWidth","theme","padding","menuStyle","border","concat","background","menuItemStyle","color","fontSize","transition","menuItemHoverStyle","ExportingSymbols","menu","x","y","arr","menuball","h","circle","modifiedClasses","SVGRendererClass","symbols","AST","U","onChartBeforeRender","Fullscreen","addEvent","fireEvent","composedClasses","isOpen","container","browserProps","fullscreenChange","requestFullscreen","Fullscreen.compose","ChartClass","Fullscreen.prototype.close","optionsChart","Document","Fullscreen.prototype.open","unbindChange_1","unbindDestroy_1","fullscreen.unbindFullscreenEvent","promise","alert","Fullscreen.prototype.setButtonText","exportDivElements","exportingOptions","exportDivElement","Fullscreen.prototype.toggle","close","open","G","doc","createElement","discardElement","merge","objectEach","HttpUtilities","ajax","settings","headers","json","xml","text","octet","r","XMLHttpRequest","toUpperCase","val","key","r.onreadystatechange","res","JSON","parse","e","Error","stringify","getJSON","success","dataType","post","data","formAttributes","form","method","action","enctype","display","name","value","Chart","D","HU","Exporting","defaultOptions","setOptions","SVG_NS","win","css","extend","find","isObject","pick","removeEvent","uniqueKey","addButton","renderer","btnOptions","c","callback","attr","button","title","zIndex","stroke","fill","afterPrint","printReverseInfo","_a","childNodes","origDisplay","resetParams","moveContainers","renderTo","call","node","i","isPrinting","setSize","printingChart","beforePrint","body","pointer","chartWidth","chartCallback","renderExporting","destroyExport","contextMenu","items","navOptions","chartHeight","cacheName","menuPadding","Math","max","position","pointerEvents","listStyle","margin","innerMenu","MozBoxShadow","WebkitBoxShadow","boxShadow","menu.hideMenu","overflow","item","element","arguments","element.onmouseover","element.onmouseout","cursor","exportSVGElements","exportEvents","elem","unbind","chartOptions","svg","getSVGForExport","filename","getFilename","getChartHTML","styledMode","inlineStyles","innerHTML","s","userOptions","getSVG","seriesOptions","sandbox","top","cssWidth","cssHeight","sourceWidth","test","parseInt","sourceHeight","animation","forExport","series","serie","enableMouseTracking","showCheckbox","visible","colls","axes","axis","chartCopy","constructor","coll","collOptions","axisCopy","copy","extremes","userMin","userMax","sanitizeSVG","chartExportingOptions","borderRadius","hyphenate","prop","a","b","dummySVG","denylist","inlineDenylist","allowlist","defaultStyles","iframe","visibility","iframeDoc","recurse","filteredStyles","unstyledElements","dummy","defaults","p","styles","Object","hasOwnProperty","t","denylisted","allowlisted","parentStyles","inlineToAttributes","querySelector","moveTo","fixedDiv","scrollingContainer","div","onChartInit","update","setTimeout","isDirty","split","html","ieSanitizeSVG","chartProto","mqlEvent","Renderer","exports","define"],"sourceRoot":""}