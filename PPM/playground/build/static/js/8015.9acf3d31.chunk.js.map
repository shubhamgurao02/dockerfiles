{"version":3,"file":"static/js/8015.9acf3d31.chunk.js","mappings":"mdAkkDA,UA9iDA,SAAcA,GAAQ,IAAD,+EACXC,GAA6BD,EAA7BC,WAAYC,GAAiBF,EAAjBE,aACpB,IAAwCC,EAAAA,EAAAA,UAAS,IAAG,iBAA7CC,GAAY,MAAEC,GAAe,MACpC,IAAwBF,EAAAA,EAAAA,UAAS,IAAG,iBAA7BG,GAAI,MAAEC,GAAO,MAKhBC,IAJO,IAAIC,MAGXC,GAAU,IAAID,MACCE,eACfC,GAASF,GAAQG,WAEjBH,IADU,IAAID,KAAKD,GAAMI,GAAQ,GACvB,IAAIH,KAAKD,GAAMI,GAAS,KAChCE,GAAUC,EAAAA,EAAAA,QAChB,IAA0BZ,EAAAA,EAAAA,UACmB,MAA5B,QAAf,EAAAD,GAAa,UAAE,aAAf,EAAiBc,uBACb,KACAC,IAAsB,QAAhB,EAACf,GAAa,UAAE,aAAf,EAAiBc,uBAAuBE,UACpD,iBAED,IANY,MAAU,OAM0Bf,EAAAA,EAAAA,UAAS,KAAG,iBAArDgB,GAAgB,MAAEC,GAAmB,MAC5C,IAA8CjB,EAAAA,EAAAA,UAAS,IAAG,iBAAnDkB,GAAe,MAAEC,GAAkB,MAC1C,IAAwCnB,EAAAA,EAAAA,UAAS,IAAG,iBAA7CoB,GAAY,MAAEC,GAAe,MACpC,IAA4CrB,EAAAA,EAAAA,UAAS,IAAG,iBAAjDsB,GAAc,MAAEC,GAAiB,MAExC,IAAgCvB,EAAAA,EAAAA,UAAS,IAAG,iBAArCwB,GAAQ,MAAEC,GAAW,MAC5B,IAAkCzB,EAAAA,EAAAA,UAAS,IAAG,iBAAvC0B,GAAS,MAAEC,GAAY,MAC9B,IAAkC3B,EAAAA,EAAAA,UAAS,IAAG,iBAAvC4B,GAAS,MAAEC,GAAY,MAC9B,IAAkC7B,EAAAA,EAAAA,UAAS,IAAG,iBAAvC8B,GAAS,MAAEC,GAAY,MAC9B,IAAkC/B,EAAAA,EAAAA,UAAS,IAAG,iBAAvCgC,GAAS,MAAEC,GAAY,MAC9B,IAAkCjC,EAAAA,EAAAA,UAAS,IAAG,iBAAvCkC,GAAS,MAAEC,GAAY,MAC9B,IAAkCnC,EAAAA,EAAAA,UAAS,IAAG,iBAAvCoC,GAAS,MAAEC,GAAY,MAC9B,IAAkCrC,EAAAA,EAAAA,UAAS,IAAG,iBAAvCsC,GAAS,MAAEC,GAAY,MAC9B,IAAkCvC,EAAAA,EAAAA,UAAS,IAAG,iBAAvCwC,GAAS,MAAEC,GAAY,MAC9B,IAAkCzC,EAAAA,EAAAA,UAAS,IAAG,iBAAvC0C,GAAS,MAAEC,GAAY,MAC9B,IAAoC3C,EAAAA,EAAAA,UAAS,IAAG,iBAAzC4C,GAAU,MAAEC,GAAa,MAChC,IAAoC7C,EAAAA,EAAAA,UAAS,IAAG,iBAAzC8C,GAAU,MAAEC,GAAa,MAChC,IAAoC/C,EAAAA,EAAAA,UAAS,IAAG,iBAA7BgD,IAAF,MAAe,OAChC,IAAoChD,EAAAA,EAAAA,UAAS,IAAG,iBAA7BiD,IAAF,MAAe,OAChC,IAAoCjD,EAAAA,EAAAA,UAAS,IAAG,iBAAzCkD,GAAU,MAAEC,GAAa,MAEhC,IAAoCnD,EAAAA,EAAAA,UAAS,IAAG,iBAAzCoD,GAAU,MAAEC,GAAa,MAChC,IAAwCrD,EAAAA,EAAAA,UAAS,IAAG,iBAA7CsD,GAAY,MAAEC,GAAe,MACpC,IAAsCvD,EAAAA,EAAAA,UAAS,IAAG,iBAA3CwD,GAAW,MAAEC,GAAc,MAClC,IAAsCzD,EAAAA,EAAAA,UAAS,IAAG,iBAA3C0D,GAAW,MAAEC,GAAc,MAClC,IAAgC3D,EAAAA,EAAAA,UAAS,IAAG,iBAArC4D,GAAQ,MAAEC,GAAW,MAC5B,IAA4C7D,EAAAA,EAAAA,UAAS,IAAG,iBAAjD8D,GAAc,MAAEC,GAAiB,MACxC,IAA8C/D,EAAAA,EAAAA,UAAS,IAAG,iBAAnDgE,GAAe,MAAEC,GAAkB,MAC1C,IAAgDjE,EAAAA,EAAAA,WAAS,GAAM,iBAAxDkE,GAAgB,MAAEC,GAAmB,MAE5C,IAA0CnE,EAAAA,EAAAA,UAAS,IAAG,iBAA/CoE,GAAa,MAAEC,GAAgB,OAEtCC,EAAAA,EAAAA,YAAU,WAAO,IAAD,MACRC,EACsC,OAA3B,QAAf,EAAAxE,GAAa,UAAE,aAAf,EAAiBc,wBAE6B,KAA3B,QAAf,EAAAd,GAAa,UAAE,aAAf,EAAiBc,uBADjB,GAGAC,IAAsB,QAAhB,EAACf,GAAa,UAAE,aAAf,EAAiBc,uBAAuBE,SACrDsD,GAAiBE,EACnB,GAAG,IAEH,IAIA,IAA4CvE,EAAAA,EAAAA,UAJf,CAC3BwE,eAAgB,KAGwD,iBAU1E,IAVqB,MAAmB,MAEb1D,MACxB2D,QAAQ,SACRC,IAAI,EAAG,SACPD,QAAQ,SAG4CE,OAAO,eAEhC3E,EAAAA,EAAAA,UAAS,CACrC4E,GAAI9E,GACJ+E,gBAAgC,QAAjB,EAAE9E,GAAa,UAAE,aAAf,EAAiB8E,gBAClC1E,KAAqB,QAAjB,EAAEJ,GAAa,UAAE,aAAf,EAAiBI,KACvB2E,cAA8B,QAAjB,EAAE/E,GAAa,UAAE,aAAf,EAAiBgF,QAChCC,gBAAgC,QAAjB,EAAEjF,GAAa,UAAE,aAAf,EAAiBkF,gBAClCC,oBAAoC,QAAjB,EAAEnF,GAAa,UAAE,aAAf,EAAiBoF,oBACtCC,UAA0B,QAAjB,EAAErF,GAAa,UAAE,aAAf,EAAiBqF,UAC5BC,MAAsB,QAAjB,EAAEtF,GAAa,UAAE,aAAf,EAAiBsF,MACxBC,OAAuB,QAAjB,EAAEvF,GAAa,UAAE,aAAf,EAAiBwF,eACzBC,sBAAsC,QAAjB,EAAEzF,GAAa,UAAE,aAAf,EAAiB0F,sBACxCC,kBAAkC,QAAjB,EAAE3F,GAAa,UAAE,aAAf,EAAiB4F,kBACpCC,gBAAgC,QAAjB,EAAE7F,GAAa,UAAE,aAAf,EAAiB8F,gBAClCC,qBAAqC,QAAjB,EAAE/F,GAAa,UAAE,aAAf,EAAiB+F,qBACvCC,MAAsB,QAAjB,EAAEhG,GAAa,UAAE,aAAf,EAAiBiG,MACxBC,KAAqB,QAAjB,EAAElG,GAAa,UAAE,aAAf,EAAiBmG,iBACvB9C,WAA2B,QAAjB,EAAErD,GAAa,UAAE,aAAf,EAAiBoG,UAC7BC,oBAAoC,QAAjB,EAAErG,GAAa,UAAE,aAAf,EAAiBsG,iBACtCC,MAAsB,QAAjB,EAAEvG,GAAa,UAAE,aAAf,EAAiBuG,MACxBC,IAAoB,QAAjB,EAAExG,GAAa,UAAE,aAAf,EAAiBwG,IACtBC,cAA8B,QAAjB,EAAEzG,GAAa,UAAE,aAAf,EAAiB0G,gBAChCC,QAAwB,QAAjB,EAAE3G,GAAa,UAAE,aAAf,EAAiB2G,QAC1BlC,eAA+B,QAAjB,EAAEzE,GAAa,UAAE,aAAf,EAAiB4G,cACjCC,kBAAkC,QAAjB,EAAE7G,GAAa,UAAE,aAAf,EAAiB8G,mBACpCC,eAA+B,QAAjB,EAAE/G,GAAa,UAAE,aAAf,EAAiBgH,iBACjCC,cAAmD,IAArB,QAAf,EAAAjH,GAAa,UAAE,aAAf,EAAiBkH,iBAA2B,EAAI,EAC/DC,MAC4C,OAA3B,QAAf,EAAAnH,GAAa,UAAE,aAAf,EAAiBc,uBACb,GACe,QADb,EACFd,GAAa,UAAE,aAAf,EAAiBc,sBACvBsG,eAA+B,QAAjB,EAAEpH,GAAa,UAAE,aAAf,EAAiBqH,aACjCC,eAA+B,QAAjB,EAAEtH,GAAa,UAAE,aAAf,EAAiBsH,eACjCC,eAA+B,QAAjB,EAAEvH,GAAa,UAAE,aAAf,EAAiBuH,eACjCC,cAA8B,QAAjB,EAAExH,GAAa,UAAE,aAAf,EAAiBwH,cAChCC,aAA6B,QAAjB,GAAEzH,GAAa,UAAE,cAAf,GAAiB0H,WAC/BC,kBAAuD,QAArB,QAAf,GAAA3H,GAAa,UAAE,cAAf,GAAiB4H,iBAA2B,EAAI,EACnEC,iBAAiC,QAAjB,GAAE7H,GAAa,UAAE,cAAf,GAAiB6H,iBACnCC,kBAAkC,QAAjB,GAAE9H,GAAa,UAAE,cAAf,GAAiB+H,gBACpCC,kBAAkC,QAAjB,GAAEhI,GAAa,UAAE,cAAf,GAAiBiI,eACpC,iBAvCKC,GAAO,MAAEC,GAAU,MAyCpBC,GAAe,SAACC,GACpB,MAA4BA,EAAEC,OAAtBzD,EAAE,EAAFA,GAAU0D,GAAF,EAAJC,KAAW,EAALD,OAClBJ,IAAW,SAACM,GACV,OAAO,kBAAKA,GAAI,cAAG5D,EAAK0D,GAC1B,GACF,EAUMG,GAA0B,SAACL,GAC/BF,IAAW,SAACM,GAAI,yBAAWA,GAAI,cAAG,gBAAkB,KAAG,GACzD,EAEME,GAA+B,SAACN,GACpCF,IAAW,SAACM,GAAI,yBAAWA,GAAI,cAAG,gBAAkB,KAAG,GACzD,EACMG,GAAyB,SAACP,GAC9BF,IAAW,SAACM,GAAI,yBAAWA,GAAI,cAAG,oBAAsB,KAAG,GAC7D,EAEMI,GAAyB,SAACR,GAC9BF,IAAW,SAACM,GAAI,yBAAWA,GAAI,cAAG,oBAAsB,KAAG,GAC7D,EA0DMK,GAAW,yCAAG,mGACZC,IAAM,CACVC,OAAQ,MACRC,IAAKrI,GAAO,qCAEXsI,MAAK,SAACC,GACL,IAAIC,EAASD,EAAIE,KAGjB3H,GAAY0H,GACZxH,GAAawH,GACbtH,GAAasH,GACbpH,GAAaoH,GACblH,GAAakH,GACbhH,GAAagH,GACb9G,GAAa8G,GACb5G,GAAa4G,GACb1G,GAAa0G,GACbxG,GAAawG,GACbtG,GAAcsG,GACdpG,GAAcoG,GACdnG,GAAcmG,GACdlG,GAAckG,GACdhG,GAAcgG,EAChB,IACCE,OAAM,SAACC,GAAW,IAAG,KAAD,sCACxB,kBA1BgB,oCAoGjBhF,EAAAA,EAAAA,YAAU,WA3JRwE,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,kCAEXsI,MAAK,SAACC,GACL,IAAIC,EAASD,EAAIE,KACjBhJ,GAAQ+I,EACV,IACCE,OAAM,SAACC,GAAW,IAIrBR,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,8CAEXsI,MAAK,SAACC,GACL,IAAIC,EAASD,EAAIE,KACjBnI,GAAoBkI,EACtB,IACCE,OAAM,SAACC,GAAW,IAIrBR,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,iDAEXsI,MAAK,SAACC,GACL,IAAIC,EAASD,EAAIE,KACjBjI,GAAmBgI,EACrB,IACCE,OAAM,SAACC,GAAW,IAIrBR,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,0CAEXsI,MAAK,SAACC,GACL,IAAIC,EAASD,EAAIE,KACjB/H,GAAgB8H,EAClB,IACCE,OAAM,SAACC,GAAW,IAwHrBT,KApHAC,IAAM,CACJE,IAAKrI,GAAO,8BACXsI,MAAK,SAACM,GACPlG,GAAckG,EAAKH,KACrB,IAgCAN,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,4CAEXsI,MAAK,SAACC,GACL,IAAIC,EAASD,EAAIE,KACjB7H,GAAkB4H,EACpB,IACCE,OAAM,SAACC,GAAW,IAIrBR,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,0CACXsI,MAAK,SAACC,GACP,IAAIM,EAAWN,EAAIE,KACnB7F,GAAgBiG,EAClB,IAIAV,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,0CACXsI,MAAK,SAACC,GACP,IAAIO,EAAUP,EAAIE,KAClB3F,GAAegG,EACjB,IAIAX,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,yCACXsI,MAAK,SAACC,GACP,IAAIQ,EAASR,EAAIE,KACjBzF,GAAe+F,EACjB,IAIAZ,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,sCACXsI,MAAK,SAACC,GACP,IAAIS,EAAQT,EAAIE,KAChBvF,GAAY8F,EACd,IAIAb,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,4CACXsI,MAAK,SAACC,GACP,IAAIU,EAAYV,EAAIE,KACpBrF,GAAkB6F,EACpB,IAIAd,IAAM,CACJC,OAAQ,MACRC,IAAKrI,GAAO,6CACXsI,MAAK,SAACC,GACP,IAAIW,EAAUX,EAAIE,KAClBnF,GAAmB4F,EACrB,GAqBF,GAAG,IAEH,IAsCMC,GAAe,WACnB5B,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAEuB,QAAS,IAAE,GAC9C,EAEMC,GAAe,WACnB9B,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAEnD,MAAO,IAAE,GAC5C,EAEM4E,GAAe,WACnB/B,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAElD,OAAQ,IAAE,GAC7C,EAEM4E,GAAe,WACnBhC,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAEhD,sBAAuB,IAAE,GAC5D,EAEM2E,GAAe,WACnBjC,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAE9C,kBAAmB,IAAE,GACxD,EAEM0E,GAAe,WACnBlC,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAE5C,gBAAiB,IAAE,GACtD,EAEMyE,GAAe,WACnBnC,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAE1C,qBAAsB,IAAE,GAC3D,EAEMwE,GAAe,WACnBpC,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAEzC,MAAO,IAAE,GAC5C,EAEMwE,GAAgB,WACpBrC,IAAW,SAACM,GAAI,yBAAWA,GAAI,IAAEvC,KAAM,IAAE,GAC3C,EAEA,OACE,4BACE,gBAAKuE,UAAU,YAAW,UACxB,iBAAKA,UAAU,YAAW,WACxB,gBAAKA,UAAU,cACf,gBAAKA,UAAU,WAAU,UACvB,wBAAI,YAEN,gBAAKA,UAAU,oBAGlBzK,GAAa0K,KAAI,SAACC,GAAI,uFACrB,gBAAKF,UAAU,gDAA+C,UAC5D,iBAAKA,UAAU,oBAAmB,WAChC,gBAAKA,UAAU,WAAU,UACvB,iBAAKA,UAAU,MAAK,WAClB,iBAAKA,UAAU,2BAA0B,WACvC,mBAAOG,QAAQ,WAAU,UAAC,kBACV,iBAAMH,UAAU,aAAY,SAAC,UAE7C,gBACEA,UAAU,YAIV,UAEA,kBACEI,KAAK,OACLJ,UAAU,wBACVjC,KAAK,WACL3D,GAAG,WACHiG,aAAcH,EAAKI,aACnBC,UAAQ,UAYd,iBAAKP,UAAU,2BAA0B,WACvC,mBAAOG,QAAQ,kBAAiB,UAAC,uBACV,iBAAMH,UAAU,aAAY,SAAC,UAEpD,oBAIEA,UAAU,OACVjC,KAAK,kBACL3D,GAAG,kBAGHoG,SAAU7C,GAAa,WAEvB,mBAAQG,MAAM,GAAE,SAAC,wBACjB,mBACEA,MAAO,IACP2C,SACsC,MAArB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiB8E,iBAAyB,IAAM,GACjD,SACF,SAGD,mBACEyD,MAAO,IACP2C,SACsC,MAArB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiB8E,iBAAyB,IAAM,GACjD,SACF,YAGD,mBACEyD,MAAO,IACP2C,SACsC,MAArB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiB8E,iBAAyB,IAAM,GACjD,SACF,oBAKL,iBAAK2F,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,OAAM,SAAC,UACtB,oBACEH,UAAU,GACVjC,KAAK,OACL3D,GAAG,OACHoG,SAAU7C,GAAa,WAEvB,mBAAQG,MAAM,GAAE,SAAC,uBAChBnI,GAAKsK,KAAI,SAACS,EAAMC,GAAK,eACpB,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKtG,KAAqB,QAAnB,EAAI7E,GAAa,UAAE,aAAf,EAAiBI,MACT,QADa,EAC5BJ,GAAa,UAAE,aAAf,EAAiBI,KACjB,GACL,SAEA+K,EAAKE,WARDD,EASE,WAIf,iBAAKX,UAAU,2BAA0B,WACvC,mBAAOG,QAAQ,mBAAkB,UAAC,uBACX,iBAAMH,UAAU,aAAY,SAAC,UAEpD,oBAIEA,UAAU,yBACVjC,KAAK,mBACL3D,GAAG,mBACHmG,SAAS,eACT,WAEA,mBAAQzC,MAAM,GAAE,SAAC,uBAChBtH,GAAiByJ,KAAI,SAACS,EAAMC,GAAK,eAChC,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKG,YAA4B,QAAnB,EAAItL,GAAa,UAAE,aAAf,EAAiBuL,gBAChB,QAD8B,EAC7CvL,GAAa,UAAE,aAAf,EAAiBuL,eACjB,GACL,SAEAJ,EAAKG,WARDF,EASE,WAIf,iBAAKX,UAAU,2BAA0B,WACvC,mBAAOG,QAAQ,gBAAe,UAAC,qBACV,iBAAMH,UAAU,aAAY,SAAC,UAElD,oBAIEA,UAAU,wBACV5F,GAAG,gBACH2D,KAAK,gBACLwC,SAAS,eACT,WAEA,mBAAQzC,MAAM,GAAE,SAAC,uBAChBlH,GAAaqJ,KAAI,SAACS,EAAMC,GAAK,eAC5B,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKE,YAA4B,QAAnB,EAAIrL,GAAa,UAAE,aAAf,EAAiBwL,cAChB,QAD4B,EAC3CxL,GAAa,UAAE,aAAf,EAAiBwL,aACjB,GACL,SAEAL,EAAKE,WARDD,EASE,gBAOnB,iBAAKX,UAAU,2BAA0B,WACvC,mBAAOG,QAAQ,eAAc,UAAC,wBACN,iBAAMH,UAAU,aAAY,SAAC,UAErD,oBAIEA,UAAU,oCACVjC,KAAK,eACL3D,GAAG,eACHmG,SAAS,eAETS,SAAS,WACTrL,KAAM,EAAE,WAER,mBAAQmI,MAAM,GAAE,SAAC,uBAehBpH,GAAgBuJ,KAAI,SAACS,EAAMC,GAAW,IAAD,EAIlC,EAHF,OACED,EAAKO,yBACU,QADW,EAC1B1L,GAAa,UAAE,aAAf,EAAiBmB,kBAGf,mBAEEoH,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKO,yBACU,QADW,EAC1B1L,GAAa,UAAE,aAAf,EAAiBmB,iBAClB,SAEAgK,EAAKO,uBAPDN,GAWF,IAEX,WAIJ,iBAAKX,UAAU,2BAA0B,WACvC,mBAAOG,QAAQ,gBAAe,UAAC,uBACR,iBAAMH,UAAU,aAAY,SAAC,UAEpD,gBAAKA,UAAU,0BAAyB,UACtC,SAAC,EAAAkB,wBAAuB,CACtBC,MAAOnK,GACPoJ,KAAK,OACLrC,KAAK,gBACL3D,GAAG,gBACH4F,UAAU,OACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBtK,SAAUA,GACVqH,YAAaA,GACbkD,YAAY,gCACZC,SAAU,SAAC5D,GACTF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZnH,cAAesD,EAAExD,IAAE,GAEvB,EACAsH,UAAU,EACVC,kBAC2B,OAAV,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBwI,MAAe,GAAoB,QAAlB,EAAGxI,GAAa,UAAE,aAAf,EAAiBwI,aAM9D,iBAAKiC,UAAU,2BAA0B,WACvC,mBAAOG,QAAQ,QAAO,UAAC,uBACA,iBAAMH,UAAU,aAAY,SAAC,UAEpD,gBAAKA,UAAU,aAAY,UACzB,SAAC,IAAU,CACTjC,KAAK,QACL3D,GAAG,QACH4F,UAAU,GACVS,SAA2B,MAAjB7G,GAAwB,GAAKA,GAEvCgI,QACmB,MAAjBhI,IAEqB,IAAjBA,GADA,GAGA,IAAI9D,KACF8D,GAAc5D,cACd4D,GAAc1D,WAAa,GAGnCsK,SAAU,SAAC5C,GACT/D,GAAiB+D,GACjBF,IAAW,SAACM,GAAI,yBACXA,GAAI,IACPtB,MAAOpG,IAAOsH,GAAGzD,OAAO,eAAa,GAEzC,EACA0H,gBAAgB,QAChBC,MAC4C,OAA3B,QAAf,EAAAvM,GAAa,UAAE,aAAf,EAAiBc,uBACb,GACAC,IAAsB,QAAhB,EAACf,GAAa,UAAE,aAAf,EAAiBc,uBAAuB8D,OAC7C,YAGR4H,WAAW,WACXC,UAAW,SAACpE,GACVA,EAAEqE,gBACJ,EACAC,qBAAmB,UAKzB,iBAAKlC,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,kBAAiB,SAAC,oBACjC,gBAAKH,UAAU,2BAA0B,UACvC,SAAC,EAAAkB,wBAAuB,CACtBC,MAAOjK,GACPkJ,KAAK,OACLrC,KAAK,kBACL3D,GAAG,kBACH4F,UAAU,OACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBpK,UAAWA,GACXqK,YAAY,gCACZI,kBACoC,OAAnB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiB4M,eACb,GACe,QADb,EACF5M,GAAa,UAAE,aAAf,EAAiB4M,cAEvBX,SAAU,SAAC5D,GACTF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZjH,gBAAiBoD,EAAExD,IAAE,GAEzB,EACAsH,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,sBAAqB,SAAC,wBACrC,gBAAKH,UAAU,yBAAwB,UACrC,SAAC,EAAAkB,wBAAuB,CACtBC,MAAO/J,GACPgJ,KAAK,OACLrC,KAAK,sBACL3D,GAAG,sBACH4F,UAAU,OACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBC,YAAY,gCACZI,kBACwC,OAAvB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiB6M,mBACb,GACe,QADb,EACF7M,GAAa,UAAE,aAAf,EAAiB6M,kBAGvB/D,YAAaA,GAEbmD,SAAU,SAAC5D,GACTF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZ/G,oBAAqBkD,EAAExD,IAAE,GAE7B,EACAsH,UAAU,UAKhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,YAAW,SAAC,cAC3B,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAa7K,GACb8K,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,YACL3D,GAAG,YACH4F,UAAU,aACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBK,kBAC8B,OAAb,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBgK,SACb,GACe,QADb,EACFhK,GAAa,UAAE,aAAf,EAAiBgK,QAEvBgC,YAAY,gCAEZiB,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZ7G,UAAWgD,EAAExD,IAAE,GAEnB,EACAqI,QAASnD,GACToC,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,QAAO,SAAC,SACvB,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAa3K,GACb4K,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,QACL3D,GAAG,QACH4F,UAAU,aACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBC,YAAY,gCACZI,kBAC8B,OAAb,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBmN,SACb,GACe,QADb,EACFnN,GAAa,UAAE,aAAf,EAAiBmN,QAKvBF,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZ5G,MAAO+C,EAAExD,IAAE,GAEf,EACAqI,QAASjD,GACTkC,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,SAAQ,SAAC,mBACxB,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAazK,GACb0K,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,SACL3D,GAAG,SACH4F,UAAU,aACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBK,kBACmC,OAAlB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBoN,cACb,GACe,QADb,EACFpN,GAAa,UAAE,aAAf,EAAiBoN,aAEvBpB,YAAY,gCAGZiB,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZ3G,OAAQ8C,EAAExD,IAAE,GAEhB,EACAqI,QAAShD,GACTiC,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,wBAAuB,SAAC,2BAGvC,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAavK,GACbwK,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,wBACL3D,GAAG,wBACH4F,UAAU,aAGVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBK,kBAC0C,OAAzB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBqN,qBACb,GACe,QADb,EACFrN,GAAa,UAAE,aAAf,EAAiBqN,oBAGvBrB,YAAY,gCACZiB,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZzG,sBAAuB4C,EAAExD,IAAE,GAE/B,EACAqI,QAAS/C,GACTgC,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,oBAAmB,SAAC,sBACnC,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAarK,GACbsK,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,oBACL3D,GAAG,oBACH4F,UAAU,aACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBK,kBACsC,OAArB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBsN,iBACb,GACe,QADb,EACFtN,GAAa,UAAE,aAAf,EAAiBsN,gBAEvBtB,YAAY,gCAIZiB,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZvG,kBAAmB0C,EAAExD,IAAE,GAE3B,EACAqI,QAAS9C,GACT+B,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,kBAAiB,SAAC,oBACjC,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAanK,GACboK,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,kBACL3D,GAAG,kBACH4F,UAAU,aACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBK,kBACoC,OAAnB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBuN,eACb,GACe,QADb,EACFvN,GAAa,UAAE,aAAf,EAAiBuN,cAEvBvB,YAAY,gCAIZiB,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZrG,gBAAiBwC,EAAExD,IAAE,GAEzB,EACAqI,QAAS7C,GACT8B,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,uBAAsB,SAAC,0BACtC,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAajK,GACbkK,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,uBACL3D,GAAG,uBACH4F,UAAU,aACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBK,kBACyC,OAAxB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBwN,oBACb,GACe,QADb,EACFxN,GAAa,UAAE,aAAf,EAAiBwN,mBAEvBxB,YAAY,gCAIZiB,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZnG,qBAAsBsC,EAAExD,IAAE,GAE9B,EACAqI,QAAS5C,GACT6B,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,QAAO,SAAC,SACvB,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAa/J,GACbgK,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,QACL3D,GAAG,QACH4F,UAAU,aACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBK,kBAC0B,OAAT,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiByN,KAAc,GAAoB,QAAlB,EAAGzN,GAAa,UAAE,aAAf,EAAiByN,IAKvDzB,YAAY,gCACZiB,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZlG,MAAOqC,EAAExD,IAAE,GAEf,EACAqI,QAAS3C,GACT4B,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,OAAM,SAAC,qBACtB,gBAAKH,UAAU,mDAAkD,UAC/D,SAAC,IACC,CACAqC,YAAa/K,GACbgL,YAAa5E,GACb6E,QAASlE,GACT+B,KAAK,OACLrC,KAAK,OACL3D,GAAG,OACH4F,UAAU,aACVoB,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OACpBK,kBACqC,OAApB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiB0N,gBACb,GACe,QADb,EACF1N,GAAa,UAAE,aAAf,EAAiB0N,eAEvB1B,YAAY,gCAIZiB,gBAAiB,SAAC5E,GAChBF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZhG,KAAMmC,EAAExD,IAAE,GAEd,EACAqI,QAAS1C,GACT2B,UAAU,UAIhB,iBAAK1B,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,aAAY,SAAC,aAE5B,oBACEpC,KAAK,aACLiC,UAAU,GACV5F,GAAG,aACHoG,SAAU,SAAC5C,GAAC,OAAKD,GAAaC,EAAE,EAAC,WAEjC,mBAAQE,MAAM,GAAE,SAAC,uBAChBlF,GAAWqH,KAAI,SAACS,EAAMC,GAAK,eAC1B,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKwC,eAA+B,QAAnB,EAAI3N,GAAa,UAAE,aAAf,EAAiB2N,cACnB,QAD+B,EAC9C3N,GAAa,UAAE,aAAf,EAAiB2N,aACjB,GACL,SAEAxC,EAAKwC,cARDvC,EASE,WAIf,iBAAKX,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,sBAAqB,SAAC,oBACrC,oBACEpC,KAAK,sBACLiC,UAAU,GACV5F,GAAG,sBACHoG,SAAU7C,GAAa,WAEvB,mBAAQG,MAAM,GAAE,SAAC,uBAChBhH,GAAemJ,KAAI,SAACS,EAAMC,GAAK,eAC9B,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKE,YAA4B,QAAnB,EAAIrL,GAAa,UAAE,aAAf,EAAiBuB,gBAChB,QAD8B,EAC7CvB,GAAa,UAAE,aAAf,EAAiBuB,eACjB,GACL,SAEA4J,EAAKE,WARDD,EASE,WAKf,iBAAKX,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,QAAO,SAAC,WACvB,kBACEC,KAAK,OACLrC,KAAK,QACLiC,UAAU,gBACV5F,GAAG,QACHiG,aAAcH,EAAKpE,MAEnBqH,UAAW,GACXnB,UAAW,SAACpE,GAAC,OACXA,EAAEwF,UACDxF,EAAEwF,SAAW,IAAMxF,EAAEwF,SAAW,KACpB,GAAbxF,EAAEwF,SACFxF,EAAEqE,gBAAgB,EAEpBzB,SAAU7C,SAGd,iBAAKqC,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,MAAK,SAAC,gBACrB,kBACEC,KAAK,OACLJ,UAAU,gBACV5F,GAAG,MAEH2D,KAAK,MACLsC,aAA6B,QAAjB,EAAE9K,GAAa,UAAE,aAAf,EAAiBwG,IAC/BoH,UAAW,GACXnB,UAAW,SAACpE,GAAC,OACXA,EAAEwF,UACDxF,EAAEwF,SAAW,IAAMxF,EAAEwF,SAAW,KACpB,GAAbxF,EAAEwF,SACFxF,EAAEqE,gBAAgB,EAEpBzB,SAAU7C,SAGd,iBAAKqC,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,gBAAe,SAAC,qBAC/B,kBACEC,KAAK,OACLrC,KAAK,gBACLiC,UAAU,gBACV5F,GAAG,gBACHiG,aAAcH,EAAKjE,gBACnBuE,SAAU7C,SAGd,iBAAKqC,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,UAAS,SAAC,aACzB,kBACEC,KAAK,OACLrC,KAAK,UACLiC,UAAU,gBACV5F,GAAG,UACHiG,aAAcH,EAAKhE,QAEnBmH,UAAQ,EACR7C,SAAU7C,SAId,iBAAKqC,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,iBAAgB,SAAC,oBAChC,iBAAKH,UAAU,MAAK,WAClB,gBAAKA,UAAU,YAAW,UACxB,kBACEI,KAAK,OACLrC,KAAK,iBACLiC,UAAU,eACV5F,GAAG,iBAEHmG,UAAQ,EACRzC,MAAOL,GAAQzD,eAAiBvE,QAIpC,gBAAKuK,UAAU,WAAU,UACvB,mBAAQA,UAAU,MAAK,UACrB,SAAC,MAAQ,CACPsD,QAAS,WACP3J,IAAoB,EACtB,eAOV,iBAAKqG,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,oBAAmB,SAAC,qCAGnC,oBACE/F,GAAG,oBACH4F,UAAU,GACVjC,KAAK,oBACL0C,SACyC,OAAxB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiB8G,oBACb,GACe,QADb,EACF9G,GAAa,UAAE,aAAf,EAAiB8G,mBAEvBmE,SAAU7C,GAAa,WAEvB,mBAAQG,MAAM,GAAE,SAAC,wBACjB,mBACEA,MAAO,EACP2C,SACyC,MAAxB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiB8G,oBACb,GACe,QAAf,EAAA9G,GAAa,UAAE,OAAf,EAAiB8G,mBACjB,IAEL,SACF,SAGD,mBACEyB,MAAO,EACP2C,SACyC,MAAxB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiB8G,oBACb,GACe,QAAf,EAAA9G,GAAa,UAAE,OAAf,EAAiB8G,mBACjB,IAGNmE,SAAU7C,GAAa,SACxB,cAML,iBAAKqC,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,iBAAgB,SAAC,mBAChC,gBAAKH,UAAU,6CAA4C,UACzD,SAAC,EAAAkB,wBAAuB,CACtBC,MAAOzI,GAIP0H,KAAK,OACLrC,KAAK,iBACL3D,GAAG,iBAMHgH,YAAa,CAAEC,KAAM,CAAC,KAAM,SAC5BC,oBAAoB,OAEpBjD,YAAaA,GACbkD,YAAY,4CAEZC,SAAU,SAAC5D,GACTF,IAAW,SAAC+D,GAAS,yBAChBA,GAAS,IACZnF,eAAgBsB,EAAExD,IAAE,GAExB,EACAuH,kBACmC,OAAlB,QAAf,EAAApM,GAAa,UAAE,aAAf,EAAiBgO,cACb,GACe,QADb,EACFhO,GAAa,UAAE,aAAf,EAAiBgO,aAGvB7B,UAAU,UAKhB,iBAAK1B,UAAU,WAAU,WACvB,kBAAOG,QAAQ,gBAAe,SAAC,cAC/B,iBAAKH,UAAU,+BAA8B,WAC3C,kBACEA,UAAU,oBACVI,KAAK,QACLtC,MAAM,IACNC,KAAK,gBACL3D,GAAG,mBAEHoJ,QAAkC,GAAzB/F,GAAQjB,cACjBgE,SAAUvC,MAGZ,kBAAO+B,UAAU,oBAAoBG,QAAQ,mBAAkB,SAAC,YAIlE,iBAAKH,UAAU,gCAA+B,WAC5C,kBACEA,UAAU,oBACVI,KAAK,QACLtC,MAAM,IACNC,KAAK,gBACL3D,GAAG,kBAEHoJ,QAAkC,GAAzB/F,GAAQjB,cACjBgE,SAAUtC,MAGZ,kBAAO8B,UAAU,oBAAoBG,QAAQ,kBAAiB,SAAC,iBAMjE,IACJ,IACH5K,GAAa0K,KAAI,SAACC,GAAI,iBACrB,iBAAKF,UAAU,gDAA+C,WAC5D,wBAAI,uBACJ,iBAAKA,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,eAAc,SAAC,wBAC9B,oBACE/F,GAAG,iBACH2D,KAAK,iBACLyC,SAAU7C,GAAa,WAEvB,mBAAQG,MAAM,GAAE,SAAC,wBACjB,mBACEA,MAAM,MACN2C,SACiC,aAAhB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiBkO,YAA2B,IAAM,GACnD,SACF,cAGD,mBACE3F,MAAM,MACN2C,SACiC,aAAhB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiBkO,YAA2B,IAAM,GACnD,SACF,cAGD,mBACE3F,MAAM,MACN2C,SAAyC,YAAhB,QAAf,EAAAlL,GAAa,UAAE,aAAf,EAAiBkO,YAA0B,IAAM,GAAG,SAC/D,mBAKL,iBAAKzD,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,iBAAgB,SAAC,mBAChC,oBAAQ/F,GAAG,iBAAiBoG,SAAU7C,GAAa,WACjD,mBAAQG,MAAM,GAAE,SAAC,uBAChBhF,GAAamH,KAAI,SAACS,EAAMC,GAAK,eAC5B,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAK5H,eAA+B,QAAnB,EAAIvD,GAAa,UAAE,aAAf,EAAiBuD,cACnB,QAD+B,EAC9CvD,GAAa,UAAE,aAAf,EAAiBuD,aACjB,GACL,SAEA4H,EAAK5H,cARD6H,EASE,WAKf,iBAAKX,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,iBAAgB,SAAC,mBAChC,oBAAQ/F,GAAG,iBAAiBoG,SAAU7C,GAAa,WACjD,mBAAQG,MAAM,GAAE,SAAC,uBAChB9E,GAAYiH,KAAI,SAACS,EAAMC,GAAK,eAC3B,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKgD,eAA+B,QAAnB,EAAInO,GAAa,UAAE,aAAf,EAAiBmO,cACnB,QAD+B,EAC9CnO,GAAa,UAAE,aAAf,EAAiBmO,aACjB,GACL,SAEAhD,EAAKgD,cARD/C,EASE,WAIf,iBAAKX,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,gBAAe,SAAC,kBAC/B,oBAAQ/F,GAAG,gBAAgBoG,SAAU7C,GAAa,WAChD,mBAAQG,MAAM,GAAE,SAAC,uBAChB5E,GAAY+G,KAAI,SAACS,EAAMC,GAAK,eAC3B,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKxH,cAA8B,QAAnB,EAAI3D,GAAa,UAAE,aAAf,EAAiB2D,aAClB,QAD6B,EAC5C3D,GAAa,UAAE,aAAf,EAAiB2D,YACjB,GACL,SAEAwH,EAAKxH,aARDyH,EASE,WAIf,iBAAKX,UAAU,YAAW,WACxB,kBAAOG,QAAQ,oBAAmB,SAAC,uBACnC,iBAAKH,UAAU,+BAA8B,WAC3C,kBACEA,UAAU,mBACVI,KAAK,QACLrC,KAAK,oBACLD,MAAM,IACN1D,GAAG,oBAEHoJ,QAAsC,GAA7B/F,GAAQP,kBACjBsD,SAAUrC,MAKZ,kBAAO6B,UAAU,mBAAmBG,QAAQ,MAAK,SAAC,YAIpD,iBAAKH,UAAU,+BAA8B,WAC3C,kBACEA,UAAU,mBACVI,KAAK,QACLrC,KAAK,oBACLD,MAAM,IACN1D,GAAG,oBAEHoJ,QAAsC,GAA7B/F,GAAQP,kBACjBsD,SAAUpC,MAKZ,kBAAO4B,UAAU,mBAAmBG,QAAQ,KAAI,SAAC,cAKrD,iBAAKH,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,oBAAmB,SAAC,kBACnC,kBACEC,KAAK,OACLJ,UAAU,eACV5F,GAAG,oBACHmH,aAAW,EACX8B,UAAQ,EACRhD,aAC0B,MAAxBH,EAAK5C,iBAEuB,IAAxB4C,EAAK5C,gBADL,GAGA4C,EAAK5C,gBAAgBqG,QAAQ,GAEnCnD,SAAU7C,SAGd,iBAAKqC,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,eAAc,SAAC,cAC9B,oBAAQ/F,GAAG,eAAeoG,SAAU7C,GAAa,WAC/C,mBAAQG,MAAM,GAAE,SAAC,uBAChB1E,GAAS6G,KAAI,SAACS,EAAMC,GAAK,eACxB,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKtH,WAA2B,QAAnB,EAAI7D,GAAa,UAAE,aAAf,EAAiBqO,aACf,QAD0B,EACzCrO,GAAa,UAAE,aAAf,EAAiBqO,YACjB,GACL,SAEAlD,EAAKtH,UARDuH,EASE,WAIf,iBAAKX,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,mBAAkB,SAAC,qBAClC,oBAAQ/F,GAAG,mBAAmBoG,SAAU7C,GAAa,WACnD,mBAAQG,MAAM,GAAE,SAAC,uBAChBxE,GAAe2G,KAAI,SAACS,EAAMC,GAAK,eAC9B,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKxH,cAA8B,QAAnB,EAAI3D,GAAa,UAAE,aAAf,EAAiB+D,gBAClB,QADgC,EAC/C/D,GAAa,UAAE,aAAf,EAAiB+D,eACjB,GACL,SAEAoH,EAAKxH,aARDyH,EASE,WAIf,iBAAKX,UAAU,2BAA0B,WACvC,kBAAOG,QAAQ,oBAAmB,SAAC,sBACnC,oBAAQ/F,GAAG,oBAAoBoG,SAAU7C,GAAa,WACpD,mBAAQG,MAAM,GAAE,SAAC,uBAChBtE,GAAgByG,KAAI,SAACS,EAAMC,GAAK,eAC/B,mBAEE7C,MAAO4C,EAAKtG,GACZqG,SACEC,EAAKlH,kBAAkC,QAAnB,EAAIjE,GAAa,UAAE,aAAf,EAAiBiE,iBACtB,QADqC,EACpDjE,GAAa,UAAE,aAAf,EAAiBiE,gBACjB,GACL,SAEAkH,EAAKlH,iBARDmH,EASE,cAMjB,iBAAKX,UAAU,sEAAqE,WAClF,oBACEA,UAAU,kBACVI,KAAK,SACLkD,QAAS,WAtrCnBhF,IAAM,CACJC,OAAQ,OACRC,IAAKrI,GAAO,iDACZyI,KAAM,CAACnB,MACNgB,MAAK,SAAUC,GACHA,EAAIE,KACjBiF,OAAOC,KAAK,gDAAD,OACuCxO,IAGpD,GA8qCU,EAAE,WAEF,SAAC,MAAO,IAAG,YAEb,oBACE0K,UAAU,oBACVsD,QAAS,YAlrCA,SAAC1F,GAMpB,IALA,IAAImG,EAAMC,SAASC,uBAAuB,UAKjCtD,EAAQ,EAAGA,EAAQoD,EAAIG,OAAQvD,IAAS,CAGU,IAAD,EAFxDoD,EAAIpD,GAAO7C,MAAQ,GAEfiG,EAAIpD,GAAOwD,UAAUC,SAAS,uBAGyC,QAFzE,EAAAL,EACEpD,GACA0D,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,UAAE,OAFzE,EAE2EC,QAE/E,CACF,CAoqCcC,EACF,EAAE,WAEF,SAAC,MAAO,IAAG,iBAGf,yBACG7K,IACC,SAAC,IAAsB,CACrBA,iBAAkBA,GAClBC,oBAAqBA,GACrBpE,aAAcA,GACdG,gBAAiBA,GACjB+H,QAASA,GACTC,WAAYA,KAGd,MAIJ,iCACE,SAAC,IAAqB,CAACpI,WAAYA,MACnC,SAAC,IAAyB,CAACA,WAAYA,MACvC,SAAC,IAAiC,CAACA,WAAYA,MAC/C,SAAC,IAAiB,CAChBA,WAAYA,GACZsD,WAAYA,UAGZ,MAId,C,iHC74CA,IAvKA,SAAoBvD,GAClB,IACEqE,EAWErE,EAXFqE,iBACAC,EAUEtE,EAVFsE,oBACA6K,EASEnP,EATFmP,cACAC,EAQEpP,EARFoP,eAIAC,GAIErP,EAPFqI,WAOErI,EANFsP,QAMEtP,EALFuP,WAKEvP,EAJFqP,aAGAG,GACExP,EAHFyP,qBAGEzP,EAFF0P,kBAEE1P,EADFwP,gBAGF,GAA0CrP,EAAAA,EAAAA,UAAS,MAAK,eAAjDwP,EAAa,KAAEC,EAAgB,KACtC,GAAkDzP,EAAAA,EAAAA,UAAS,IAAG,eAAvD0P,EAAiB,KAAEC,EAAoB,KAE9C,GAAwC3P,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA/B4P,GAAF,KAAiB,OAkCpCtL,EAAAA,EAAAA,YAAU,WACRuL,GACF,GAAG,CAACX,IAcJ,IAAMW,EAAc,SAAdA,IACJ,QAAoBC,IAAhBZ,GAA6C,OAAhBA,EAC/B,OAAO,KAGTO,GAAiB,WACf,OAAOM,OAAOlE,KAAKqD,GAAazE,KAAI,SAACuF,EAAGC,GACtC,OACE,2BAOGf,EAAYc,IACb,SAAC,MAAY,CACXlC,QAAS,kBACAoB,EAAYc,GACnBH,GACF,MAZMI,EAgBd,GACF,GACF,EAEMC,GAAMC,EAAAA,EAAAA,QAAO,IACnB,OACE,0BACE,UAAC,KAAM,CACLC,UAAU,SACVC,SAAS,SACTlQ,KAAK,KACLmQ,QAASpM,EACTqM,QAAS,WACPpM,GAAoB,EACtB,EAAE,WAEF,SAAC,KAAY,CAACqG,UAAU,QAAQgG,MAAO,CAAEC,OAAQ,cAAe,UAC9D,SAAC,KAAW,WACV,iBAAMjG,UAAU,OAAM,SAAC,wBAG3B,UAAC,KAAU,WACRkF,IACC,iBAAKlF,UAAU,kBAAiB,WAC9B,SAAC,MAAa,IAAG,IAAEkF,MAGvB,iBAAKlF,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,sBAAqB,WAClC,gBAAKA,UAAU,WAAU,UACvB,gBACEA,UAAU,YACV0F,IAAK,SAAC3B,GACJ2B,EAAIQ,QAAQ,GAAKnC,CACnB,EAAE,UAEF,kBACE/D,UAAU,YACVI,KAAK,QACLhG,GAAG,iBACH2D,KAAK,iBACLwD,YAAY,cACZf,SAAU,SAAC5C,GACT4G,EAAc5G,EAChB,SAIN,oBACEwC,KAAK,SACLJ,UAAU,wBACVsD,QAAS,YA3HJ,WACjB,IAAM6C,EAAaT,EAAIQ,QAAQ,GAAGE,cAAc,SAC1CC,EAAQF,EAAWrI,MAAMwI,OAE1BD,EA9BT,SAAsBA,GAGpB,MADmB,6BACDE,KAAKF,EACzB,CAkCSG,CAAaH,IAQlBjB,GAAgB,SAACpH,GAAI,yBAAWA,GAAI,cAAGqI,EAAQA,GAAK,IACpDxB,GAAe,SAAC7G,GAAI,yBAAWA,GAAI,cAAGqI,EAAQA,GAAK,IAEnD5B,IACAY,IACAc,EAAWrI,MAAQ,KAZjBqH,EAAqB,+BACrBsB,YAAW,WACTtB,EAAqB,GACvB,GAAG,OAXHA,EAAqB,wBACrBsB,YAAW,WACTtB,EAAqB,GACvB,GAAG,KAkBP,CAkGgBuB,EACF,EAAE,WAEF,cAAG1G,UAAU,aAAa,cAAY,UACtC,SAAC,MAAoB,IAAG,cAI5B,gBAAKA,UAAU,MAAK,SAAEgF,cAalC,C,+HClDA,IAzHA,SAAuB3P,GACrB,IACEsR,EAMEtR,EANFsR,YACAC,EAKEvR,EALFuR,eACAC,EAIExR,EAJFwR,cACAC,EAGEzR,EAHFyR,UACAC,EAEE1R,EAFF0R,WACAtJ,EACEpI,EADFoI,QAGF,GAAwCjI,EAAAA,EAAAA,UAAS,MAAK,eAA/CwR,EAAY,KAAEC,EAAe,KACpC,GAAkDzR,EAAAA,EAAAA,WAAS,GAAM,eAA1D0P,EAAiB,KAAEC,EAAoB,KAExCuB,EAAU,yCAAG,mFACiB,KAAtBQ,EAAAA,EAAAA,GAAiBxB,GAEnB,CAAD,eACoB,OAA3BP,GAAqB,GAAM,0CAIvB2B,IAAY,KAAD,EACjBzB,IACArB,SAASmD,eAAe,YAAYrJ,MAAQ,GAAG,2CAChD,kBAXe,oCAahBhE,EAAAA,EAAAA,YAAU,WACRuL,GACF,GAAG,CAAC0B,IAEJ,IAAM1B,EAAc,SAAdA,IACJ4B,GAAgB,WACd,OAAO1B,OAAOlE,KAAK0F,GAAY9G,KAAI,SAACuF,EAAGC,GACrC,OACE,4BACE,SAAC,MAAY,CACXQ,OAAQ,UACR3C,QAAS,kBACAyD,EAAWvB,GAClBH,GACF,IAED0B,EAAWvB,KARJC,EAWd,GACF,GACF,EAEMC,GAAMC,EAAAA,EAAAA,QAAO,IAEnB,OACE,0BACE,UAAC,KAAM,CACLC,UAAU,SACVC,SAAS,SACTlQ,KAAK,KACLmQ,QAASa,EACTZ,QAAS,WACPa,GAAe,EACjB,EAAE,WAEF,SAAC,KAAY,CAAC5G,UAAU,GAAGgG,MAAO,CAAEC,OAAQ,cAAe,UACzD,SAAC,KAAW,WACV,iBAAMjG,UAAU,GAAE,SAAC,qBAGvB,UAAC,KAAU,YACc,IAAtBkF,GACC,iBAAKlF,UAAU,kBAAiB,UAC7B,KACD,SAAC,MAAa,IAAG,6BAGnB,IAGF,iBAAKA,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,sBAAqB,WAClC,gBACEA,UAAU,qBACV0F,IAAK,SAAC3B,GACJ2B,EAAIQ,QAAQ,GAAKnC,CACnB,EAAE,UAEF,kBACE/D,UAAU,YACVI,KAAK,OACLhG,GAAG,WACH2D,KAAK,WACLwD,YAAY,WACZf,SAAU,SAAC5C,GACTiJ,EAAcjJ,EAChB,EACAoE,UAAW,SAACoF,GACQ,SAAdA,EAAMC,MAAoB5J,EAAQ6J,UACpCF,EAAMnF,gBACV,EACAoB,UAAQ,OAIZ,oBACEjD,KAAK,SACLJ,UAAU,wBACVsD,QAAS,WACPoD,GACF,EAAE,WAEF,cAAG1G,UAAU,aAAa,cAAY,UACtC,SAAC,MAAoB,IAAG,cAG5B,gBAAKA,UAAU,MAAK,SAAEgH,cAMlC,C","sources":["views/Customer/Edit.js","views/Customer/EmailPopUP.js","views/DeliveryComponent/PONumberPopup.js"],"sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { VscSave } from \"react-icons/vsc\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\nimport { environment } from \"../../environments/environment\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\nimport { ImCross } from \"react-icons/im\";\nimport CustomersDivisionEdit from \"./CustomersDivisionEdit\";\nimport CustomersStakeholdersEdit from \"./CustomersStakeholdersEdit\";\nimport CustomersInternalStakeholdersEdit from \"./CustomersInternalStakeholdersEdit\";\nimport CustomerRolesEdit from \"./CustomerRolesEdit\";\nimport { MdAddBox } from \"react-icons/md\";\nimport { BiPencil } from \"react-icons/bi\";\nimport RiskAutoComplete from \"../ProjectComponent/RiskAutocomplete\";\nimport EmailPopUp from \"./EmailPopUP\";\nimport PONumberPopup from \"../DeliveryComponent/PONumberPopup\";\nimport CustomerEmailEditPopup from \"./CustomerEmailEditPopup\";\n\nfunction Edit(props) {\n  const { customerId, customerData } = props;\n  const [dispalyEmail, setDisplayEmail] = useState([]);\n  const [size, setSize] = useState([]);\n  var date = new Date();\n  // var firstDay = new Date(date.getFullYear(), date.getMonth() - 4, 1);\n\n  var maxDate = new Date();\n  var year = maxDate.getFullYear();\n  var month1 = maxDate.getMonth();\n  var minDate = new Date(year, month1, 1);\n  var maxDate = new Date(year, month1 + 11);\n  const baseUrl = environment.baseUrl;\n  const [month, setMonth] = useState(\n    customerData[0]?.effective_start_month === \"\"\n      ? null\n      : moment(customerData[0]?.effective_start_month).toDate()\n  );\n  // const [customerData, setCustomerData] = useState([]);\n  const [salesTerritories, setSalesTerritories] = useState([]);\n  const [projectcategory, setProjectCategory] = useState([]);\n  const [industryType, setIndustryType] = useState([]);\n  const [classification, setClassification] = useState([]);\n\n  const [resource, setResource] = useState([]);\n  const [resource1, setResource1] = useState([]);\n  const [resource2, setResource2] = useState([]);\n  const [resource3, setResource3] = useState([]);\n  const [resource4, setResource4] = useState([]);\n  const [resource5, setResource5] = useState([]);\n  const [resource6, setResource6] = useState([]);\n  const [resource7, setResource7] = useState([]);\n  const [resource8, setResource8] = useState([]);\n  const [resource9, setResource9] = useState([]);\n  const [resource10, setResource10] = useState([]);\n  const [resource11, setResource11] = useState([]);\n  const [resource12, setResource12] = useState([]);\n  const [resource13, setResource13] = useState([]);\n  const [resource14, setResource14] = useState([]);\n\n  const [cCountryId, setcCountryId] = useState([]);\n  const [invoiceCycle, setInvoiceCycle] = useState([]);\n  const [paymentTerm, setPaymentTerm] = useState([]);\n  const [invoiceTime, setInvoiceTime] = useState([]);\n  const [currency, setCurrency] = useState([]);\n  const [invoiceCulture, setInvoiceCulture] = useState([]);\n  const [invoiceTemplate, setInvoiceTemplate] = useState([]);\n  const [clickButtonPopUp, setClickButtonPopUp] = useState(false);\n\n  const [effectiveDate, SetEffectiveDate] = useState(\"\");\n\n  useEffect(() => {\n    const conStart =\n      customerData[0]?.effective_start_month == null\n        ? \"\"\n        : customerData[0]?.effective_start_month == \"\"\n        ? \"\"\n        : moment(customerData[0]?.effective_start_month).toDate();\n    SetEffectiveDate(conStart);\n  }, []);\n\n  const intialOnChangeState1 = {\n    customerEmails: \"\",\n  };\n  // };\n  const [onChangeState1, setOnChangeState1] = useState(intialOnChangeState1);\n\n  const nextMonthStartDate = moment()\n    .startOf(\"month\")\n    .add(1, \"month\")\n    .startOf(\"month\");\n\n  // Format the start date of the next month as \"YYYY-MM-DD\"\n  const nextMonthStartDateFormatted = nextMonthStartDate.format(\"YYYY-MM-DD\");\n\n  const [details, setDetails] = useState({\n    id: customerId,\n    typCustStatusId: customerData[0]?.typCustStatusId,\n    size: customerData[0]?.size,\n    salesPersonId: customerData[0]?.salesId,\n    clientPartnerId: customerData[0]?.clientpartnerId,\n    engagementPartnerId: customerData[0]?.engagementpartnerId,\n    cslHeadId: customerData[0]?.cslHeadId,\n    cslId: customerData[0]?.cslId,\n    acslId: customerData[0]?.AssociateCSLId,\n    deliveryPartnerHeadId: customerData[0]?.deliverypartnerHeadId,\n    deliveryPartnerId: customerData[0]?.deliverypartnerId,\n    talentPartnerId: customerData[0]?.TalentPartnerId,\n    projectCoordinatorId: customerData[0]?.projectCoordinatorId,\n    sqaId: customerData[0]?.SQAId,\n    clId: customerData[0]?.competencyLeadId,\n    cCountryId: customerData[0]?.countryId,\n    typClassificationId: customerData[0]?.classificationId,\n    phone: customerData[0]?.phone,\n    fax: customerData[0]?.fax,\n    sfAccountLink: customerData[0]?.sf_account_link,\n    website: customerData[0]?.website,\n    customerEmails: customerData[0]?.customeremail,\n    custReferenceable: customerData[0]?.cust_referenceable,\n    accountOwnerId: customerData[0]?.account_owner_id,\n    isNewCustomer: customerData[0]?.is_new_customer == false ? 0 : 1,\n    month:\n      customerData[0]?.effective_start_month == null\n        ? \"\"\n        : customerData[0]?.effective_start_month,\n    CiInvoiceForId: customerData[0]?.invoiceForId,\n    invoiceCycleId: customerData[0]?.invoiceCycleId,\n    paymentTermsId: customerData[0]?.paymentTermsId,\n    invoiceTimeId: customerData[0]?.invoiceTimeId,\n    CiCurrencyId: customerData[0]?.currencyId,\n    isExpenseBillable: customerData[0]?.expenseBillable == \"yes\" ? 1 : 0,\n    invoiceCultureId: customerData[0]?.invoiceCultureId,\n    ciDiscountPercent: customerData[0]?.discountPercent,\n    invoiceTemplateId: customerData[0]?.template_id,\n  });\n\n  const handleChange = (e) => {\n    const { id, name, value } = e.target;\n    setDetails((prev) => {\n      return { ...prev, [id]: value };\n    });\n  };\n\n  const handleChange1 = (e) => {\n    const { id, value } = e.target;\n    setDetails((prevDetails) => ({\n      ...prevDetails,\n      customerEmails: value,\n    }));\n  };\n\n  const handleNewCustomerChange = (e) => {\n    setDetails((prev) => ({ ...prev, [\"isNewCustomer\"]: \"1\" }));\n  };\n\n  const handleExistingCustomerChange = (e) => {\n    setDetails((prev) => ({ ...prev, [\"isNewCustomer\"]: \"0\" }));\n  };\n  const handleIsBillableChange = (e) => {\n    setDetails((prev) => ({ ...prev, [\"isExpenseBillable\"]: \"1\" }));\n  };\n\n  const handleNoBillableChange = (e) => {\n    setDetails((prev) => ({ ...prev, [\"isExpenseBillable\"]: \"0\" }));\n  };\n\n  const handleSize = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getSize`,\n    })\n      .then((res) => {\n        let manger = res.data;\n        setSize(manger);\n      })\n      .catch((error) => {});\n  };\n\n  const handleSalesTerritories = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getSalesTerritories`,\n    })\n      .then((res) => {\n        let manger = res.data;\n        setSalesTerritories(manger);\n      })\n      .catch((error) => {});\n  };\n\n  const handleProjectCategory = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getAllProjectCategorys`,\n    })\n      .then((res) => {\n        let manger = res.data;\n        setProjectCategory(manger);\n      })\n      .catch((error) => {});\n  };\n\n  const handleIndustryType = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getIndustryType`,\n    })\n      .then((res) => {\n        let manger = res.data;\n        setIndustryType(manger);\n      })\n      .catch((error) => {});\n  };\n\n  const getcCountryId = () => {\n    axios({\n      url: baseUrl + `/CostMS/cost/getCountries`,\n    }).then((resp) => {\n      setcCountryId(resp.data);\n    });\n  };\n\n  const resourceFnc = async () => {\n    await axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/risks/getAssignedData`,\n    })\n      .then((res) => {\n        let manger = res.data;\n        let data = [];\n\n        setResource(manger);\n        setResource1(manger);\n        setResource2(manger);\n        setResource3(manger);\n        setResource4(manger);\n        setResource5(manger);\n        setResource6(manger);\n        setResource7(manger);\n        setResource8(manger);\n        setResource9(manger);\n        setResource10(manger);\n        setResource11(manger);\n        setResource12(manger);\n        setResource13(manger);\n        setResource14(manger);\n      })\n      .catch((error) => {});\n  };\n\n  const handleClassification = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getClassification`,\n    })\n      .then((res) => {\n        let manger = res.data;\n        setClassification(manger);\n      })\n      .catch((error) => {});\n  };\n\n  const handleInvoiceCycle = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getInvoiceCycle`,\n    }).then((res) => {\n      let invcycle = res.data;\n      setInvoiceCycle(invcycle);\n    });\n  };\n\n  const handlePaymentTerm = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getPaymentTerms`,\n    }).then((res) => {\n      let payterm = res.data;\n      setPaymentTerm(payterm);\n    });\n  };\n\n  const handleInvoiceTime = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getInvoiceTime`,\n    }).then((res) => {\n      let intime = res.data;\n      setInvoiceTime(intime);\n    });\n  };\n\n  const handleCurrency = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getCurrency`,\n    }).then((res) => {\n      let curre = res.data;\n      setCurrency(curre);\n    });\n  };\n\n  const handleInvoiceCulture = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getInvoiceCulture`,\n    }).then((res) => {\n      let inculture = res.data;\n      setInvoiceCulture(inculture);\n    });\n  };\n\n  const handleInvoiceTemplate = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/Engagement/getInvoiceTemplate`,\n    }).then((res) => {\n      let invtemp = res.data;\n      setInvoiceTemplate(invtemp);\n    });\n  };\n\n  useEffect(() => {\n    // setTimeout(() => {\n    //   document.getElementsByClassName(\"pageTitle\")[0]?.click();\n    // }, 100);\n\n    handleSize();\n    handleSalesTerritories();\n    handleProjectCategory();\n    handleIndustryType();\n    resourceFnc();\n    getcCountryId();\n    handleClassification();\n    handleInvoiceCycle();\n    handlePaymentTerm();\n    handleInvoiceTime();\n    handleCurrency();\n    handleInvoiceCulture();\n    handleInvoiceTemplate();\n  }, []);\n\n  const handlePostDetails = () => {\n    // let valid = GlobalValidation(ref);\n    // if (valid) {\n    //   {\n    //     setSuccessvalidationmessage(true);\n    //   }\n    //   return;\n    // }\n\n    axios({\n      method: \"post\",\n      url: baseUrl + `/ProjectMS/Engagement/putEngagementsCusDetails`,\n      data: [details],\n    }).then(function (res) {\n      const data = res.data;\n      window.open(\n        `/#/search/customerSearch/customer/dashboard/:${customerId}`\n        // `_self`\n      );\n    });\n  };\n  const handleCancel = (e) => {\n    let ele = document.getElementsByClassName(\"cancel\");\n\n    // GlobalCancel(ref);\n    // setSuccessvalidationmessage(false);\n\n    for (let index = 0; index < ele.length; index++) {\n      ele[index].value = \"\";\n\n      if (ele[index].classList.contains(\"reactautocomplete\")) {\n        ele[\n          index\n        ].children[0].children[0].children[0].children[0].children[0].children[1]?.click();\n      }\n    }\n  };\n\n  const handleClear2 = () => {\n    setDetails((prev) => ({ ...prev, cslHead: \"\" }));\n  };\n\n  const handleClear3 = () => {\n    setDetails((prev) => ({ ...prev, cslId: \"\" }));\n  };\n\n  const handleClear4 = () => {\n    setDetails((prev) => ({ ...prev, acslId: \"\" }));\n  };\n\n  const handleClear5 = () => {\n    setDetails((prev) => ({ ...prev, deliveryPartnerHeadId: \"\" }));\n  };\n\n  const handleClear6 = () => {\n    setDetails((prev) => ({ ...prev, deliveryPartnerId: \"\" }));\n  };\n\n  const handleClear7 = () => {\n    setDetails((prev) => ({ ...prev, talentPartnerId: \"\" }));\n  };\n\n  const handleClear8 = () => {\n    setDetails((prev) => ({ ...prev, projectCoordinatorId: \"\" }));\n  };\n\n  const handleClear9 = () => {\n    setDetails((prev) => ({ ...prev, sqaId: \"\" }));\n  };\n\n  const handleClear10 = () => {\n    setDetails((prev) => ({ ...prev, clId: \"\" }));\n  };\n\n  return (\n    <div>\n      <div className=\"col-md-12\">\n        <div className=\"pageTitle\">\n          <div className=\"childOne\"></div>\n          <div className=\"childTwo\">\n            <h2>Edit</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n      </div>\n      {customerData.map((list) => (\n        <div className=\"mb-3 mt-2 container-fluid   customCard cancel\">\n          <div className=\"group-content row\">\n            <div className=\"col-md-9\">\n              <div className=\"row\">\n                <div className=\"form-group col-md-8 mb-2\">\n                  <label htmlFor=\"fullName\">\n                    Customer Name <span className=\"error-text\">*</span>\n                  </label>\n                  <div\n                    className=\"textfield\"\n\n                    // ref={(ele) => {\n                    //   ref.current[0] = ele;\n                    // }}\n                  >\n                    <input\n                      type=\"text\"\n                      className=\"err text disableField\"\n                      name=\"fullName\"\n                      id=\"fullName\"\n                      defaultValue={list.customerName}\n                      disabled\n\n                      // onMouseEnter={handleChange}\n                      //onChange={handleChange2}\n                      // defaultValue={\n                      //   onChangeState.fullName != undefined\n                      //     ? onChangeState.fullName\n                      //     : \"\"\n                      // }\n                    />\n                  </div>\n                </div>\n                <div className=\"form-group col-md-4 mb-2\">\n                  <label htmlFor=\"typCustStatusId\">\n                    Customer Status&nbsp;<span className=\"error-text\">*</span>\n                  </label>\n                  <select\n                    // ref={(ele) => {\n                    //   ref.current[1] = ele;\n                    // }}\n                    className=\"text\"\n                    name=\"typCustStatusId\"\n                    id=\"typCustStatusId\"\n                    // defaultValue={list.typCustStatusId}\n                    // selected={customerData[0]?.customerstatus}\n                    onChange={handleChange}\n                  >\n                    <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                    <option\n                      value={160}\n                      selected={\n                        customerData[0]?.typCustStatusId == 160 ? 160 : \"\"\n                      }\n                    >\n                      New\n                    </option>\n                    <option\n                      value={161}\n                      selected={\n                        customerData[0]?.typCustStatusId == 161 ? 161 : \"\"\n                      }\n                    >\n                      Active\n                    </option>\n                    <option\n                      value={162}\n                      selected={\n                        customerData[0]?.typCustStatusId == 162 ? 162 : \"\"\n                      }\n                    >\n                      InActive\n                    </option>\n                  </select>\n                </div>\n                <div className=\"form-group col-md-4 mb-2\">\n                  <label htmlFor=\"size\">Size</label>\n                  <select\n                    className=\"\"\n                    name=\"size\"\n                    id=\"size\"\n                    onChange={handleChange}\n                  >\n                    <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                    {size.map((Item, index) => (\n                      <option\n                        key={index}\n                        value={Item.id}\n                        selected={\n                          Item.id == customerData[0]?.size\n                            ? customerData[0]?.size\n                            : \"\"\n                        }\n                      >\n                        {Item.lkup_name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"form-group col-md-4 mb-2\">\n                  <label htmlFor=\"salesTerritoryId\">\n                    Sales Territory&nbsp;<span className=\"error-text\">*</span>\n                  </label>\n                  <select\n                    // ref={(ele) => {\n                    //   ref.current[2] = ele;\n                    // }}\n                    className=\"err  text disableField\"\n                    name=\"salesTerritoryId\"\n                    id=\"salesTerritoryId\"\n                    disabled=\"disableField\"\n                    //onChange={handleChange}\n                  >\n                    <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                    {salesTerritories.map((Item, index) => (\n                      <option\n                        key={index}\n                        value={Item.id}\n                        selected={\n                          Item.full_name == customerData[0]?.salesterritory\n                            ? customerData[0]?.salesterritory\n                            : \"\"\n                        }\n                      >\n                        {Item.full_name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"form-group col-md-4 mb-2\">\n                  <label htmlFor=\"typIndustryId\">\n                    Industry type&nbsp;<span className=\"error-text\">*</span>\n                  </label>\n                  <select\n                    // ref={(ele) => {\n                    //   ref.current[3] = ele;\n                    // }}\n                    className=\"err text disableField\"\n                    id=\"typIndustryId\"\n                    name=\"typIndustryId\"\n                    disabled=\"disableField\"\n                    //onChange={handleChange}\n                  >\n                    <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                    {industryType.map((Item, index) => (\n                      <option\n                        key={index}\n                        value={Item.id}\n                        selected={\n                          Item.lkup_name == customerData[0]?.IndustryType\n                            ? customerData[0]?.IndustryType\n                            : \"\"\n                        }\n                      >\n                        {Item.lkup_name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"typProjCatId\">\n                Project Category&nbsp;<span className=\"error-text\">*</span>\n              </label>\n              <select\n                // ref={(ele) => {\n                //   ref.current[4] = ele;\n                // }}\n                className=\"err  text disableField auto text \"\n                name=\"typProjCatId\"\n                id=\"typProjCatId\"\n                disabled=\"disableField\"\n                //onChange={handleChange}\n                multiple=\"multiple\"\n                size={5}\n              >\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {/* {projectcategory.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.project_category_name ==\n                      customerData[0]?.projectcategory\n                        ? customerData[0]?.projectcategory\n                        : \"\"\n                    }\n                  >\n                    {Item.project_category_name}\n                  </option>\n                ))} */}\n                {projectcategory.map((Item, index) => {\n                  if (\n                    Item.project_category_name ===\n                    customerData[0]?.projectcategory\n                  ) {\n                    return (\n                      <option\n                        key={index}\n                        value={Item.id}\n                        selected={\n                          Item.project_category_name ===\n                          customerData[0]?.projectcategory\n                        }\n                      >\n                        {Item.project_category_name}\n                      </option>\n                    );\n                  } else {\n                    return null;\n                  }\n                })}\n              </select>\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"salesPersonId\">\n                Sales Executive&nbsp;<span className=\"error-text\">*</span>\n              </label>\n              <div className=\" autoComplete-container\">\n                <ReactSearchAutocomplete\n                  items={resource}\n                  type=\"Text\"\n                  name=\"salesPersonId\"\n                  id=\"salesPersonId\"\n                  className=\"err \"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  resource={resource}\n                  resourceFnc={resourceFnc}\n                  placeholder=\"press space for resource list\"\n                  onSelect={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      salesPersonId: e.id,\n                    }));\n                  }}\n                  showIcon={false}\n                  inputSearchString={\n                    customerData[0]?.name == null ? \"\" : customerData[0]?.name\n                  }\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"Month\">\n                Effective Month&nbsp;<span className=\"error-text\">*</span>\n              </label>\n              <div className=\"datepicker\">\n                <DatePicker\n                  name=\"month\"\n                  id=\"month\"\n                  className=\"\"\n                  selected={effectiveDate == null ? \"\" : effectiveDate}\n                  // minDate={minDate}\n                  minDate={\n                    effectiveDate == null\n                      ? \"\"\n                      : effectiveDate == \"\"\n                      ? \"\"\n                      : new Date(\n                          effectiveDate.getFullYear(),\n                          effectiveDate.getMonth() + 1\n                        )\n                  }\n                  onChange={(e) => {\n                    SetEffectiveDate(e);\n                    setDetails((prev) => ({\n                      ...prev,\n                      month: moment(e).format(\"yyyy-MM-DD\"),\n                    }));\n                  }}\n                  placeholderText=\"month\"\n                  Value={\n                    customerData[0]?.effective_start_month == null\n                      ? \"\"\n                      : moment(customerData[0]?.effective_start_month).format(\n                          \"MMM-YYYY\"\n                        )\n                  }\n                  dateFormat=\"MMM-yyyy\"\n                  onKeyDown={(e) => {\n                    e.preventDefault();\n                  }}\n                  showMonthYearPicker\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"clientPartnerId\">Client Partner</label>\n              <div className=\"autoComplete-container  \">\n                <ReactSearchAutocomplete\n                  items={resource1}\n                  type=\"Text\"\n                  name=\"clientPartnerId\"\n                  id=\"clientPartnerId\"\n                  className=\"err \"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  resource1={resource1}\n                  placeholder=\"press space for resource list\"\n                  inputSearchString={\n                    customerData[0]?.clientpartner == null\n                      ? \"\"\n                      : customerData[0]?.clientpartner\n                  }\n                  onSelect={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      clientPartnerId: e.id,\n                    }));\n                  }}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"engagementPartnerId\">Engagement Partner</label>\n              <div className=\"autoComplete-container\">\n                <ReactSearchAutocomplete\n                  items={resource2}\n                  type=\"Text\"\n                  name=\"engagementPartnerId\"\n                  id=\"engagementPartnerId\"\n                  className=\"err \"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  placeholder=\"press space for resource list\"\n                  inputSearchString={\n                    customerData[0]?.engagementpartner == null\n                      ? \"\"\n                      : customerData[0]?.engagementpartner\n                  }\n                  //resource1={resource1}\n                  resourceFnc={resourceFnc}\n                  //placeholder=\"\"=\"\"\n                  onSelect={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      engagementPartnerId: e.id,\n                    }));\n                  }}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"cslHeadId\">CSL Head</label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource4}\n                  riskDetails={resource4}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"cslHeadId\"\n                  id=\"cslHeadId\"\n                  className=\"err cancel\"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  inputSearchString={\n                    customerData[0]?.cslHead == null\n                      ? \"\"\n                      : customerData[0]?.cslHead\n                  }\n                  placeholder=\"press space for resource list\"\n                  // resourceFnc={resourceFnc}\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      cslHeadId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear2}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"cslId\">CSL</label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource5}\n                  riskDetails={resource5}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"cslId\"\n                  id=\"cslId\"\n                  className=\"err cancel\"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  placeholder=\"press space for resource list\"\n                  inputSearchString={\n                    customerData[0]?.cslName == null\n                      ? \"\"\n                      : customerData[0]?.cslName\n                  }\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  //placeholder=\"\"=\"\"\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      cslId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear3}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"acslId\">Associate CSL</label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource6}\n                  riskDetails={resource6}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"acslId\"\n                  id=\"acslId\"\n                  className=\"err cancel\"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  inputSearchString={\n                    customerData[0]?.AssociateCSL == null\n                      ? \"\"\n                      : customerData[0]?.AssociateCSL\n                  }\n                  placeholder=\"press space for resource list\"\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      acslId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear4}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"deliveryPartnerHeadId\">\n                Delivery Partner Head\n              </label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource7}\n                  riskDetails={resource7}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"deliveryPartnerHeadId\"\n                  id=\"deliveryPartnerHeadId\"\n                  className=\"err cancel\"\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  inputSearchString={\n                    customerData[0]?.deliverypartnerHead == null\n                      ? \"\"\n                      : customerData[0]?.deliverypartnerHead\n                  }\n                  //placeholder=\"\"=\"\"\n                  placeholder=\"press space for resource list\"\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      deliveryPartnerHeadId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear5}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"deliveryPartnerId\">Delivery Partner</label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource8}\n                  riskDetails={resource8}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"deliveryPartnerId\"\n                  id=\"deliveryPartnerId\"\n                  className=\"err cancel\"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  inputSearchString={\n                    customerData[0]?.deliverypartner == null\n                      ? \"\"\n                      : customerData[0]?.deliverypartner\n                  }\n                  placeholder=\"press space for resource list\"\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  //placeholder=\"\"=\"\"\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      deliveryPartnerId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear6}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"talentPartnerId\">Talent Partner</label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource9}\n                  riskDetails={resource9}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"talentPartnerId\"\n                  id=\"talentPartnerId\"\n                  className=\"err cancel\"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  inputSearchString={\n                    customerData[0]?.TalentPartner == null\n                      ? \"\"\n                      : customerData[0]?.TalentPartner\n                  }\n                  placeholder=\"press space for resource list\"\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  //placeholder=\"\"=\"\"\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      talentPartnerId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear7}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"projectCoordinatorId\">Project co-ordinator</label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource10}\n                  riskDetails={resource10}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"projectCoordinatorId\"\n                  id=\"projectCoordinatorId\"\n                  className=\"err cancel\"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  inputSearchString={\n                    customerData[0]?.projectCoordinator == null\n                      ? \"\"\n                      : customerData[0]?.projectCoordinator\n                  }\n                  placeholder=\"press space for resource list\"\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  //placeholder=\"\"=\"\"\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      projectCoordinatorId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear8}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"sqaId\">SQA</label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource11}\n                  riskDetails={resource11}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"sqaId\"\n                  id=\"sqaId\"\n                  className=\"err cancel\"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  inputSearchString={\n                    customerData[0]?.SQA == null ? \"\" : customerData[0]?.SQA\n                  }\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  //placeholder=\"\"=\"\"\n                  placeholder=\"press space for resource list\"\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      sqaId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear9}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"clId\">Competency Lead</label>\n              <div className=\"autoComplete-container cancel  reactautocomplete\">\n                <RiskAutoComplete\n                  // items={resource3}\n                  riskDetails={resource3}\n                  setFormData={setDetails}\n                  getData={resourceFnc}\n                  type=\"Text\"\n                  name=\"clId\"\n                  id=\"clId\"\n                  className=\"err cancel\"\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  inputSearchString={\n                    customerData[0]?.competencyLead == null\n                      ? \"\"\n                      : customerData[0]?.competencyLead\n                  }\n                  placeholder=\"press space for resource list\"\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  //placeholder=\"\"=\"\"\n                  onChangeHandler={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      clId: e.id,\n                    }));\n                  }}\n                  onClear={handleClear10}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"cCountryId\">Country</label>\n\n              <select\n                name=\"cCountryId\"\n                className=\"\"\n                id=\"cCountryId\"\n                onChange={(e) => handleChange(e)}\n              >\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {cCountryId.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.country_name == customerData[0]?.country_name\n                        ? customerData[0]?.country_name\n                        : \"\"\n                    }\n                  >\n                    {Item.country_name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"typClassificationId\">Classification</label>\n              <select\n                name=\"typClassificationId\"\n                className=\"\"\n                id=\"typClassificationId\"\n                onChange={handleChange}\n              >\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {classification.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.lkup_name == customerData[0]?.classification\n                        ? customerData[0]?.classification\n                        : \"\"\n                    }\n                  >\n                    {Item.lkup_name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"phone\">phone</label>\n              <input\n                type=\"text\"\n                name=\"phone\"\n                className=\"form-control \"\n                id=\"phone\"\n                defaultValue={list.phone}\n                //placeholder=\"\"=\"\"\n                maxLength={15}\n                onKeyDown={(e) =>\n                  e.keyCode &&\n                  (e.keyCode <= 47 || e.keyCode >= 58) &&\n                  e.keyCode != 8 &&\n                  e.preventDefault()\n                }\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"fax\">Fax Number</label>\n              <input\n                type=\"text\"\n                className=\"form-control \"\n                id=\"fax\"\n                //placeholder=\"\"=\"\"\n                name=\"fax\"\n                defaultValue={customerData[0]?.fax}\n                maxLength={15}\n                onKeyDown={(e) =>\n                  e.keyCode &&\n                  (e.keyCode <= 47 || e.keyCode >= 58) &&\n                  e.keyCode != 8 &&\n                  e.preventDefault()\n                }\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"sfAccountLink\">SF Account Link</label>\n              <input\n                type=\"text\"\n                name=\"sfAccountLink\"\n                className=\"form-control \"\n                id=\"sfAccountLink\"\n                defaultValue={list.sf_account_link}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"website\">Website</label>\n              <input\n                type=\"text\"\n                name=\"website\"\n                className=\"form-control \"\n                id=\"website\"\n                defaultValue={list.website}\n                //placeholder=\"\"=\"\"\n                required\n                onChange={handleChange}\n              />\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"customerEmails\">Customer Email</label>\n              <div className=\"row\">\n                <div className=\"col-md-10\">\n                  <input\n                    type=\"text\"\n                    name=\"customerEmails\"\n                    className=\"disableField\"\n                    id=\"customerEmails\"\n                    // defaultValue={list.customeremail + dispalyEmail}\n                    disabled\n                    value={details.customerEmails + dispalyEmail}\n                    // onChange={handleChange}\n                  />\n                </div>\n                <div className=\"col-md-1\">\n                  <button className=\"btn\">\n                    <BiPencil\n                      onClick={() => {\n                        setClickButtonPopUp(true);\n                      }}\n                    />\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"custReferenceable\">\n                Is this customer referenceable?\n              </label>\n              <select\n                id=\"custReferenceable\"\n                className=\"\"\n                name=\"custReferenceable\"\n                selected={\n                  customerData[0]?.cust_referenceable == null\n                    ? \"\"\n                    : customerData[0]?.cust_referenceable\n                }\n                onChange={handleChange}\n              >\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                <option\n                  value={1}\n                  selected={\n                    customerData[0]?.cust_referenceable == \"1\"\n                      ? 1\n                      : customerData[0]?.cust_referenceable == null\n                      ? \"\"\n                      : \"\"\n                  }\n                >\n                  Yes\n                </option>\n                <option\n                  value={0}\n                  selected={\n                    customerData[0]?.cust_referenceable == \"0\"\n                      ? 0\n                      : customerData[0]?.cust_referenceable == null\n                      ? \"\"\n                      : \"\"\n                  }\n                  onChange={handleChange}\n                >\n                  No\n                </option>\n              </select>\n            </div>\n\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"accountOwnerId\">Account Owner</label>\n              <div className=\"autoComplete-container   reactautocomplete\">\n                <ReactSearchAutocomplete\n                  items={resource14}\n                  // setFormData={setDetails}\n                  // getData={resourceFnc}\n                  // value=\"0\"\n                  type=\"Text\"\n                  name=\"accountOwnerId\"\n                  id=\"accountOwnerId\"\n                  // className=\"err cancel\"\n                  //fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  //resultStringKeyName=\"name\"\n                  //resource1={resource1}\n                  // resourceFnc={resourceFnc}\n                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                  resultStringKeyName=\"name\"\n                  // resource={resource}\n                  resourceFnc={resourceFnc}\n                  placeholder=\"Type minimum 3 characters to get the list\"\n                  //placeholder=\"\"=\"\"\n                  onSelect={(e) => {\n                    setDetails((prevProps) => ({\n                      ...prevProps,\n                      accountOwnerId: e.id,\n                    }));\n                  }}\n                  inputSearchString={\n                    customerData[0]?.accountowner == null\n                      ? \"\"\n                      : customerData[0]?.accountowner\n                  }\n                  // onClear={handleClear14}\n                  showIcon={false}\n                />\n              </div>\n            </div>\n\n            <div className=\"col-md-3\">\n              <label htmlFor=\"isNewCustomer\">New Logo</label>\n              <div className=\"form-check form-check-inline\">\n                <input\n                  className=\"form-check-input \"\n                  type=\"radio\"\n                  value=\"1\"\n                  name=\"isNewCustomer\"\n                  id=\"isNewCustomerYes\"\n                  // onChange={handleChange}\n                  checked={details.isNewCustomer == 1}\n                  onChange={handleNewCustomerChange}\n                  // checked={customerData[0]?.is_new_customer === true}\n                />\n                <label className=\"form-check-label \" htmlFor=\"isNewCustomerYes\">\n                  Yes\n                </label>\n              </div>\n              <div className=\"form-check form-check-inline \">\n                <input\n                  className=\"form-check-input \"\n                  type=\"radio\"\n                  value=\"0\"\n                  name=\"isNewCustomer\"\n                  id=\"isNewCustomerNo\"\n                  // onChange={handleChange}\n                  checked={details.isNewCustomer == 0}\n                  onChange={handleExistingCustomerChange}\n                  // checked={customerData[0]?.is_new_customer === false}\n                />\n                <label className=\"form-check-label \" htmlFor=\"isNewCustomerNo\">\n                  No\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}{\" \"}\n      {customerData.map((list) => (\n        <div className=\"mb-3 mt-2 container-fluid   customCard cancel\">\n          <h2>Invoicing Details</h2>\n          <div className=\"group-content row\">\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"invoiceForId\">Create Invoice For</label>\n              <select\n                id=\"CiInvoiceForId\"\n                name=\"CiInvoiceForId\"\n                onChange={handleChange}\n              >\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                <option\n                  value=\"650\"\n                  selected={\n                    customerData[0]?.invoiceFor == \"Customer\" ? 650 : \"\"\n                  }\n                >\n                  Customer\n                </option>\n                <option\n                  value=\"651\"\n                  selected={\n                    customerData[0]?.invoiceFor == \"Division\" ? 651 : \"\"\n                  }\n                >\n                  Division\n                </option>\n                <option\n                  value=\"652\"\n                  selected={customerData[0]?.invoiceFor == \"Project\" ? 652 : \"\"}\n                >\n                  Project\n                </option>\n              </select>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"invoiceCycleId\">Invoice Cycle</label>\n              <select id=\"invoiceCycleId\" onChange={handleChange}>\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {invoiceCycle.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.invoiceCycle == customerData[0]?.invoiceCycle\n                        ? customerData[0]?.invoiceCycle\n                        : \"\"\n                    }\n                  >\n                    {Item.invoiceCycle}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group col-md-2 mb-2\">\n              <label htmlFor=\"paymentTermsId\">Payment Terms</label>\n              <select id=\"paymentTermsId\" onChange={handleChange}>\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {paymentTerm.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.paymentTerms == customerData[0]?.paymentTerms\n                        ? customerData[0]?.paymentTerms\n                        : \"\"\n                    }\n                  >\n                    {Item.paymentTerms}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"form-group col-md-2 mb-2\">\n              <label htmlFor=\"invoiceTimeId\">Invoice Time</label>\n              <select id=\"invoiceTimeId\" onChange={handleChange}>\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {invoiceTime.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.invoiceTime == customerData[0]?.invoiceTime\n                        ? customerData[0]?.invoiceTime\n                        : \"\"\n                    }\n                  >\n                    {Item.invoiceTime}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\" col-md-2\">\n              <label htmlFor=\"isExpenseBillable\">Expense Billable </label>\n              <div className=\"form-check form-check-inline\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"isExpenseBillable\"\n                  value=\"1\"\n                  id=\"isExpenseBillable\"\n                  // onChange={handleChange}\n                  checked={details.isExpenseBillable == 1}\n                  onChange={handleIsBillableChange}\n                  // checked={\n                  //   customerData[0]?.expenseBillable == \"yes\" ? true : false\n                  // }\n                />\n                <label className=\"form-check-label\" htmlFor=\"yes\">\n                  Yes\n                </label>\n              </div>\n              <div className=\"form-check form-check-inline\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"isExpenseBillable\"\n                  value=\"0\"\n                  id=\"isExpenseBillable\"\n                  // onChange={handleChange}\n                  checked={details.isExpenseBillable == 0}\n                  onChange={handleNoBillableChange}\n                  // checked={\n                  //   customerData[0]?.expenseBillable == \"No\" ? true : false\n                  // }\n                />\n                <label className=\"form-check-label\" htmlFor=\"No\">\n                  No\n                </label>\n              </div>\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"ciDiscountPercent\">Discount (%)</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"ciDiscountPercent\"\n                placeholder\n                required\n                defaultValue={\n                  list.discountPercent == null\n                    ? \"\"\n                    : list.discountPercent == \"\"\n                    ? \"\"\n                    : list.discountPercent.toFixed(2)\n                }\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group col-md-3 mb-2\">\n              <label htmlFor=\"CiCurrencyId\">Currency</label>\n              <select id=\"CiCurrencyId\" onChange={handleChange}>\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {currency.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.currency == customerData[0]?.description\n                        ? customerData[0]?.description\n                        : \"\"\n                    }\n                  >\n                    {Item.currency}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"form-group col-md-2 mb-2\">\n              <label htmlFor=\"invoiceCultureId\">Invoice Culture</label>\n              <select id=\"invoiceCultureId\" onChange={handleChange}>\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {invoiceCulture.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.invoiceTime == customerData[0]?.invoiceCulture\n                        ? customerData[0]?.invoiceCulture\n                        : \"\"\n                    }\n                  >\n                    {Item.invoiceTime}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"form-group col-md-2 mb-2\">\n              <label htmlFor=\"invoiceTemplateId\">Invoice Template</label>\n              <select id=\"invoiceTemplateId\" onChange={handleChange}>\n                <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                {invoiceTemplate.map((Item, index) => (\n                  <option\n                    key={index}\n                    value={Item.id}\n                    selected={\n                      Item.invoiceTemplate == customerData[0]?.invoiceTemplate\n                        ? customerData[0]?.invoiceTemplate\n                        : \"\"\n                    }\n                  >\n                    {Item.invoiceTemplate}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\" form-group col-md-12 col-sm-12 col-xs-12 btn-container center my-3\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={() => {\n                handlePostDetails();\n              }}\n            >\n              <VscSave /> Save\n            </button>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => {\n                handleCancel();\n              }}\n            >\n              <ImCross /> Cancel\n            </button>\n          </div>\n          <div>\n            {clickButtonPopUp ? (\n              <CustomerEmailEditPopup\n                clickButtonPopUp={clickButtonPopUp}\n                setClickButtonPopUp={setClickButtonPopUp}\n                customerData={customerData}\n                setDisplayEmail={setDisplayEmail}\n                details={details}\n                setDetails={setDetails}\n              />\n            ) : (\n              \"\"\n            )}\n          </div>\n\n          <>\n            <CustomersDivisionEdit customerId={customerId} />\n            <CustomersStakeholdersEdit customerId={customerId} />\n            <CustomersInternalStakeholdersEdit customerId={customerId} />\n            <CustomerRolesEdit\n              customerId={customerId}\n              cCountryId={cCountryId}\n            />\n          </>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Edit;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { MdOutlinePlaylistAdd } from \"react-icons/md\";\nimport { AiFillDelete, AiFillWarning } from \"react-icons/ai\";\nimport { CModal, CModalBody, CModalHeader, CModalTitle } from \"@coreui/react\";\nimport { BiSave } from \"react-icons/bi\";\n\nfunction isValidEmail(email) {\n  // Basic email format validation using a regular expression\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nfunction EmailPopUp(props) {\n  const {\n    clickButtonPopUp,\n    setClickButtonPopUp,\n    handleChange1,\n    handleAddEmail,\n    setDetails,\n    addList,\n    setAddList,\n    finalState1,\n    setDisplayTextEmails,\n    displayTextEmails,\n    setFinalState1,\n  } = props;\n\n  const [displayState1, setDisplayState1] = useState(null);\n  const [validationmessage, setValidationMessage] = useState(\"\");\n\n  const [mailObjState, setMailObjState] = useState({});\n\n  const addHandler = () => {\n    const emailInput = ref.current[0].querySelector(\"input\");\n    const email = emailInput.value.trim();\n\n    if (!email) {\n      setValidationMessage(\"Please Provide Email\");\n      setTimeout(() => {\n        setValidationMessage(\"\");\n      }, 3000);\n      return;\n    }\n\n    if (!isValidEmail(email)) {\n      setValidationMessage(\"Please Provide Proper Email\");\n      setTimeout(() => {\n        setValidationMessage(\"\");\n      }, 3000);\n      return;\n    }\n\n    setMailObjState((prev) => ({ ...prev, [email]: email }));\n    setFinalState1((prev) => ({ ...prev, [email]: email }));\n\n    handleAddEmail();\n    DisplayList();\n    emailInput.value = \"\";\n  };\n\n  const handleSubmit = () => {\n    setClickButtonPopUp(false);\n  };\n\n  useEffect(() => {\n    DisplayList();\n  }, [finalState1]);\n\n  // const checkedData = (e, data) => {\n  //   let initialData = displayTextEmails;\n  //   if (e.target.checked) {\n  //     initialData.push(data);\n  //   } else {\n  //     let index = initialData.indexOf(data);\n  //     initialData.splice(index, 1);\n  //   }\n\n  //   setDisplayTextEmails(initialData);\n  // };\n\n  const DisplayList = () => {\n    if (finalState1 === undefined || finalState1 === null) {\n      return null;\n    }\n\n    setDisplayState1(() => {\n      return Object.keys(finalState1).map((d, i) => {\n        return (\n          <div key={i}>\n            {/* <input\n              // type=\"checkbox\"\n              onClick={(e) => {\n                checkedData(e, finalState1[d]);\n              }}\n            /> */}\n            {finalState1[d]}\n            <AiFillDelete\n              onClick={() => {\n                delete finalState1[d];\n                DisplayList();\n              }}\n            />\n          </div>\n        );\n      });\n    });\n  };\n\n  const ref = useRef([]);\n  return (\n    <div>\n      <CModal\n        alignment=\"center\"\n        backdrop=\"static\"\n        size=\"sm\"\n        visible={clickButtonPopUp}\n        onClose={() => {\n          setClickButtonPopUp(false);\n        }}\n      >\n        <CModalHeader className=\"hgt22\" style={{ cursor: \"all-scroll\" }}>\n          <CModalTitle>\n            <span className=\"ft16\"> Client Email </span>\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          {validationmessage && (\n            <div className=\"statusMsg error\">\n              <AiFillWarning /> {validationmessage}\n            </div>\n          )}\n          <div className=\"group-content row\">\n            <div className=\" col-md-12 row mb-2\">\n              <div className=\"col-md-8\">\n                <div\n                  className=\"textfield\"\n                  ref={(ele) => {\n                    ref.current[0] = ele;\n                  }}\n                >\n                  <input\n                    className=\"col-md-12\"\n                    type=\"email\"\n                    id=\"customerEmails\"\n                    name=\"customerEmails\"\n                    placeholder=\"Enter Email\"\n                    onChange={(e) => {\n                      handleChange1(e);\n                    }}\n                  ></input>\n                </div>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary col-4\"\n                onClick={() => {\n                  addHandler();\n                }}\n              >\n                <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n                <MdOutlinePlaylistAdd /> Add\n              </button>\n            </div>\n            {/* {Object.keys(mailObjState).map((d) => d)} */}\n            <div className=\"row\">{displayState1}</div>\n            {/* <div className=\"col-md-1\"></div> */}\n            {/* <button\n              className=\" col-md-4 btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              <BiSave /> Select\n            </button> */}\n          </div>\n        </CModalBody>\n      </CModal>\n    </div>\n  );\n}\n\nexport default EmailPopUp;\n","import { MdOutlinePlaylistAdd } from \"react-icons/md\";\nimport { AiFillDelete, AiFillWarning } from \"react-icons/ai\";\nimport { CModal, CModalBody, CModalHeader, CModalTitle } from \"@coreui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport GlobalValidation from \"../ValidationComponent/GlobalValidation\";\n\nfunction PONumberPopup(props) {\n  const {\n    buttonPopup,\n    setButtonPopup,\n    handleChange2,\n    handleAdd,\n    finalState,\n    details,\n  } = props;\n\n  const [displayState, setDisplayState] = useState(null);\n  const [validationmessage, setValidationMessage] = useState(false);\n\n  const addHandler = async () => {\n    let valid = GlobalValidation(ref);\n\n    if (valid) {\n      setValidationMessage(true);\n      return;\n    }\n\n    await handleAdd();\n    DisplayList();\n    document.getElementById(\"poNumber\").value = \"\";\n  };\n\n  useEffect(() => {\n    DisplayList();\n  }, [finalState]);\n\n  const DisplayList = () => {\n    setDisplayState(() => {\n      return Object.keys(finalState).map((d, i) => {\n        return (\n          <div key={i}>\n            <AiFillDelete\n              cursor={\"Pointer\"}\n              onClick={() => {\n                delete finalState[d];\n                DisplayList();\n              }}\n            />\n            {finalState[d]}\n          </div>\n        );\n      });\n    });\n  };\n\n  const ref = useRef([]);\n\n  return (\n    <div>\n      <CModal\n        alignment=\"center\"\n        backdrop=\"static\"\n        size=\"sm\"\n        visible={buttonPopup}\n        onClose={() => {\n          setButtonPopup(false);\n        }}\n      >\n        <CModalHeader className=\"\" style={{ cursor: \"all-scroll\" }}>\n          <CModalTitle>\n            <span className=\"\"> PO Numbers</span>\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          {validationmessage === true ? (\n            <div className=\"statusMsg error\">\n              {\" \"}\n              <AiFillWarning /> Please enter PO Number\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          <div className=\"group-content row\">\n            <div className=\" col-md-12 row mb-2\">\n              <div\n                className=\"textfield col-md-8\"\n                ref={(ele) => {\n                  ref.current[0] = ele;\n                }}\n              >\n                <input\n                  className=\"col-md-12\"\n                  type=\"text\"\n                  id=\"poNumber\"\n                  name=\"poNumber\"\n                  placeholder=\"Enter PO\"\n                  onChange={(e) => {\n                    handleChange2(e);\n                  }}\n                  onKeyDown={(event) => {\n                    if (event.code == \"Space\" && !details.poNumber)\n                      event.preventDefault();\n                  }}\n                  required\n                />\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary col-4\"\n                onClick={() => {\n                  addHandler();\n                }}\n              >\n                <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n                <MdOutlinePlaylistAdd /> Add\n              </button>\n            </div>\n            <div className=\"row\">{displayState}</div>\n          </div>\n        </CModalBody>\n      </CModal>\n    </div>\n  );\n}\n\nexport default PONumberPopup;\n"],"names":["props","customerId","customerData","useState","dispalyEmail","setDisplayEmail","size","setSize","year","Date","maxDate","getFullYear","month1","getMonth","baseUrl","environment","effective_start_month","moment","toDate","salesTerritories","setSalesTerritories","projectcategory","setProjectCategory","industryType","setIndustryType","classification","setClassification","resource","setResource","resource1","setResource1","resource2","setResource2","resource3","setResource3","resource4","setResource4","resource5","setResource5","resource6","setResource6","resource7","setResource7","resource8","setResource8","resource9","setResource9","resource10","setResource10","resource11","setResource11","setResource12","setResource13","resource14","setResource14","cCountryId","setcCountryId","invoiceCycle","setInvoiceCycle","paymentTerm","setPaymentTerm","invoiceTime","setInvoiceTime","currency","setCurrency","invoiceCulture","setInvoiceCulture","invoiceTemplate","setInvoiceTemplate","clickButtonPopUp","setClickButtonPopUp","effectiveDate","SetEffectiveDate","useEffect","conStart","customerEmails","startOf","add","format","id","typCustStatusId","salesPersonId","salesId","clientPartnerId","clientpartnerId","engagementPartnerId","engagementpartnerId","cslHeadId","cslId","acslId","AssociateCSLId","deliveryPartnerHeadId","deliverypartnerHeadId","deliveryPartnerId","deliverypartnerId","talentPartnerId","TalentPartnerId","projectCoordinatorId","sqaId","SQAId","clId","competencyLeadId","countryId","typClassificationId","classificationId","phone","fax","sfAccountLink","sf_account_link","website","customeremail","custReferenceable","cust_referenceable","accountOwnerId","account_owner_id","isNewCustomer","is_new_customer","month","CiInvoiceForId","invoiceForId","invoiceCycleId","paymentTermsId","invoiceTimeId","CiCurrencyId","currencyId","isExpenseBillable","expenseBillable","invoiceCultureId","ciDiscountPercent","discountPercent","invoiceTemplateId","template_id","details","setDetails","handleChange","e","target","value","name","prev","handleNewCustomerChange","handleExistingCustomerChange","handleIsBillableChange","handleNoBillableChange","resourceFnc","axios","method","url","then","res","manger","data","catch","error","resp","invcycle","payterm","intime","curre","inculture","invtemp","handleClear2","cslHead","handleClear3","handleClear4","handleClear5","handleClear6","handleClear7","handleClear8","handleClear9","handleClear10","className","map","list","htmlFor","type","defaultValue","customerName","disabled","onChange","selected","Item","index","lkup_name","full_name","salesterritory","IndustryType","multiple","project_category_name","ReactSearchAutocomplete","items","fuseOptions","keys","resultStringKeyName","placeholder","onSelect","prevProps","showIcon","inputSearchString","minDate","placeholderText","Value","dateFormat","onKeyDown","preventDefault","showMonthYearPicker","clientpartner","engagementpartner","riskDetails","setFormData","getData","onChangeHandler","onClear","cslName","AssociateCSL","deliverypartnerHead","deliverypartner","TalentPartner","projectCoordinator","SQA","competencyLead","country_name","maxLength","keyCode","required","onClick","accountowner","checked","invoiceFor","paymentTerms","toFixed","description","window","open","ele","document","getElementsByClassName","length","classList","contains","children","click","handleCancel","handleChange1","handleAddEmail","finalState1","addList","setAddList","setFinalState1","setDisplayTextEmails","displayTextEmails","displayState1","setDisplayState1","validationmessage","setValidationMessage","setMailObjState","DisplayList","undefined","Object","d","i","ref","useRef","alignment","backdrop","visible","onClose","style","cursor","current","emailInput","querySelector","email","trim","test","isValidEmail","setTimeout","addHandler","buttonPopup","setButtonPopup","handleChange2","handleAdd","finalState","displayState","setDisplayState","GlobalValidation","getElementById","event","code","poNumber"],"sourceRoot":""}