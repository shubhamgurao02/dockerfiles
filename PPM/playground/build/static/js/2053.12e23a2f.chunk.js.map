{"version":3,"file":"static/js/2053.12e23a2f.chunk.js","mappings":"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","sources":["views/RevenueMetrices/InDirectS.js","views/RevenueMetrices/SelectedItems.js","views/RevenueMetrices/SelectS.js","views/RevenueMetrices/Modal.js","views/RevenueMetrices/MonthlyPRGraph.js","views/RevenueMetrices/MonthlyPRPopup.js","views/RevenueMetrices/MonthyPRPopOver.js","views/RevenueMetrices/MonthlyPRMaterialTable.js","views/RevenueMetrices/MonthlyPRChangesByDay.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n\nexport default function InDirectSE(params) {\n\n    const {employeeElement,selectedSE,data,showInactive,search} = params;\n \n    const [indirectseList,setindirectseList] = useState([])\n\n    \n    useEffect(()=>{\n        setindirectseList(() => data.filter((item => item.status !== (showInactive ? \"\" : \"empInactive\"))).filter((item)=>{ return item.salesPersonName.toLowerCase().includes(search)}).map((item)=>{return(employeeElement(item))}))\n    },[selectedSE,showInactive,data,search])\n\n\n    return(\n        <div className=\"option col-md-3\">\n           {indirectseList.length === 0 && <div className=\"col-md-12\" id=\"noExecDiv\">No Customers found</div>}       \n            {indirectseList}\n        </div>\n    );\n}","export default function (props) {\n\n    const { selectedSEDisp } = props;\n    return (\n        <div className=\"col-md-12 customCard Scroll\">\n            {selectedSEDisp.length === 0 ? \"None Selected\" : selectedSEDisp}\n            <div className=\"clearfix\" style={{ height: '10px' }}></div>\n        </div>\n    );\n}","import { useState, useEffect, forwardRef, useImperativeHandle } from \"react\"\nimport InDirectSE from \"./InDirectS\"\nimport SelectedItems from \"./SelectedItems\"\n// import VirtualTeams from \"./VirtualTeams\"\n// import DirectSE from \"./DirectSE\"\nimport fte_active from '../../assets/images/empstatusIcon/fte_active.png'\nimport fte_inactive from '../../assets/images/empstatusIcon/fte_inactive.png'\nimport fte_notice from '../../assets/images/empstatusIcon/fte_notice.png'\nimport subk_active from '../../assets/images/empstatusIcon/subk_active.png'\nimport subk_inactive from '../../assets/images/empstatusIcon/subk_inactive.png'\nimport subk_notice from '../../assets/images/empstatusIcon/subk_notice.png'\nimport { environment } from '../../environments/environment';\nimport axios from \"axios\"\nimport './SelectedSE.scss'\n\nconst SelectSE = forwardRef((props, ref) => {\n    const baseUrl = environment.baseUrl;\n    const [showInactive, setShowInactive] = useState(false)\n    const [selectedSE, setselectedSE] = useState([]);\n    const [selectedSEDisp, setselectedSEDisp] = useState([])\n    const [allIndirectSelected, setallIndirectSelected] = useState(false)\n    const [indirectData, setIndirectdata] = useState([])\n    const [isIndividual, setisIndividual] = useState(false)\n    const [search, setSearch] = useState(\"\")\n\n    // const icons = {\n    //     fte0:<img src={fte_inactive} alt='(fte_inactive_icon)' style={{height:'12px'}} title='Ex-Employee'/>,\n    //     fte1:<img src={fte_active} alt='(fte_active_icon)' style={{height:'12px'}} title='Active Employee'/>,\n    //     fte2:<img src={fte_notice} alt='(fte_notice_icon)' style={{height:'12px'}} title='Employee in notice period'/>,\n    //     subk0:<img src={subk_inactive} alt='(subk_inactive_icon)' style={{height:'12px'}} title='Ex-Contractor'/>,\n    //     subk1:<img src={subk_active} alt='(subk_active_icon)' style={{height:'12px'}} title='Active Contractor'/>,\n    //     subk2:<img src={subk_notice} alt='(subk_notice_icon)' style={{height:'12px'}} title='Contractor in notice period'/>,\n    // }\n\n    //---------------------------refMethod------------------------------------\n\n    useImperativeHandle(ref, () => ({\n        setGlobalState() {\n            localStorage.setItem('selectedSE', JSON.stringify(selectedSE));\n            localStorage.setItem('isIndividual', isIndividual)\n        },\n        resetTOlocalState() {\n            const localSE = (localStorage.getItem('selectedSE')) === null ? [] : JSON.parse(localStorage.getItem('selectedSE'))\n            setselectedSE(localSE);\n            setisIndividual(localStorage.getItem('isIndividual') === \"true\" ? true : false);\n        }\n    }));\n\n    // //---------------------------method------------------------------------------\n    const onSelectSE = (emp) => {\n        setselectedSE(prevState => { return prevState.some(el => el.id === emp.id) ? prevState.filter((item) => { return item.id !== emp.id }) : [...prevState, emp] })\n    }\n\n    const employeeElement = (emp) => {\n        return (\n            <span key={emp.id} className=\"option col-md-12\" style={{ width: '150px', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n                <input type=\"checkbox\" id={emp.id} name={emp.salesPersonName} onChange={(e) => onSelectSE(emp)} checked={selectedSE.some(el => el.id === emp.id)}></input>&nbsp;\n\n                &nbsp;\n                <span title={emp.salesPersonName}  >{emp.salesPersonName}</span>\n            </span>\n        )\n    }\n\n    const selectAllIndirect = () => {\n        !allIndirectSelected ?\n            setselectedSE(prevState => {\n                const empId = prevState.map(item => item.id)\n                const newArray = indirectData.filter((item => item.status !== (showInactive ? \"\" : \"empInactive\"))).filter(item => !(empId.includes(item.id)))\n                return [...prevState, ...newArray]\n            }) :\n            setselectedSE(prevState => {\n                const empId = indirectData.map(item => item.id)\n                const newArray = prevState.filter(item => !(empId.includes(item.id)))\n                return newArray\n            })\n        setallIndirectSelected(prevState => !prevState)\n    }\n\n    const getIndirectData = () => {\n        axios.get(baseUrl + `/SalesMS/MasterController/getInDirectSalesExecutiveTreeData?userId=512`)\n            .then((resp) => {\n                const data = resp.data;\n                setIndirectdata(data);\n            })\n            .catch((resp) => {\n                console.log(resp)\n            })\n    }\n\n\n    // //--------------------------------useEffect------------------------------------------\n    useEffect(() => {\n        setselectedSEDisp(() => {\n            return selectedSE.filter((item) => { return item.salesPersonName.toLowerCase().includes(search) }).map((item) => { return (employeeElement(item)) })\n        })\n    }, [selectedSE, search])\n\n    useEffect(() => {\n        setselectedSE((prevState) => { return prevState.filter(el => el.status === \"empActive\") })\n    }, [showInactive])\n\n    useEffect(() => {\n        getIndirectData();\n        const localSE = (localStorage.getItem('selectedSE')) === null ? [] : JSON.parse(localStorage.getItem('selectedSE'))\n        setselectedSE(localSE);\n        setisIndividual(localStorage.getItem('isIndividual') === \"true\" ? true : false);\n    }, [])\n\n    return (\n        <div className=\"col-md-12\">\n\n            <div className=\"col-md-12\">\n                <div className=\"col-md-3 nopadding\">\n                    <input type=\"text\" placeholder=\" Type to Search\" onChange={(e) => setSearch(e.target.value.toLowerCase())} style={{ borderRadius: \"5px\" }}></input>\n                </div>\n\n\n            </div>\n            <div className=\"col-md-12 clearfix\" style={{ height: '10px' }}></div>\n            <div className=\"col-md-3\">\n                <label >Selected Items</label>&nbsp;\n                <input type=\"checkbox\" id=\"SelectedItems\" name=\"SelectedItems\" onChange={() => { setselectedSE([]) }} checked={selectedSE.length > 0}></input>&nbsp;\n            </div>\n            <div className=\"col-md-12\">\n                <SelectedItems selectedSEDisp={selectedSEDisp} />\n            </div>\n            <div className=\"col-md-12 clearfix\" style={{ height: '10px' }}></div>\n\n            <div className=\"col-md-12 nopadding\">\n\n                {/* <div className=\"col-md-3 pr0\">\n                <div className=\"col-md-12 customCard\">\n                    <DirectSE onSelectSE={onSelectSE} showInactive={showInactive}/>\n                </div>\n                \n            </div> */}\n\n                <div className=\"col-md-12\">\n\n                    <div className=\"col-md-12 customCard\">\n                        <div className=\"col-md-6\">\n                            <label >All Customers</label>&nbsp;\n                            <input type=\"checkbox\" onChange={selectAllIndirect} checked={allIndirectSelected}></input>\n                        </div>\n                        <div className=\"col-md-12 clearfix\" style={{ height: '20px' }}></div>\n                        <InDirectSE employeeElement={employeeElement} selectedSE={selectedSE} data={indirectData} showInactive={showInactive} search={search} />\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>)\n})\n\nexport default SelectSE;","import React, { useState } from \"react\";\nimport { useRef } from \"react\";\n\nimport SelectS from \"./SelectS\";\nimport { CModal } from \"@coreui/react\";\nimport { CModalBody } from \"@coreui/react\";\nimport { CModalFooter } from \"@coreui/react\";\nimport { CModalHeader } from \"@coreui/react\";\nimport { CModalTitle } from \"@coreui/react\";\nimport { CButton } from \"@coreui/react\";\nimport { useDispatch } from \"react-redux\";\nimport { undoSaveSelectSE } from \"../../reducers/SelectedSEReducer\";\n\nexport default function Modal({ open, children, onClose }) {\n  if (!open) return null;\n  const selectSERef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <div className=\"box\">\n        {/* {children} \n      <button onClick={onClose}>Close</button> */}\n\n        <CModal visible={open} onClose={() => setIsOpen(false)} size=\"xl\">\n          <CModalHeader>\n            <CModalTitle>Select Customers/Prospects</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <SelectS ref={selectSERef} />\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              onClick={() => {\n                dispatch(undoSaveSelectSE(\"undo\"));\n                selectSERef.current.resetTOlocalState();\n              }}\n            >\n              Undo\n            </CButton>\n            <CButton\n              onClick={() => {\n                selectSERef.current.setGlobalState();\n                dispatch(undoSaveSelectSE(\"save\"));\n                setIsOpen(false);\n              }}\n            >\n              Save\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { format, parseISO, parse } from \"date-fns\";\n\nexport default function MonthlyPRGraph(props) {\n\n    const { filterData } = props;\n    console.log(filterData, \"filterData............\")\n    let fdata = {};\n    let pldata = {};\n    // console.log(Object.keys(filterData))\n    // console.log(filterData)\n    Object.keys(filterData).forEach((key) => {\n        //   console.log(\"key..........\" + key)\n        if (key.includes(\"plRevDelta\")) {\n\n            const dateKey = key.substring(0, 10);\n            const date = parseISO(dateKey.replace(/_/g, \"-\"));\n            //  console.log(date)\n            const formattedDateKey = format(date, \"dd-MMM-yyyy\");\n            fdata[formattedDateKey] = filterData[key];\n            // fdata[key] = filterData[key];\n        } else if (key.includes(\"plRev\")) {\n\n            console.log(key, \"keys.................\")\n            console.log(\"key..........\" + filterData[key])\n            const dateKey = key.substring(0, 10);\n            console.log(dateKey + \"in line 27...\")\n            const date = parseISO(dateKey.replace(/_/g, \"-\"));\n            const formattedDateKey = format(date, \"dd-MMM-yyyy\");\n            pldata[formattedDateKey] = filterData[key];\n            // console.log(filterData[key], \" \", pldata[formattedDateKey])\n\n        }\n    })\n\n    // const sortedDates = Object.keys(plRev).map((key) => new Date(key)).sort((a, b) => a - b);\n\n    // Create a new object with sorted data\n    // const sortedPlRev = {};\n    // sortedDates.forEach((date) => {\n    //     const dateString = date.toLocaleDateString('en-US', { day: '2-digit', month: 'short', year: 'numeric' });\n    //     sortedPlRev[dateString] = plRev[dateString];\n    // });\n\n    console.log(pldata, \"pldata..........\")\n    const sortedDates = Object.keys(fdata).sort((a, b) => {\n        return new Date(a) - new Date(b);\n    });\n\n    const sortedFteData = {};\n    sortedDates.forEach((date) => {\n        sortedFteData[date] = fdata[date];\n    });\n\n    console.log(sortedFteData, \"sortedFteData..................\")\n    const sortedPldata = {};\n    Object.keys(pldata)\n        .sort((dateA, dateB) => new Date(dateA) - new Date(dateB))\n        .forEach(date => {\n            sortedPldata[date] = pldata[date];\n        });\n\n    // console.log(Object.keys(sortedFteData).map(key => key.split(\"-\")[0]), \"sortedFteData....................\");\n    //console.log(Object.keys(sortedPldata).map(key => key.split(\"-\")[0]))\n\n    const fteData1ChartConfig = {\n        chart: {\n            type: 'line',\n        },\n        title: {\n            text: 'Delta',\n        },\n        exporting: { enabled: true },\n        xAxis: {\n            categories: Object.keys(sortedPldata).map(key => key.split(\"-\")[0]),\n            title: {\n                text: 'Days',\n            },\n        },\n        yAxis: {\n            tickInterval: 2500,\n            title: {\n                text: 'Revenue',\n            },\n        },\n\n\n        series: [\n\n            {\n                name: 'Delta',\n                data: Object.values(sortedFteData).map(value => Number(value)),\n            },\n        ],\n    };\n\n    const Plchart = {\n        chart: {\n            type: 'line',\n        },\n        title: {\n            text: 'Planned Revenue',\n        },\n        exporting: { enabled: true },\n        xAxis: {\n            categories: Object.keys(sortedPldata).map(key => key.split(\"-\")[0]),\n            title: {\n                text: 'Days',\n            },\n        },\n        yAxis: {\n            tickInterval: 2500,\n            title: {\n                text: 'Revenue',\n            },\n        },\n\n\n        series: [\n\n            {\n                name: 'Planned Revenue',\n                data: Object.values(sortedPldata).map(value => Number(value)),\n            },\n        ],\n    };\n    return (\n        <div className='col-12 row'>\n            <div className='col-6'>\n                <HighchartsReact\n                    highcharts={Highcharts}\n                    options={Plchart}\n                />\n            </div>\n\n            <div className='col-6'> <HighchartsReact\n                highcharts={Highcharts}\n                options={fteData1ChartConfig}\n            /></div>\n\n\n        </div>\n\n    )\n}\n","import React, { useEffect, useState } from \"react\";\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport Tooltip from \"@mui/material/Tooltip\";\n\nexport default function MonthlyPRPopup(props) {\n  const { actionItems, Pname, close, setOpenPopup } = props;\n  const [filteredData, setFilteredData] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  console.log(\"actionItems................\", actionItems);\n  const closeHandler = () => {\n    setOpenPopup(false);\n  };\n\n  useEffect(() => {\n    setHeaders(actionItems);\n    if (actionItems.length > 1) {\n      setFilteredData(actionItems);\n    } else {\n      setFilteredData([]);\n    }\n  }, [actionItems]);\n\n  const open = Boolean(close);\n  const id = open ? \"simple-popover\" : undefined;\n  const h = actionItems[0];\n  console.log(h);\n  const obj = [];\n  const orderedKeys = [\n    \"project\",\n    \"customer\",\n    \"itemdate\",\n    \"entryDt\",\n    \"entryBy\",\n    \"comments\",\n  ];\n\n  for (let key of orderedKeys) {\n    if (h && h.hasOwnProperty(key)) {\n      obj.push({ field: key, header: h[key] });\n    }\n  }\n\n  const renderTooltip = (rowData, column) => {\n    const value = rowData[column.field];\n    console.log(\"value>>>>>>>>>>>>>>>\", value);\n    return (\n      <Tooltip title={value} arrow>\n        <div\n          style={{\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n            textOverflow: \"ellipsis\",\n          }}\n        >\n          {value}\n        </div>\n      </Tooltip>\n    );\n  };\n  const columns = [\n    { field: \"project\", header: \"Project\" },\n    { field: \"customer\", header: \"Customer\" },\n    { field: \"itemdate\", header: \"Itemdate\" },\n    { field: \"entryBy\", header: \"EntryBy\" },\n    { field: \"entryDt\", header: \"EntryDt\" },\n    { field: \"comments\", header: \"Comments\" },\n    // { field: 'id', header: 'id' },\n  ];\n\n  return (\n    <div className=\"col-8 mt-5\">\n      {\n        <div style={{ width: \"810px\", height: \"115px\" }}>\n          <div\n            className=\"col-md-12 header padding\"\n            style={{ border: \"1px solid #ddd\", marginTop: \"10px\" }}\n          >\n            <span\n              align=\"center\"\n              style={{ fontSize: \"13px\", top: \"250px\", color: \"#2E88C5\" }}\n            >\n              {Pname}\n            </span>\n            <button\n              title=\"Close\"\n              style={{\n                float: \"right\",\n                marginRight: \"-10px\",\n                height: \"33px\",\n                width: \"23px\",\n              }}\n              className=\"button1\"\n              onClick={closeHandler}\n            >\n              x\n            </button>\n          </div>\n          <div className=\"darkHeader\">\n            <DataTable\n              showGridlines\n              style={{ fontSize: \"12px\" }}\n              value={actionItems}\n              emptyMessage=\"No Records found.\"\n            >\n              {/* {obj.map((col, i) => (\n                            <Column key={col.field} field={col.field} header={col.header} body={renderTooltip} />\n                        ))} */}\n\n              {columns.map((col, i) => (\n                <Column key={col.field} field={col.field} header={col.header} />\n              ))}\n            </DataTable>\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n","import { DialogContent, DialogTitle, Popover } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport { InputText } from \"primereact/inputtext\";\nimport { RiSave3Fill } from \"react-icons/ri\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\nimport { AiFillWarning } from \"react-icons/ai\";\nimport moment from \"moment/moment\";\n\nexport default function MonthlyPRPopOver(props) {\n  const {\n    setOpenPopOver,\n    actionItem,\n    Pname,\n    close,\n    handleClose,\n    projetId,\n    USerId,\n    ItemDate,\n    dataAccess,\n  } = props;\n\n  const [editedComment, setEditedComment] = useState(\"\");\n  const [validationmessage, setValidationMessage] = useState(false);\n  const [change, setChange] = useState(false);\n  const [modidicationmessage, setModidicationMessage] = useState(false);\n  const baseUrl = environment.baseUrl;\n  useEffect(() => {\n    console.log(\"in line 18---\");\n    console.log(actionItem);\n  }, []);\n\n  const closeHandler = () => {\n    setOpenPopOver(false);\n  };\n\n  const open = Boolean(close);\n  // setOpenPopOver(false);\n  const id = open ? \"simple-popover\" : undefined;\n  const renderTooltip = (rowData, column) => {\n    const value = rowData[column.field];\n    return (\n      <Tooltip title={value} arrow>\n        <div\n          style={{\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n            textOverflow: \"ellipsis\",\n          }}\n        >\n          {value}\n        </div>\n      </Tooltip>\n    );\n  };\n  const CommentsEditor = ({ value, onChange }) => {\n    const handleChange = (event) => {\n      const newValue = event.target.value;\n      setEditedComment(newValue); // Update the editedComment state with the new comment value\n      onChange(event); // Call the onChange event to update the value in the DataTable\n    };\n\n    return <InputText value={value} onChange={handleChange} />;\n  };\n\n  const cellEditor = (options) => {\n    if (options.field === \"comments\")\n      return (\n        <CommentsEditor\n          style={{ width: \"10px\" }}\n          value={options.value}\n          onChange={(e) => {\n            options.editorCallback(e.target.value);\n            actionItem[0][\"comments\"] = e.target.value;\n            setChange(true);\n          }}\n        />\n      );\n  };\n\n  console.log(editedComment, \"------------------------------\");\n  console.log(actionItem);\n  const saveActionItems = () => {\n    if (editedComment == \"\") {\n      setValidationMessage(true);\n    } else {\n      setValidationMessage(false);\n\n      axios({\n        method: \"post\",\n        //    url: baseUrl + `/ProjectMS/PlannedActivities/getCustPlRevProgress`,\n        url: baseUrl + `/ProjectMS/PlannedActivities/saveActionItemData`,\n\n        data: {\n          comments: editedComment,\n          project_id: projetId,\n          item_date: ItemDate,\n          created_by: USerId,\n        },\n      })\n        .then((resp) => {\n          setValidationMessage(false);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  const onCellEditComplete = (e) => {};\n\n  const onClickHandler = (event) => {\n    if (editedComment != \"\") {\n      saveActionItems();\n      handleClose();\n    } else {\n      saveActionItems();\n      // handleClose();\n    }\n  };\n  const handleBodyEntryDt = (data) => {\n    return (\n      <span id=\"entryDt\" title={data.entryDt}>\n        {moment(data.entryDt).format(\"DD-MMM-YYYY\")}\n      </span>\n    );\n  };\n\n  const handleBodyEntryBy = (data) => {\n    return (\n      <span id=\"entryBy\" title={data.entryBy}>\n        {data.entryBy}\n      </span>\n    );\n  };\n\n  const handleBodyItemdate = (data) => {\n    return (\n      <span id=\"itemdate\" title={data.itemdate}>\n        {moment(data.itemdate).format(\"DD-MMM-YYYY\")}\n      </span>\n    );\n  };\n  const handleBodyComments = (data) => {\n    return (\n      <span id=\"comments\" title={data.comments}>\n        {data.comments}\n      </span>\n    );\n  };\n\n  return (\n    <div>\n      {actionItem[0] != undefined && (\n        <Popover\n          id={id}\n          open={open}\n          onClose={handleClose}\n          close={handleClose}\n          anchor={{\n            top: \"257px !important\",\n            left: \"255px !important\",\n            position: \"bottom !important\",\n          }}\n          size=\"xl\"\n        >\n          <div\n            className=\"montlyPrPopup\"\n            style={{ width: \"810px\", height: \"115px\" }}\n          >\n            {validationmessage == true ? (\n              <div className=\"statusMsg error\">\n                <AiFillWarning size=\"1.4em\" />\n                <span>\n                  Please select the valid values for highlighted fields\n                </span>\n              </div>\n            ) : (\n              \"\"\n            )}\n\n            {modidicationmessage == true ? (\n              <div className=\"statusMsg error\">\n                <AiFillWarning size=\"1.4em\" />\n                <span>No Modifications found to save</span>\n              </div>\n            ) : (\n              \"\"\n            )}\n\n            <DialogTitle className=\"header padding\">\n              <div\n                className=\"col-md-12\"\n                style={{ height: \"28px\", marginTop: \"-21px\" }}\n              >\n                <span\n                  align=\"center\"\n                  style={{ fontSize: \"13px\", top: \"250px\", color: \"#2E88C5\" }}\n                >\n                  {Pname}\n                </span>\n                <button\n                  title=\"Close\"\n                  style={{\n                    float: \"right\",\n                    marginRight: \"-10px\",\n                    height: \"33px\",\n                    width: \"23px\",\n                  }}\n                  className=\"button1\"\n                  onClick={handleClose}\n                >\n                  x\n                </button>\n              </div>\n            </DialogTitle>\n\n            <DialogContent>\n              <div className=\"darkHeader\">\n                <DataTable\n                  value={actionItem}\n                  tableStyle={{ minWidth: \"38rem\" }}\n                  showGridlines\n                  editMode=\"cell\"\n                >\n                  <Column\n                    field=\"entryDt\"\n                    header=\"Entry Date\"\n                    body={handleBodyEntryDt}\n                  ></Column>\n                  <Column\n                    field=\"entryBy\"\n                    header=\"Entry By\"\n                    body={handleBodyEntryBy}\n                  ></Column>\n                  <Column\n                    field=\"itemdate\"\n                    header=\"Item Date\"\n                    body={handleBodyItemdate}\n                  ></Column>\n                  {dataAccess === 100 && (\n                    <Column\n                      field=\"comments\"\n                      header=\"Comments\"\n                      body={handleBodyComments}\n                      editor={(options) => cellEditor(options)}\n                      onCellEditComplete={onCellEditComplete}\n                    ></Column>\n                  )}\n                  {dataAccess === 100 && (\n                    <Column\n                      field=\"\"\n                      header=\"Action Item\"\n                      body={\n                        <center>\n                          <a style={{ cursor: \"pointer\" }}>\n                            <RiSave3Fill\n                              onClick={onClickHandler}\n                              title=\"Save\"\n                            />\n                          </a>\n                        </center>\n                      }\n                    ></Column>\n                  )}\n                </DataTable>\n              </div>\n            </DialogContent>\n          </div>\n        </Popover>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport MaterialReactTable from \"material-react-table\";\nimport { Button, IconButton } from \"@mui/material\";\nimport { AiFillRightCircle } from \"react-icons/ai\";\nimport { Link } from \"react-router-dom\";\nimport MonthlyPRGraph from \"./MonthlyPRGraph\";\n\n// import { ExportToCsv } from 'export-to-csv';\nimport { VscChecklist } from \"react-icons/vsc\";\nimport MonthlyPRPopup from \"./MonthlyPRPopup\";\nimport moment from \"moment/moment\";\nimport axios from \"axios\";\nimport \"./MonthlyPRMaterialTable.scss\";\n\nimport MonthlyPRPopOver from \"./MonthyPRPopOver\";\nimport { environment } from \"../../environments/environment\";\nimport { TableContainer } from \"@material-ui/core\";\nimport { BiChevronLeft, BiChevronRight } from \"react-icons/bi\";\n\nexport default function MonthlyPRMaterialTable(props) {\n  const baseUrl = environment.baseUrl;\n  const { data, expandedCols, colExpandState, dataAccess } = props;\n  const [nodes, setNodes] = useState([]);\n  const [columns, setColumns] = useState(null);\n  const [hiddenColumns, setHiddenColumns] = useState({});\n  const [colExpFlag, setColumnExpFlag] = useState(false);\n  const [headers, setHeaders] = useState([]);\n  const [graph, setGraph] = useState(false);\n  const [filterData, setFilterData] = useState([]);\n  const [openPopup, setOpenPopup] = useState(false);\n  const [openPopOver, setOpenPopOver] = useState(false);\n  const [close, setClose] = useState(false);\n  const [Pname, setPname] = useState();\n  const [actionItems, setActionItems] = useState([]);\n  const [actionItem, setActionItem] = useState([]);\n  const [customer, setCustomer] = useState();\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    // const container = containerRef.current.children[0].children[0].children[0];\n    // if (container) {\n    //   container.scrollLeft = container.scrollWidth;\n    // }\n\n    // console.log(\"in line 44\");\n\n    const container = containerRef.current;\n    // console.log(container);\n    // console.log(container.children);\n    if (container.children[0] != undefined) {\n      // console.log(container.children[0]);\n      setTimeout(() => {\n        if (container) {\n          container.children[0].children[0].children[0].scrollLeft =\n            container.children[0].children[0].children[0].scrollWidth;\n        }\n      }, 1000);\n    }\n  }, [nodes.length]);\n\n  console.log(graph, \"graph..........................................\");\n  useEffect(() => {\n    getData();\n    setGraph(false);\n  }, [data]);\n\n  const elementRef = useRef(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n\n    if (element) {\n      element.style.right = \"0\"; // Set the element to the right side\n    }\n  }, []);\n\n  const graphRef = useRef(null);\n  const actionRef = useRef(null);\n  const [graphKey, setGraphKey] = useState(0);\n  const [actionKey, setActionKey] = useState(0);\n  useEffect(() => {\n    if (graphKey && graphRef.current) {\n      graphRef.current.scrollIntoView({ behavior: \"instant\" });\n    }\n  }, [graphKey]);\n  useEffect(() => {\n    if (actionKey && actionRef.current) {\n      actionRef.current.scrollIntoView({ behavior: \"instant\" });\n    }\n  }, [actionKey]);\n\n  const numberWithCommas = (x) => {\n    return x?.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  console.log(data, \"data..................\");\n  const onClickHandler = (e) => {\n    data.tableData.map((element) => {\n      if (\n        (element[\"dispName\"].includes(e) && element[\"lvl\"] == 1) ||\n        element[\"lvl\"] == 0\n      ) {\n        setGraph(true);\n        setFilterData(element);\n        setGraphKey((prevKey) => prevKey + 1);\n        setCustomer(element.customer);\n      }\n    });\n  };\n\n  const currentDate = new Date();\n  const currentMonth = currentDate.getMonth();\n  const currentYear = currentDate.getFullYear();\n  const firstDayOfMonth = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\n  const fday = moment(firstDayOfMonth).format(\"yyyy-MM-DD\");\n  const lday = moment(lastDayOfMonth).format(\"yyyy-MM-DD\");\n  const eDate = new Date().toLocaleDateString();\n  const EntryDate = moment(eDate).format(\"yyyy-MM-DD\");\n  const [itemdate, setItemdate] = useState();\n  const [pid, setPid] = useState();\n  let OverView = true;\n  let UserId = localStorage.getItem(\"resId\");\n  let User = localStorage.getItem(\"resName\");\n  let type = \"\";\n  const updatedActionItem = {};\n\n  const getActionItems = (projetId) => {\n    type = \"prj\";\n    let subKey = \"\";\n    OverView = false;\n    axios({\n      method: \"get\",\n      // url: baseUrl + `/ProjectMS/Engagement/getDPDropDownData?userId=19042`,\n      url:\n        baseUrl +\n        `/ProjectMS/PlannedActivities/getAllActionItems?projectId=${projetId}&runDt=${subKey}&OverView=${OverView}&fday=${fday}&lday=${lday}&type=${type}`,\n    })\n      .then((resp) => {\n        const data = resp.data;\n        setActionItems(data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  console.log(\"actionItems>>>>>>>>>>>>>.\", actionItems);\n  // useEffect(() => {\n  //     console.log(\"in line 94------\")\n  //     setOpenPopOver(true);\n  // }, [actionItems])\n\n  // useEffect(() => {\n  //     // setOpenPopOver(true);\n  // }, [actionItem])\n\n  const getActionItemFnc = (projetId, subKey) => {\n    (type = \"prj\"), (OverView = false);\n    axios({\n      method: \"get\",\n      // url: baseUrl + `/ProjectMS/Engagement/getDPDropDownData?userId=19042`,\n      url:\n        baseUrl +\n        `/ProjectMS/PlannedActivities/getActionItems?projectId=${projetId}&runDt=${subKey}&OverView=${OverView}&fday=${fday}&lday=${lday}&type=${type}`,\n    })\n      .then((resp) => {\n        //  console.log(\"in line 108\")\n        const data = resp.data;\n        //  console.log(data, \"data................\")\n        if (data.length == 0) {\n          let comments = \"\";\n          let entryDt = EntryDate;\n          let itemdate = subKey;\n          let entryBy = User;\n          const val = [entryDt, entryBy, itemdate, comments];\n          const orderedKeys = [\"entryDt\", \"entryBy\", \"itemdate\", \"comments\"];\n          for (let i = 0; i < orderedKeys.length; i++) {\n            updatedActionItem[orderedKeys[i]] = val[i];\n          }\n          setActionItem([...actionItems, updatedActionItem]);\n        } else if (data.length == 1) {\n          setActionItem(data);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    //  console.log(actionItem, \"actionItems...............................................................\")\n  };\n\n  //   console.log(actionItem, \"actiomItem in parent...........\")\n  const handleClose = () => {\n    setClose(false);\n    setOpenPopOver(false);\n    setOpenPopup(false);\n  };\n\n  const handleClick = (event) => {\n    setOpenPopup(true), setClose(true);\n    setPname(event.getValue());\n    setPid(event.row.original.id);\n    getActionItems(event.row.original.id);\n    setActionKey((prevKey) => prevKey + 1);\n  };\n\n  const handleOnClick = (event) => {\n    setClose(true);\n    setOpenPopOver(true);\n    setPname(event.row.original.dispName);\n\n    let key = event.id;\n    let subkey = key.includes(\"_\") ? key.split(\"_\") : \"\";\n    subkey = subkey.slice(1, 4).join(\"-\");\n    setItemdate(subkey);\n    setPid(event.row.original.id);\n    getActionItemFnc(event.row.original.id, subkey);\n  };\n  // console.log(itemdate)\n  const getData = () => {\n    let tableData = data?.tableData;\n    let columns = null;\n\n    if (data?.columns?.includes(\"'\")) {\n      columns = data?.columns?.replaceAll(\"'\", \"\");\n    } else {\n      columns = data?.vmgPerformance;\n    }\n    let colArr = columns?.split(\",\");\n    let newHeaders = [];\n    let hiddenHeaders = [];\n    const obj = {};\n    for (let i = 0; i < colArr?.length; i++) {\n      let colVal = colArr[i].trim();\n\n      let firstData = tableData[0];\n      obj[colVal] = firstData[colVal];\n    }\n\n    let headerArray = Object.entries(obj);\n    let filteredHeaders = headerArray.filter(\n      ([key, value]) => typeof value === \"string\" && value.includes(\"^&\")\n    );\n\n    setHeaders(filteredHeaders.sort((a, b) => a - b));\n    console.log(headerArray);\n    headerArray.map(([key, value]) => {\n      if (expandedCols.includes(key)) {\n        hiddenHeaders.push({ [key]: false, className: \"mixer\" });\n      }\n    });\n    console.log(hiddenHeaders);\n    setHiddenColumns(Object.assign({}, ...hiddenHeaders));\n    console.log(hiddenColumns);\n\n    let minusOneRow = tableData?.filter((d) => d.id == -1);\n    filteredHeaders.map(([key, value], index) => {\n      newHeaders.push({\n        accessorKey: key,\n        header: value,\n        enableColumnActions: false,\n        enableHiding: true,\n        Header: ({ column }) => (\n          <div\n            className={\n              key == \"dispName\"\n                ? \"mixer\"\n                : \"\" || key == \"csl\"\n                ? \"mixer csl\"\n                : \"\" || key == \"dp\"\n                ? \"mixer dp\"\n                : \"\" || key == \"pm\"\n                ? \"mixer pm\"\n                : \"\"\n            }\n          >\n            {value?.split(\"^&\")[0]}{\" \"}\n            {key == colExpandState[2] ? (\n              <IconButton\n                onClick={() => {\n                  setColumnExpFlag((prev) => !prev);\n                }}\n              >\n                {colExpFlag ? (\n                  <BiChevronLeft style={{ fontSize: \"20px\" }} />\n                ) : (\n                  <BiChevronRight style={{ fontSize: \"20px\" }} />\n                )}\n              </IconButton>\n            ) : null}\n          </div>\n        ),\n      });\n    });\n\n    let subHeaders = minusOneRow && Object.entries(minusOneRow[0]);\n    subHeaders?.sort();\n\n    newHeaders.map((data) => {\n      let i = newHeaders.indexOf(data);\n      let subArray = [];\n      subHeaders.map(([key, value], index) => {\n        if (key.includes(\"_\")) {\n          let subkey = key.includes(\"_\") ? key.split(\"_\") : \"\";\n          subkey = subkey.slice(0, 2).join(\"_\");\n          if (data.accessorKey.includes(subkey)) {\n            let obj = {\n              id: key,\n              header: value,\n              accessorKey: key,\n              Cell: ({ cell }) => {\n                return (\n                  <div\n                    className={\n                      key.includes(\"plRevDelta\")\n                        ? \"delta\"\n                        : key.includes(\"plRev\")\n                        ? \"plRev\"\n                        : key.includes(\"csl\")\n                        ? \"csl\"\n                        : key.includes(\"pm\")\n                        ? \"pm\"\n                        : key.includes(\"dp\")\n                        ? \"dp\"\n                        : \"summary\"\n                    }\n                  >\n                    {cell.row.original.projectId == 0 ? (\n                      key.includes(\"Delta\") == true ? (\n                        cell.getValue() > 0 ? (\n                          <div style={{ color: \"green\" }}>\n                            {numberWithCommas(cell.getValue())}\n                          </div>\n                        ) : cell.getValue() == 0 ? (\n                          cell.getValue()\n                        ) : (\n                          <div style={{ color: \"red\" }}>\n                            {numberWithCommas(cell.getValue())}\n                          </div>\n                        )\n                      ) : (\n                        numberWithCommas(cell.getValue())\n                      )\n                    ) : key.includes(\"Delta\") == true &&\n                      cell.row.original.projectId != 0 ? (\n                      cell.getValue() > 0 ? (\n                        <div style={{ color: \"green\" }}>\n                          {numberWithCommas(cell.getValue())}\n                          <a onClick={() => handleOnClick(cell)}>\n                            <VscChecklist />\n                          </a>\n                        </div>\n                      ) : cell.getValue() == 0 ? (\n                        <span>\n                          {cell.getValue()}\n                          <a onClick={() => handleOnClick(cell)}>\n                            <VscChecklist />\n                          </a>\n                        </span>\n                      ) : (\n                        <div style={{ color: \"red\" }}>\n                          <>\n                            {numberWithCommas(cell.getValue())}\n                            <a onClick={() => handleOnClick(cell)}>\n                              <VscChecklist />\n                            </a>\n                          </>\n                        </div>\n                      )\n                    ) : (\n                      numberWithCommas(cell.getValue())\n                    )}\n                  </div>\n                );\n              },\n            };\n            subArray.push(obj);\n          }\n        } else {\n          if (key == data.accessorKey) {\n            let obj = {\n              id: key,\n              header: \"\",\n              accessorKey: key,\n              Cell: ({ cell }) => {\n                return (\n                  <div className=\"row\">\n                    {cell.column.id == \"dispName\" &&\n                    cell.row.original.lvl == 1 ? (\n                      <div className=\"externalValues\">\n                        <a\n                          title=\"Action Items\"\n                          onClick={() => handleClick(cell)}\n                        >\n                          <VscChecklist />\n                        </a>\n                        <a\n                          className={\n                            key.includes(\"csl\")\n                              ? \"csl ellipsis\"\n                              : key.includes(\"pm\")\n                              ? \"pm ellipsis\"\n                              : key.includes(\"dp\")\n                              ? \"dp ellipsis\"\n                              : \" ellipsis\"\n                          }\n                          style={{\n                            overflow: \"hidden\",\n                            whiteSpace: \"nowrap\",\n                            textOverflow: \"ellipsis\",\n                          }}\n                          title={cell.getValue()}\n                          onClick={() => onClickHandler(cell.getValue())}\n                        >\n                          {cell.getValue()}\n                        </a>\n                      </div>\n                    ) : cell.row.original.dispName === \"Summary\" ? (\n                      <a\n                        href=\"#\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          setGraph(true);\n                          onClickHandler(cell.getValue());\n                        }}\n                      >\n                        {cell.getValue()}\n                      </a>\n                    ) : cell.row.original.lvl > 1 &&\n                      cell.column.id == \"dispName\" ? (\n                      <div>\n                        <a\n                          // className=\"col-1 \"\n                          title=\"Action Items\"\n                          onClick={() => handleClick(cell)}\n                        >\n                          <VscChecklist />\n                          &nbsp;{\" \"}\n                        </a>\n                        {/* <div className=\"ellipsis col-10 \"> */}\n                        <Link\n                          title={cell.getValue()}\n                          to={`/project/Overview/:${cell.row.original.projectId}`}\n                          target=\"_blank\"\n                          className=\"innerValues\"\n                        >\n                          <span\n                            style={{\n                              color: \"\",\n                              display: \"inline-block\",\n                              maxWidth: \"205px\",\n                              overflow: \"hidden\",\n                              textOverflow: \"ellipsis\",\n                              whiteSpace: \"nowrap\",\n                              verticalAlign: \"middle\",\n                              textDecoration: \"underline\",\n                            }}\n                          >\n                            {cell.getValue()}\n                          </span>\n                        </Link>{\" \"}\n                        {/* </div> */}\n                      </div>\n                    ) : (\n                      <div\n                        className={\n                          key.includes(\"csl\")\n                            ? \"csl ellipsis\"\n                            : key.includes(\"pm\")\n                            ? \"pm ellipsis\"\n                            : key.includes(\"dp\")\n                            ? \"dp ellipsis\"\n                            : \" ellipsis\"\n                        }\n                        style={{ width: \"100px\" }}\n                        title={cell.getValue()}\n                      >\n                        {cell.getValue()}\n                      </div>\n                    )}\n                  </div>\n                );\n              },\n            };\n            subArray.push(obj);\n          }\n        }\n      });\n      newHeaders[i].columns = subArray;\n    });\n\n    setColumns(newHeaders);\n    let values = [];\n    tableData?.map((d) => (d.id != -2 && d.id != -3 ? values.push(d) : \"\"));\n    let tempData = jsonToTree(values, { children: \"subRows\" });\n    setNodes(tempData.slice(1, tempData.length));\n  };\n\n  useEffect(() => {\n    getData();\n    colExpFlag ? setHiddenColumns({}) : colCollapse();\n  }, [colExpFlag]);\n\n  const colCollapse = () => {\n    let hiddenHeaders = [];\n    headers.map(([key, value]) => {\n      if (expandedCols.includes(key)) {\n        hiddenHeaders.push({ [key]: false });\n      }\n    });\n    setHiddenColumns(Object.assign({}, ...hiddenHeaders));\n  };\n  console.log(filterData, \"filterData...................\");\n  const jsonToTree = (flatArray, options) => {\n    options = {\n      id: \"uniqueId\",\n      parentId: \"parentId\",\n      children: \"subRows\",\n      ...options,\n    };\n    const dictionary = {};\n    const tree = [];\n    const children = options.children;\n    flatArray.forEach((node) => {\n      const nodeId = node[options.id];\n      const nodeParentId = node[options.parentId];\n      dictionary[nodeId] = {\n        [children]: [], // init a children property\n        ...node, // add other propertys\n        ...dictionary[nodeId], // children will be replaced if this node already has children property which was set below\n      };\n      dictionary[nodeParentId] = dictionary[nodeParentId] || { [children]: [] }; // if it's not exist in dictionary, init an object with children property\n      dictionary[nodeParentId][children].push(dictionary[nodeId]); // add reference to current node object in parent node object\n    });\n    Object.values(dictionary).forEach((obj) => {\n      if (typeof obj[options.id] === \"undefined\") {\n        tree.push(...obj[children]);\n      }\n    });\n    return tree;\n  };\n  const csvOptions = {\n    useKeysAsHeaders: true,\n    headers: columns?.map((c) => c.header),\n  };\n  console.log(\"hiddenColumns......................\", hiddenColumns);\n  return (\n    <div>\n      <div\n        className=\"materialReactExpandableTable1 monthlyPRMaterialTable darkHeader toHead\"\n        ref={containerRef}\n      >\n        {nodes.length ? (\n          <div>\n            <MaterialReactTable\n              ref={elementRef}\n              columns={columns}\n              data={nodes}\n              enableExpandAll={true} //hide expand all double arrow in column header\n              // enablePinning\n              enableRowVirtualization\n              enableExpanding\n              enablePagination={false}\n              enableBottomToolbar={false}\n              enableTopToolbar={false}\n              enableColumnActions={false}\n              enableSorting={true}\n              filterFromLeafRows //apply filtering to all rows instead of just parent rows\n              initialState={{\n                expanded: false,\n                density: \"compact\",\n                columnVisibility: { ...hiddenColumns },\n                // columnPinning: { left: [\"mrt-row-expand\", \"dispName\"] },\n              }} //expand all rows by default\n              state={{ columnVisibility: { ...hiddenColumns } }}\n              defaultColumn={{ minSize: 40, maxSize: 1000, size: 70 }} //units are in px\n              muiTableContainerProps={{\n                sx: {\n                  \"&\": {\n                    maxHeight: \"73vh\",\n                  },\n                },\n              }}\n              muiTableBodyProps={{\n                sx: {\n                  \"&\": {\n                    // borderBottom: \"1px solid #ccc\",\n                  },\n                  \"& td\": {\n                    borderRight: \"1px solid #ccc\",\n                    height: \"22px\",\n                    fontSize: \"11px\",\n                    paddingTop: \"0px\",\n                    paddingBottom: \"0px\",\n                  },\n                },\n              }}\n              muiTableHeadProps={{\n                sx: {\n                  \"& th\": {\n                    borderTop: \"1px solid #ccc\",\n                    borderRight: \"1px solid #ccc\",\n                    background: \"#f4f4f4 \",\n                    fontSize: \"11px\",\n                  },\n                },\n              }}\n            />\n          </div>\n        ) : null}\n\n        {graph && (\n          <div className=\"col-12 mt-5\" ref={graphRef} key={graphKey}>\n            <div\n              style={{ color: \"#333333\", fontSize: \"15px\", fontStyle: \"bold\" }}\n            >\n              <b>{\"Revenue Progression For \" + customer}</b>\n            </div>\n            <MonthlyPRGraph filterData={filterData} />\n          </div>\n        )}\n\n        {openPopOver ? (\n          <MonthlyPRPopOver\n            setOpenPopOver={setOpenPopOver}\n            openPopOver={openPopOver}\n            handleClose={handleClose}\n            close={close}\n            Pname={Pname}\n            actionItem={actionItem}\n            projetId={pid}\n            USerId={UserId}\n            ItemDate={itemdate}\n            dataAccess={dataAccess}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n      {openPopup ? (\n        <div ref={actionRef} key={actionKey}>\n          <MonthlyPRPopup\n            setOpenPopup={setOpenPopup}\n            openPopup={openPopup}\n            handleClose={handleClose}\n            close={close}\n            Pname={Pname}\n            actionItems={actionItems}\n          />{\" \"}\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n","import Modal from \"./Modal\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { MultiSelect } from \"react-multi-select-component\";\n\nimport MonthlyPRMaterialTable from \"./MonthlyPRMaterialTable\";\nimport Loader from \"../Loader/Loader\";\nimport { BiSearch } from \"react-icons/bi\";\nimport { CCollapse } from \"@coreui/react\";\nimport {\n  FaCaretDown,\n  FaChevronCircleDown,\n  FaChevronCircleUp,\n  FaSearch,\n} from \"react-icons/fa\";\nimport SelectCustDialogBox from \"../Customer/SelectCustDialogBox\";\nimport GlobalValidation from \"../ValidationComponent/GlobalValidation\";\nimport { environment } from \"../../environments/environment\";\nimport { SlExclamation } from \"react-icons/sl\";\nimport { AiFillWarning } from \"react-icons/ai\";\nimport { addMonths, startOfMonth, endOfMonth, isAfter } from \"date-fns\";\nimport { RiFileExcel2Line } from \"react-icons/ri\";\nimport GlobalHelp from \"../PrimeReactTableComponent/GlobalHelp\";\nimport ScreenBreadcrumbs from \"../Common/ScreenBreadcrumbs\";\n\nfunction MonthlyPRChangesByDay() {\n  const baseUrl = environment.baseUrl;\n  let flag = 3;\n  var d = new Date();\n  var year = d.getFullYear();\n  var month1 = d.getMonth();\n  var month = d.getMonth() - 1;\n  const currentDate = new Date();\n  const currentMonth = startOfMonth(currentDate);\n  const [details, setDetails] = useState([]);\n  // Determine the previous and next months based on the current date\n\n  const dayOfMonth = currentDate.getDate();\n  const previousMonth =\n    dayOfMonth <= 10 ? addMonths(currentMonth, -1) : currentMonth;\n  const nextMonth = dayOfMonth > 10 ? addMonths(currentMonth, 1) : currentMonth;\n  const minDate = startOfMonth(previousMonth);\n  const maxDate = endOfMonth(nextMonth);\n  const [isOpen, setIsOpen] = useState(false);\n  const [open, setOpen] = useState(false);\n  const type = \"roleWiseView\";\n  const [cslMultiselectDropdown, setcslMultiselectDropdown] = useState([]);\n  const [dpMultiselectDropdown, setDpMultiselectDropdown] = useState([]);\n  const [selectedCSL, setselectedCSL] = useState([]);\n  const [searchDataCus, setSearchDataCus] = useState(-1);\n  const [selectedDp, setselectedDp] = useState([]);\n  const [engcompanyMultiselectDropdown, setEngcompanyMultiselectDropdown] =\n    useState([]);\n  const [search, setSearch] = useState(false);\n\n  const [date, SetDate] = useState(new Date());\n  const [selectedEngcompany, setEngcompany] = useState([]);\n  const [scoreCardDataPayload, setscoreCardDataPayload] = useState({});\n  const [columns, setColumns] = useState([]);\n  const [resp, setResp] = useState([]);\n  const [validationmessage, setValidationMessage] = useState(false);\n  const [tableData, setTableData] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const results1 = [];\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const abortController = useRef(null);\n  const [visible, setVisible] = useState(false);\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [custVisible, setCustVisible] = useState(false);\n  const [custData, setcustData] = useState([]);\n  const [show, setShow] = useState(false);\n  const [dataAccess, setDataAccess] = useState(690);\n  const [data2, setData2] = useState([]);\n  const obj = {\n    customerIds: \"-1\",\n    FromDate: new Date(),\n    CSL: \"-1\",\n    DP: \"-1\",\n    EngCompany: \"-1\",\n    showDelta: true,\n    UserId: 512,\n  };\n\n  const [routes, setRoutes] = useState([]);\n  let textContent = \"Revenue Metrics\";\n  let currentScreenName = [\"Monthly PR Changes By Day\"];\n\n  useEffect(() => {\n    getMenus();\n  }, [dataAccess]);\n\n  const getMenus = () => {\n    // setMenusData\n\n    axios\n      .get(baseUrl + `/CommonMS/master/getMenus?loggedUserId=${loggedUserId}`)\n      .then((resp) => {\n        let getData = resp.data.map((menu) => {\n          if (menu.subMenus) {\n            menu.subMenus = menu.subMenus.filter(\n              (subMenu) =>\n                subMenu.display_name !== \"Monthly Revenue Trend\" &&\n                subMenu.display_name !== \"Revenue & Margin Variance\" &&\n                subMenu.display_name !== \"Rev. Projections\" &&\n                subMenu.display_name !== \"Project Timesheet (Deprecated)\" &&\n                subMenu.display_name !== \"Financial Plan & Review\"\n            );\n          }\n          return menu;\n        });\n        console.log(getData);\n        setData2(getData);\n\n        getData.forEach((item) => {\n          if (item.display_name === textContent) {\n            setRoutes([item]);\n          }\n        });\n        const monthlyPRChnagesPerDaySubMenu = getData\n          .find((item) => item.display_name === \"Revenue Metrics\")\n          .subMenus.find(\n            (subMenu) => subMenu.display_name === \"Monthly PR Changes by Day\"\n          );\n        console.log(monthlyPRChnagesPerDaySubMenu);\n        // const marginSubMenu = getData\n        // .find((item) => item.display_name === \"Revenue Metrics\")\n        // .subMenus.find(\n        //   (subMenu) => subMenu.display_name === \"Revenue & Margin Analysis\"\n        // );\n        // console.log(marginSubMenu.userRoles);\n        // setMultiRoles(marginSubMenu.userRoles);\n        const accessLevel = monthlyPRChnagesPerDaySubMenu\n          ? monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"911\")\n            ? 911\n            : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"126\")\n              ? 126\n              : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"686\")\n                ? 686\n                : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"932\")\n                  ? 932\n                  : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"690\") &&\n                    monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"46\")\n                    ? 800\n                    : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"641\") &&\n                      monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"46\")\n                      ? 700\n                      : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"690\") &&\n                        monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"641\")\n                        ? 600\n                        : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"930\") &&\n                          monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"641\")\n                          ? 500\n                          : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"930\") &&\n                            monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"690\")\n                            ? 400\n                            : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"641\")\n                              ? 641\n                              : monthlyPRChnagesPerDaySubMenu.userRoles == 690 &&\n                                monthlyPRChnagesPerDaySubMenu.userRoles == 641\n                                ? 620\n                                : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"690\")\n                                  ? 690\n                                  : monthlyPRChnagesPerDaySubMenu.userRoles.includes(\"930\") && 930\n          : null;\n        console.log(accessLevel, \"----------------------&&&&&&7\");\n        if (accessLevel == 641) {\n          axios\n            .get(\n              baseUrl +\n              `/ProjectMS/project/getCustomersByCsl?loggedUserId=${loggedUserId}`\n            )\n            .then((resp) => {\n              setcustData(resp.data);\n            });\n        } else if (accessLevel == 600) {\n          axios\n            .get(\n              // dataAccess == 641 || dataAccess == 690\n              //   ? baseUrl + `/CommonMS/master/geActiveCustomerList`\n              //   :\n              baseUrl +\n              `/CommonMS/master/getCustomers?loggedUserId=${loggedUserId}`\n            )\n            .then((resp) => {\n              const data = resp.data;\n              setcustData(data);\n            });\n        } else if (accessLevel == 690) {\n          axios\n            .get(\n              baseUrl +\n              `/ProjectMS/project/getCustomersByDP?loggedUserId=${loggedUserId}`\n            )\n            .then((resp) => {\n              setcustData(resp.data);\n            });\n        } else {\n          axios\n            .get(\n              // dataAccess == 641 || dataAccess == 690\n              baseUrl + `/CommonMS/master/geActiveCustomerList`\n              //   :\n              // baseUrl +\n              //     `/CommonMS/master/getCustomers?loggedUserId=${loggedUserId}`\n            )\n            .then((resp) => {\n              const data = resp.data;\n              setcustData(data);\n            });\n        }\n        // getProjectdata(accessLevel);\n        setDataAccess(accessLevel);\n      });\n  };\n\n  const ArrowRenderer = ({ expanded }) => (\n    <>\n      {expanded ? (\n        <FaCaretDown className=\"chevronIcon\" />\n      ) : (\n        <FaCaretDown className=\"chevronIcon\" />\n      )}\n    </>\n  );\n  const [formData, setFormData] = useState(obj);\n  const ref = useRef([]);\n\n  const handleChange1 = (e) => {\n    const { id, name, value } = e.target;\n    if (name == \"customerIds\" && value == \"select\") {\n      setFormData((prev) => {\n        return { ...prev, [name]: value };\n      });\n      setCustVisible(true);\n    }\n    setcustData();\n    setFormData((prev) => {\n      return { ...prev, [name]: value };\n    });\n  };\n  console.log(dataAccess);\n\n  const handlesearch = () => {\n    console.log(dataAccess);\n    setTableData([]);\n    setShow(false);\n    let valid = GlobalValidation(ref);\n    if (valid == true) {\n      setValidationMessage(true);\n    }\n    if (valid) {\n      return;\n    }\n\n    setValidationMessage(false);\n    setOpen(true);\n    const loaderTime = setTimeout(() => {\n      setLoader(true);\n    }, 2000);\n    setSearch(true);\n    // !valid && setVisible(!visible);\n    // visible\n    //   ? setCheveronIcon(FaChevronCircleUp)\n    //   : setCheveronIcon(FaChevronCircleDown);\n    abortController.current = new AbortController();\n    console.log(formData.FromDate, \"formData.FromDate.............\");\n    axios({\n      method: \"post\",\n      // url: baseUrl + `/ProjectMS/Engagement/getDPDropDownData?userId=19042`,\n      url: baseUrl + `/ProjectMS/PlannedActivities/getCustPlRevProgress`,\n      // url: `http://localhost:8090/ProjectMS/PlannedActivities/getCustPlRevProgress`,\n      signal: abortController.current.signal,\n\n      data: {\n        customerIds:\n          formData.customerIds == 0\n            ? 0\n            : formData.customerIds == -1\n              ? -1\n              : selectedCust,\n        FromDate: moment(formData.FromDate).format(\"yyyy-MM-DD\"),\n        // FromDate: \"2023-06-28\",\n        // CSL: formData.CSL,\n        CSL: formData.CSL,\n        DP: searchDataCus,\n        EngCompany: formData.EngCompany,\n        showDelta: formData.showDelta,\n        UserId: +loggedUserId,\n      },\n    })\n      .then((resp) => {\n        setShow(true);\n        setResp(resp.data);\n        console.log(\"resp.data.tableData>\", resp.data.tableData[2]);\n\n        // Function to format the day as \"1st\", \"2nd\", \"3rd\", etc.\n        // Function to format the day as \"1st\", \"2nd\", \"3rd\", \"4th\", etc.\n        function formatDay(day) {\n          if (day >= 11 && day <= 13) {\n            return (\n              <span>\n                {day}\n                <sup>th</sup>\n              </span>\n            );\n          } else {\n            const lastDigit = day % 10;\n            const suffix =\n              lastDigit === 1 ? (\n                <sup>st</sup>\n              ) : lastDigit === 2 ? (\n                <sup>nd</sup>\n              ) : lastDigit === 3 ? (\n                <sup>rd</sup>\n              ) : (\n                <sup>th</sup>\n              );\n            return (\n              <span>\n                {day}\n                {suffix}\n              </span>\n            );\n          }\n        }\n\n        // Assuming resp.data.tableData[2] is an object\n        if (typeof resp.data.tableData[2] === \"object\") {\n          const objToTransform = resp.data.tableData[2];\n\n          for (const key in objToTransform) {\n            if (\n              key.match(/\\d{4}_\\d{2}_\\d{2}_plRev/) &&\n              objToTransform[key] !== \"Delta\"\n            ) {\n              // Extract the day from the key\n              const day = parseInt(objToTransform[key]);\n\n              // Format the day as \"1st\", \"2nd\", \"3rd\", \"4th\", etc.\n              const formattedDay = formatDay(day);\n\n              // Update the value within the object, but only if it's not \"Delta\"\n              objToTransform[key] = formattedDay;\n            }\n          }\n        }\n\n        // Now, resp.data.tableData[2] contains the updated values with formatted days\n        console.log(resp.data.tableData[2]);\n        setDetails(resp.data.tableData);\n        const data = resp.data;\n        let cols = resp.data.columns.replaceAll(\"'\", \"\").split(\",\");\n        setTableData(data);\n        setColumns(cols);\n        console.log(cols, \"cols227\");\n        console.log(data, \"data228\");\n\n        setLoader(false);\n        clearTimeout(loaderTime);\n        !valid && setVisible(!visible);\n        visible\n          ? setCheveronIcon(FaChevronCircleUp)\n          : setCheveronIcon(FaChevronCircleDown);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    if (dataAccess == 641 || dataAccess == 690 || dataAccess == 600) {\n      // getCsl();\n      // getDp();\n    }\n  }, [dataAccess]);\n  const [cslSpecific, setCslSpecific] = useState([]);\n  const getCslSpecific = () => {\n    axios\n      .get(\n        // ? baseUrl + `/CommonMS/master/getCSLDPAE?loggedUserId=${loggedUserId}`\n        baseUrl + `/CommonMS/master/getCSLDPAE?loggedUserId=${loggedUserId}`\n      )\n      .then((resp) => {\n        setCslSpecific(resp.data);\n      });\n  };\n  useEffect(() => {\n    getCslSpecific();\n  }, []);\n  const getCsl = () => {\n    console.log(dataAccess);\n    axios\n      .get(\n        baseUrl + `/CommonMS/master/getCslDropDownData?userId=${loggedUserId}`\n      )\n      .then((resp) => {\n        const data = resp.data;\n        const dropdownOptions = data.map((item) => {\n          let obj = {\n            value: item.id,\n            label: item.PersonName,\n          };\n          return obj;\n        });\n        dropdownOptions.push({ value: 999, label: \"UnAssigned\" });\n        setcslMultiselectDropdown(dropdownOptions);\n        setselectedCSL(dropdownOptions);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  console.log(dataAccess);\n\n  const getDp = () => {\n    console.log(dataAccess);\n    axios\n      .get(\n        baseUrl + `/CommonMS/master/getDPDropDownData?userId=${loggedUserId}`\n      )\n      .then((resp) => {\n        const data = resp.data;\n        const dropdownOptions = data.map((item) => {\n          let obj = {\n            value: item.id,\n            label: item.PersonName,\n          };\n          return obj;\n        });\n        dropdownOptions.push({ value: 999, label: \"UnAssigned\" });\n        setDpMultiselectDropdown(dropdownOptions);\n        setselectedDp(dropdownOptions);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    getEngCompany();\n    // getcustData();\n    getCsl();\n    getDp();\n  }, []);\n\n  const selectedCust = JSON.parse(localStorage.getItem(\"selectedCust\"))\n    ?.map((d) => d.id)\n    ?.toString();\n  const getEngCompany = () => {\n    axios({\n      method: \"get\",\n      // url: baseUrl + `/ProjectMS/Engagement/EngCompany`,\n      url: baseUrl + \"/ProjectMS/Engagement/EngCompany\",\n    })\n      .then((resp) => {\n        const data = resp.data;\n        const dropdownOptions = data.map((item) => {\n          let obj = {\n            value: item.value,\n            label: item.label,\n          };\n          return obj;\n        });\n        // dropdownOptions.unshift({ value: -1, label: \"All\" });\n        setEngcompanyMultiselectDropdown(dropdownOptions);\n        setEngcompany(dropdownOptions);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  console.log(columns, \"columns.............\");\n\n  const [selectedItems, setSelectedItems] = useState([{}]);\n  const customerIds = selectedItems?.map((d) => d?.id).toString();\n  console.log(customerIds);\n  useEffect(() => { }, [customerIds]);\n  const onFilterChange = ({ id, value }) => {\n    console.log(id + \" \" + value);\n    setscoreCardDataPayload((prevState) => {\n      return { ...prevState, [id]: value };\n    });\n    console.log(resp);\n  };\n  const handleAbort = () => {\n    abortController.current && abortController.current.abort();\n    setLoader(false);\n  };\n  console.log(formData, \"FormData.................\");\n\n  const exportExcel = () => {\n    import(\"xlsx\").then((xlsx) => {\n      let desiredColumnOrder = [];\n      let cols = [];\n      cols = columns;\n\n      if (!desiredColumnOrder.length) {\n        desiredColumnOrder = cols;\n      }\n\n      const headers = Object.keys(details[0]);\n      const detailsWithoutFirstLine = details.slice(1); // Remove the first line\n\n      const wantedValues = detailsWithoutFirstLine.map((item) => {\n        const obj = {};\n        desiredColumnOrder.forEach((col) => {\n          const value = item[col];\n          if (typeof value === \"string\") {\n            const [extractedValue, ,] = value.split(\"^&\");\n            obj[col] = extractedValue;\n          } else if (value instanceof Object) {\n            obj[col] = value.props.children[0];\n          } else {\n            obj[col] = parseFloat(value);\n          }\n        });\n        return obj;\n      });\n\n      // Create an array of arrays where each array represents a row\n      const rows = wantedValues.map((item) => {\n        const row = [];\n        desiredColumnOrder.forEach((col) => {\n          const cell = { v: item[col], t: \"s\" };\n          if (col === \"delta\") {\n            cell.s = { alignment: { horizontal: \"right\" } };\n          }\n          row.push(cell);\n        });\n        return row;\n      });\n\n      // Apply the alignment property to all cells in all rows\n      rows.forEach((row) => {\n        row.forEach((cell) => {\n          cell.s = { alignment: { horizontal: \"right\" } };\n        });\n      });\n\n      // Create the worksheet\n      const worksheet = xlsx.utils.aoa_to_sheet(rows);\n\n      // Create the workbook\n      const workbook = { Sheets: { data: worksheet }, SheetNames: [\"data\"] };\n\n      // Convert the workbook to an Excel buffer\n      const excelBuffer = xlsx.write(workbook, {\n        bookType: \"xlsx\",\n        type: \"array\",\n      });\n\n      saveAsExcelFile(excelBuffer, \"MonthlyPrChanges\");\n    });\n  };\n\n  const saveAsExcelFile = (buffer, fileName) => {\n    import(\"file-saver\").then((module) => {\n      if (module && module.default) {\n        let EXCEL_TYPE =\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        let EXCEL_EXTENSION = \".xlsx\";\n        const data = new Blob([buffer], { type: EXCEL_TYPE });\n        module.default.saveAs(data, fileName + EXCEL_EXTENSION);\n      }\n    });\n  };\n  const HelpPDFName = \"MonthlyPRChangesByDay.pdf\";\n  const Headername = \"Monthly PR Changes By Day\";\n\n  const generateDropdownLabel = (selectedOptions, allOptions) => {\n    const selectedValues = selectedOptions.map((option) => option.value);\n\n    const allValues = allOptions.map((item) => item.value);\n\n    if (selectedValues.length === allValues.length) {\n      return \"<< ALL >>\";\n    } else {\n      return selectedOptions.map((option) => option.label).join(\", \");\n    }\n  };\n  return (\n    <>\n      <Modal open={isOpen} onClose={() => setIsOpen(false)}></Modal>\n      <div>\n        {validationmessage ? (\n          <div className=\"  statusMsg error\">\n            {\" \"}\n            &nbsp;\n            <span className=\"error-block\">\n              <AiFillWarning size=\"1.4em\" strokeWidth={{ width: \"100px\" }} />{\" \"}\n              &nbsp; Please select the valid values for highlighted fields.\n            </span>\n          </div>\n        ) : (\n          \"\"\n        )}\n        <div className=\"pageTitle\">\n          <div className=\"childOne\"></div>\n          <div className=\"childTwo\">\n            <h2>Monthly Planned Revenue Changes By Day</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n        <ScreenBreadcrumbs\n          routes={routes}\n          currentScreenName={currentScreenName}\n        />\n\n        <div className=\"group mb-3 customCard\">\n          <div className=\"col-md-12 collapseHeader\">\n            <h2>Search Filters</h2>\n            <div className=\"helpBtn\">\n              <GlobalHelp pdfname={HelpPDFName} name={Headername} />\n            </div>\n            <div\n              onClick={() => {\n                setVisible(!visible);\n                visible\n                  ? setCheveronIcon(FaChevronCircleUp)\n                  : setCheveronIcon(FaChevronCircleDown);\n              }}\n            >\n              <span>{cheveronIcon}</span>\n            </div>\n          </div>\n          <CCollapse visible={!visible}>\n            <div className=\"group-content row\">\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"customerIds\">\n                    Customer &nbsp;\n                    <span className=\"error-text\">*</span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\">\n                    {dataAccess == 911 ||\n                      dataAccess == 126 ||\n                      dataAccess == 686 ||\n                      dataAccess == 930 ||\n                      dataAccess == 932 ||\n                      dataAccess == 931 ? (\n                      <select\n                        className=\"cancel Text\"\n                        name=\"customerIds\"\n                        id=\"customerIds\"\n                        onChange={handleChange1}\n                      >\n                        {selectedItems.length + \"selected\"}\n                        <option value={-1} selected>\n                          {\" \"}\n                          &lt;&lt;All&gt;&gt;\n                        </option>\n                        <option value={0}>Active Customers</option>\n                        <option value=\"select\">Select</option>\n                      </select>\n                    ) : (\n                      <select\n                        className=\"cancel Text\"\n                        name=\"customerIds\"\n                        id=\"customerIds\"\n                        onChange={handleChange1}\n                      >\n                        {selectedItems.length + \"selected\"}\n                        <option value=\"\" selected>\n                          {\" \"}\n                          &lt;&lt;Please Select&gt;&gt;\n                        </option>\n\n                        <option value=\"select\">Select</option>\n                      </select>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\">\n                    CSL <span className=\"error-text\">*</span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <span className=\"col-6\">\n                    <div\n                      style={{ zIndex: \"6\" }}\n                      id=\"roleTypes\"\n                      className=\"multiselect\"\n                      ref={(ele) => {\n                        ref.current[0] = ele;\n                      }}\n                    >\n                      {/* {dataAccess == 641 ? (\n                        <select>\n                          <otion>123</otion>\n                        </select>\n                      ) : ( */}\n                      <MultiSelect\n                        ArrowRenderer={ArrowRenderer}\n                        options={cslMultiselectDropdown}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n                        value={selectedCSL}\n                        valueRenderer={generateDropdownLabel}\n                        disabled={false}\n                        onChange={(s) => {\n                          setselectedCSL(s);\n                          let selected = s.map((item) => {\n                            return item.value;\n                          });\n                          setFormData({\n                            ...formData,\n                            [\"CSL\"]: selected.toString(),\n                          });\n                          onFilterChange({\n                            id: \"CSL\",\n                            value: selected.toString(),\n                          });\n                        }}\n                        ref={(ele) => {\n                          ref.current[0] = ele;\n                        }}\n                      />\n                      {/* )} */}\n                    </div>\n                  </span>\n                </div>\n              </div>\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\">\n                    DP<span className=\"error-text\">*</span>{\" \"}\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n\n                  <div className=\"col-6\">\n                    <div\n                      id=\"businessUnit\"\n                      className=\" multiselect\"\n                      ref={(ele) => {\n                        ref.current[1] = ele;\n                      }}\n                    >\n                      <MultiSelect\n                        ArrowRenderer={ArrowRenderer}\n                        id=\"businessUnit\"\n                        options={dpMultiselectDropdown}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n                        value={selectedDp}\n                        valueRenderer={generateDropdownLabel}\n                        disabled={false}\n                        onChange={(e) => {\n                          setselectedDp(e);\n                          let filterB = [];\n                          e.forEach((d) => {\n                            filterB.push(d.value);\n                          });\n                          // setFormData((prevVal) => ({\n                          //     ...prevVal,\n                          //     [\"practiceId\"]: filterPractice.toString(),\n                          // }));\n                          setSearchDataCus(filterB.toString());\n                        }}\n                      // onChange={(s) => {\n                      //   setselectedDp(s);\n                      //   let selected = s.map((item) => {\n                      //     return item.value;\n                      //   });\n                      //   setFormData({\n                      //     ...formData,\n                      //     [\"DP\"]: selected.toString(),\n                      //   });\n                      //   onFilterChange({\n                      //     id: \"DP\",\n                      //     value: selected.toString(),\n                      //   });\n                      // }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>{\" \"}\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\">\n                    {\" \"}\n                    Eng. Company<span className=\"error-text\">*</span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n\n                  <span className=\"col-6\">\n                    <div\n                      id=\"businessUnit\"\n                      className=\"multiselect\"\n                      ref={(ele) => {\n                        ref.current[2] = ele;\n                      }}\n                    >\n                      <MultiSelect\n                        ArrowRenderer={ArrowRenderer}\n                        id=\"businessUnit\"\n                        options={engcompanyMultiselectDropdown}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n                        value={selectedEngcompany}\n                        valueRenderer={generateDropdownLabel}\n                        disabled={false}\n                        onChange={(s) => {\n                          setEngcompany(s);\n                          let selected = s.map((item) => {\n                            return item.value;\n                          });\n                          setFormData({\n                            ...formData,\n                            [\"EngCompany\"]: selected.toString(),\n                          });\n                          onFilterChange({\n                            id: \"EngCompany\",\n                            value: selected.toString(),\n                          });\n                        }}\n                      />\n                    </div>\n                  </span>\n                </div>\n              </div>\n              <div className=\"col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\">\n                    {\" \"}\n                    Month<span className=\"error-text\">*</span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <span className=\"col-6\" style={{ zIndex: \"5\" }}>\n                    {console.log(date, \"date...................\")}\n                    <DatePicker\n                      dateFormat=\"MMM-yyyy\"\n                      showMonthYearPicker // Add this prop\n                      minDate={minDate}\n                      maxDate={maxDate}\n                      selected={date}\n                      onChange={(e) => {\n                        const selectedDate = moment(e);\n                        const currentDate = moment();\n\n                        if (selectedDate.month() === currentDate.month()) {\n                          selectedDate.date(currentDate.date());\n                        }\n\n                        SetDate(selectedDate.toDate());\n                        setFormData((prev) => ({\n                          ...prev,\n                          [\"FromDate\"]: selectedDate.format(\"yyyy-MM-DD\"),\n                        }));\n                      }}\n                    />\n                  </span>\n                </div>\n              </div>\n              <div className=\"col-md-12 col-sm-12 col-xs-12 btn-container center\">\n                <button className=\"btn btn-primary\" onClick={handlesearch}>\n                  <FaSearch /> Search\n                </button>\n              </div>\n              {loader ? <Loader handleAbort={handleAbort} /> : \"\"}\n            </div>\n          </CCollapse>\n          <div></div>\n\n          <SelectCustDialogBox\n            // dataAccess={dataAccess}\n            visible={custVisible}\n            setVisible={setCustVisible}\n            setSelectedItems={setSelectedItems}\n            selectedItems={selectedItems}\n            flag={flag}\n            dataAccess={dataAccess}\n          />\n        </div>\n\n        <div>\n          {open === true ? (\n            <div style={{ paddingBottom: \"30px\", position: \"relative\" }}>\n              <div\n                className=\"legendContainer mb-3\"\n                style={{\n                  fontSize: \"11px\",\n                  backgroundColor: \"#ffffff\",\n                  paddingLeft: \"5px\",\n                  paddingBottom: \"5px\",\n                  paddingTop: \"5px\",\n                  marginBottom: \"0px\",\n                  border: \"1px solid #f8e6c3\",\n                }}\n              >\n                <SlExclamation style={{ color: \"#9d7c42\" }} />\n                <span\n                  className=\"font-weight-bold\"\n                  style={{ color: \"#9d7c42\", fontSize: \"13px\" }}\n                >\n                  Delta = Current PR - Previous PR\n                </span>\n                <div className=\"legend green\">\n                  <div className=\"legendCircle\" title=\"Positive Delta\"></div>\n                  <div\n                    className=\"legendTxt\"\n                    style={{ color: \"#9d7c42\", fontSize: \"13px\" }}\n                  >\n                    Positive Delta\n                  </div>\n                  <div className=\"legend red\">\n                    <div className=\"legendCircle \" title=\"Negative Delta\"></div>\n                    <div\n                      className=\"legendTxt\"\n                      style={{ color: \"#9d7c42\", fontSize: \"13px\" }}\n                    >\n                      Negative Delta\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {search == true && (\n                <div\n                  className=\"excelIconContainer\"\n                  style={{ position: \"absolute\", top: 0, right: 0 }}\n                >\n                  {/* <div align=\"right\"> */}\n                  <RiFileExcel2Line\n                    size=\"1.5em\"\n                    title=\"Export to Excel\"\n                    style={{ color: \"green\" }}\n                    cursor=\"pointer\"\n                    onClick={exportExcel}\n                  />\n                </div>\n              )}\n              {/* </div> */}\n              {show && (\n                <MonthlyPRMaterialTable\n                  data={tableData}\n                  dataAccess={dataAccess}\n                  expandedCols={[\"csl\", \"dp\", \"pm\"]}\n                  colExpandState={[\"0\", \"0\", \"dispName\"]}\n                />\n              )}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default MonthlyPRChangesByDay;\n"],"names":["InDirectSE","params","employeeElement","selectedSE","data","showInactive","search","useState","indirectseList","setindirectseList","useEffect","filter","item","status","salesPersonName","toLowerCase","includes","map","className","length","id","props","selectedSEDisp","style","height","forwardRef","ref","baseUrl","environment","setselectedSE","setselectedSEDisp","allIndirectSelected","setallIndirectSelected","indirectData","setIndirectdata","isIndividual","setisIndividual","setSearch","useImperativeHandle","setGlobalState","localStorage","setItem","JSON","stringify","resetTOlocalState","localSE","getItem","parse","emp","width","whiteSpace","overflow","textOverflow","type","name","onChange","e","prevState","some","el","onSelectSE","checked","title","axios","then","resp","catch","console","log","placeholder","target","value","borderRadius","SelectedItems","empId","newArray","Modal","open","children","onClose","selectSERef","useRef","setIsOpen","dispatch","useDispatch","visible","size","SelectS","onClick","undoSaveSelectSE","current","MonthlyPRGraph","filterData","fdata","pldata","Object","keys","forEach","key","dateKey","substring","date","parseISO","replace","formattedDateKey","format","sortedDates","sort","a","b","Date","sortedFteData","sortedPldata","dateA","dateB","fteData1ChartConfig","chart","text","exporting","enabled","xAxis","categories","split","yAxis","tickInterval","series","values","Number","Plchart","highcharts","Highcharts","options","MonthlyPRPopup","actionItems","Pname","close","setOpenPopup","setFilteredData","setHeaders","Boolean","h","obj","hasOwnProperty","push","field","header","border","marginTop","align","fontSize","top","color","float","marginRight","showGridlines","emptyMessage","col","i","MonthlyPRPopOver","setOpenPopOver","actionItem","handleClose","projetId","USerId","ItemDate","dataAccess","editedComment","setEditedComment","validationmessage","setValidationMessage","setChange","modidicationmessage","undefined","CommentsEditor","event","newValue","saveActionItems","method","url","comments","project_id","item_date","created_by","err","Popover","anchor","left","position","DialogTitle","DialogContent","tableStyle","minWidth","editMode","body","entryDt","moment","entryBy","itemdate","editor","editorCallback","cellEditor","onCellEditComplete","cursor","MonthlyPRMaterialTable","expandedCols","colExpandState","nodes","setNodes","columns","setColumns","hiddenColumns","setHiddenColumns","colExpFlag","setColumnExpFlag","headers","graph","setGraph","setFilterData","openPopup","openPopOver","setClose","setPname","setActionItems","setActionItem","customer","setCustomer","containerRef","container","setTimeout","scrollLeft","scrollWidth","getData","elementRef","element","right","graphRef","actionRef","graphKey","setGraphKey","actionKey","setActionKey","scrollIntoView","behavior","numberWithCommas","x","toString","onClickHandler","tableData","prevKey","currentDate","currentMonth","getMonth","currentYear","getFullYear","firstDayOfMonth","lastDayOfMonth","fday","lday","eDate","toLocaleDateString","EntryDate","setItemdate","pid","setPid","OverView","UserId","User","updatedActionItem","handleClick","getValue","row","original","handleOnClick","dispName","subKey","subkey","slice","join","val","orderedKeys","replaceAll","vmgPerformance","colArr","newHeaders","hiddenHeaders","colVal","trim","firstData","headerArray","entries","filteredHeaders","assign","minusOneRow","d","index","accessorKey","enableColumnActions","enableHiding","Header","column","IconButton","prev","subHeaders","indexOf","subArray","Cell","cell","projectId","lvl","href","preventDefault","to","display","maxWidth","verticalAlign","textDecoration","tempData","jsonToTree","colCollapse","flatArray","parentId","dictionary","tree","node","nodeId","nodeParentId","c","enableExpandAll","enableRowVirtualization","enableExpanding","enablePagination","enableBottomToolbar","enableTopToolbar","enableSorting","filterFromLeafRows","initialState","expanded","density","columnVisibility","state","defaultColumn","minSize","maxSize","muiTableContainerProps","sx","maxHeight","muiTableBodyProps","borderRight","paddingTop","paddingBottom","muiTableHeadProps","borderTop","background","fontStyle","startOfMonth","details","setDetails","dayOfMonth","getDate","previousMonth","addMonths","nextMonth","minDate","maxDate","endOfMonth","isOpen","setOpen","cslMultiselectDropdown","setcslMultiselectDropdown","dpMultiselectDropdown","setDpMultiselectDropdown","selectedCSL","setselectedCSL","searchDataCus","setSearchDataCus","selectedDp","setselectedDp","engcompanyMultiselectDropdown","setEngcompanyMultiselectDropdown","SetDate","selectedEngcompany","setEngcompany","setscoreCardDataPayload","setResp","setTableData","loader","setLoader","loggedUserId","abortController","setVisible","FaChevronCircleUp","cheveronIcon","setCheveronIcon","custVisible","setCustVisible","setcustData","show","setShow","setDataAccess","setData2","customerIds","FromDate","CSL","DP","EngCompany","showDelta","routes","setRoutes","getMenus","menu","subMenus","subMenu","display_name","monthlyPRChnagesPerDaySubMenu","find","accessLevel","userRoles","ArrowRenderer","formData","setFormData","handleChange1","setCslSpecific","getEngCompany","dropdownOptions","label","PersonName","selectedCust","selectedItems","setSelectedItems","onFilterChange","saveAsExcelFile","buffer","fileName","module","default","Blob","saveAs","generateDropdownLabel","selectedOptions","allOptions","selectedValues","option","allValues","strokeWidth","ScreenBreadcrumbs","currentScreenName","GlobalHelp","pdfname","FaChevronCircleDown","htmlFor","selected","zIndex","ele","hasSelectAll","isLoading","shouldToggleOnHover","disableSearch","valueRenderer","disabled","s","filterB","dateFormat","showMonthYearPicker","selectedDate","month","toDate","valid","GlobalValidation","loaderTime","AbortController","signal","formatDay","day","lastDigit","suffix","objToTransform","match","formattedDay","parseInt","cols","clearTimeout","Loader","handleAbort","abort","SelectCustDialogBox","flag","backgroundColor","paddingLeft","marginBottom","xlsx","desiredColumnOrder","wantedValues","extractedValue","parseFloat","rows","v","t","alignment","horizontal","workbook","Sheets","utils","aoa_to_sheet","SheetNames","excelBuffer","write","bookType"],"sourceRoot":""}