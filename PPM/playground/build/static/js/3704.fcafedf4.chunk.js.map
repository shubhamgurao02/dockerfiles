{"version":3,"file":"static/js/3704.fcafedf4.chunk.js","mappings":"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","sources":["views/CostComponent/CostLoginHistory.js","views/CostComponent/CostChangeHistory.js","views/CostComponent/CostViewAndUpload.js","views/CostComponent/GenerateSecretKey.js","views/CostComponent/SecretKeyVerificationPopUp.js","views/CostComponent/SecretKeyVerification.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { CModal } from \"@coreui/react\";\nimport { CModalBody } from \"@coreui/react\";\nimport { CModalFooter } from \"@coreui/react\";\nimport { CModalHeader } from \"@coreui/react\";\nimport { CModalTitle } from \"@coreui/react\";\nimport { CButton } from \"@coreui/react\";\nimport moment from \"moment\";\n\nfunction CostLoginHistory(props) {\n  const {\n    costLoginHistoryPopUp,\n    setCostLoginHistoryPopUp,\n    costLoginHistoryData,\n  } = props;\n\n  const [displayData, setDisplayData] = useState(null);\n\n  useEffect(() => {\n    displayTableData();\n  }, []);\n\n  const displayTableData = (data) => {\n    let displayTableData = data === undefined ? costLoginHistoryData : data;\n    setDisplayData(() => {\n      return displayTableData.map((d, index) => {\n        let columns = [\"employee_name\", \"ip_address\", \"login_date_and_time\"];\n        let data = [];\n        data.push(<td>{index + 1}</td>);\n        columns.forEach((iData, cIndex) => {\n          data.push(\n            <td>\n              {iData === \"login_date_and_time\"\n                ? moment(d[iData]).format(\"DD-MMM-yyyy HH:mm:ss\")\n                : d[iData]}\n            </td>\n          );\n        });\n        return <tr key={index}>{data}</tr>;\n      });\n    });\n  };\n\n  const handleChange = (e) => {\n    const { id, value } = e.target;\n    const filteresData = costLoginHistoryData.filter((data, index) => {\n      let exits = Object.keys(data).some((key) => {\n        let existedVal =\n          moment(data[key])._d !== \"Invalid date\" &&\n          moment(data[key]).format(\"DD-MMM-yyyy HH:mm:ss\");\n        let finalVal =\n          existedVal !== \"Invalid date\"\n            ? value.toLowerCase().includes(\"\" + existedVal)\n            : false;\n        return (\n          data[key].toLowerCase().includes(value.toLowerCase()) || finalVal\n        );\n      });\n      return exits;\n    });\n    displayTableData(filteresData);\n  };\n\n  return (\n    <div>\n      <CModal\n        size=\"xl\"\n        visible={costLoginHistoryPopUp}\n        onClose={() => setCostLoginHistoryPopUp(false)}\n      >\n        <CModalHeader>\n          <CModalTitle>Cost Login History</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <div className={\"\"}>{\"\"}</div>\n          {displayData != null ? (\n            <div className=\"col-md-12\">\n              <div\n                className=\"col-md-12 mb-1\"\n                style={{ marginLeft: \"2%\" }}\n                align=\"right\"\n              >\n                <input\n                  type=\"search\"\n                  onChange={(e) => {\n                    handleChange(e);\n                  }}\n                />\n              </div>\n              <table\n                className=\"table table-bordered table-striped\"\n                style={{ width: \"100%\" }}\n              >\n                <tbody>\n                  <tr>\n                    <th>S No.</th>\n                    <th>Employee Name</th>\n                    <th>IP Address</th>\n                    <th> Login Date And Time</th>\n                  </tr>\n                  {displayData}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </CModalBody>\n        {/* <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setSecretKeyValidationPopUp(false)}>\n                        Close\n                    </CButton>\n                    <CButton onClick={() => { saveSecretKeyData() }} color=\"primary\">Save changes</CButton>\n                </CModalFooter> */}\n      </CModal>\n    </div>\n  );\n}\n\nexport default CostLoginHistory;\n","import React, { useEffect, useRef, useState } from 'react'\nimport { CModal } from '@coreui/react'\nimport { CModalBody } from '@coreui/react'\nimport { CModalFooter } from '@coreui/react'\nimport { CModalHeader } from '@coreui/react'\nimport { CModalTitle } from '@coreui/react'\nimport { CButton } from '@coreui/react'\nimport './CostCss.scss';\nimport { GrFormView } from \"react-icons/gr\";\nimport { IconButton } from '@mui/material'\n\n\nfunction CostChangeHistory(props) {\n    const { costChangeHistoryPopUp, setCostChangeHistoryPopUp, costHistoryChangeData } = props\n\n    const [displayData, setDisplayData] = useState(null)\n\n    const costId = useRef(null);\n    const viewAllState = useRef(false);\n\n    useEffect(() => {\n        handleDisplayData();\n    }, [])\n\n    const [seconds, setSeconds] = useState(30);\n    const [minutes, setMinutes] = useState(0);\n    const [displayTimer, setDisplayTimer] = useState(\"hide\");\n\n    var timer;\n\n    useEffect(() => {\n\n        timer = setInterval(() => {\n            setSeconds(prevVal => prevVal - 1);\n            if (seconds === 0) {\n                setMinutes(prevVal => prevVal + 1);\n            }\n        }, 1000)\n\n        if (seconds === 0) {\n            setDisplayTimer(\"hide\");\n            costId.current = null;\n            viewAllState.current = false;\n            handleDisplayData();\n            return () => clearInterval(timer);\n        }\n\n        return () => clearInterval(timer);\n\n    }, [seconds])\n\n    const restart = () => {\n        setDisplayTimer(\"show\");\n        setSeconds(30);\n        setMinutes(0);\n    }\n\n    const stop = () => {\n        setDisplayTimer(\"hide\");\n        clearInterval(timer);\n    }\n\n    const showCostHandler = (index) => {\n        if (costId.current == index) {\n            costId.current = null;\n            stop();\n        } else {\n            costId.current = index;\n            restart();\n        }\n        handleDisplayData();\n    }\n\n\n    const handleDisplayData = () => {\n        setDisplayData(() => {\n            let headers = [\"updated_emp\", \"created_dt\", \"cost_value\"];\n            return costHistoryChangeData.length !== 0 ? costHistoryChangeData.map((data, index) => {\n                let dat = [];\n                headers.forEach((ele, innerIndex) => {\n                    if (innerIndex == 0) {\n                        dat.push(<td>{index + 1}</td>);\n                        dat.push(<td>{data[ele]}</td>);\n                    } else if (innerIndex == headers.length - 1) {\n                        dat.push(<td id={innerIndex}>{costId.current == null && viewAllState.current == false ? \"******\" : costId.current==index || viewAllState.current == true ? data[ele] : \"******\"}</td>);\n                        dat.push(<td>{<IconButton title=\"View\" style={{ height: \"1px\" }} onClick={() => { showCostHandler(index) }} ><GrFormView /></IconButton>}</td>);\n                    } else {\n                        dat.push(<td>{data[ele]}</td>);\n                    }\n                })\n                return <tr key={index}>{dat}</tr>\n            }) : <tr><td colSpan={\"5\"} align=\"center\" >No Data Found</td></tr>\n        })\n    }\n\n    const viewAllHandler=()=>{\n        if(viewAllState.current == true){\n            viewAllState.current = false;\n            stop();\n        }else{\n            viewAllState.current = true;\n            restart();\n        }\n        handleDisplayData();\n    }\n\n    return (\n        <div>\n            <CModal size=\"xl\" visible={costChangeHistoryPopUp} onClose={() => setCostChangeHistoryPopUp(false)}>\n                <CModalHeader className='hgt22'>\n                    <CModalTitle><span className='ft16' >Cost History</span></CModalTitle>\n                </CModalHeader>\n                <CModalBody >\n                    <div className='col-md-12'>\n                         <div className=\"col-md-6 p0 mt13\" align=\"left\" > {displayTimer == \"show\" ?  ( (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds) ) : \"\"} </div>\n                         { costHistoryChangeData.length > 0 ? <div className=' mb-1' align=\"right\"><button className='btn btn-primary' onClick={()=>{ viewAllHandler() }}>Show All</button></div> : \"\"}\n                    </div>\n                    <div className='col-md-12'>\n                        <table className='table table-bordered table-striped' style={{ width: \"100%\" }}>\n                            <tbody>\n                                <tr>\n                                    <th>S.No</th>\n                                    <th>Changed By</th>\n                                    <th>Created Dt</th>\n                                    <th>Cost Value</th>\n                                    <th>Actions</th>\n                                </tr>\n                                {displayData}\n                            </tbody>\n                        </table>\n                    </div>\n                </CModalBody>\n                {/* <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setSecretKeyValidationPopUp(false)}>\n                        Close\n                    </CButton>\n                    <CButton onClick={() => { saveSecretKeyData() }} color=\"primary\">Save changes</CButton>\n                </CModalFooter> */}\n            </CModal>\n        </div>\n    )\n}\n\nexport default CostChangeHistory","import axios from \"axios\";\nimport React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport UploadExcelSheet from \"./UploadExcelSheet\";\nimport { environment } from \"../../environments/environment\";\nimport { GrFormView } from \"react-icons/gr\";\nimport { IconButton } from \"@mui/material\";\nimport { FaChevronCircleDown, FaChevronCircleUp, FaSave } from \"react-icons/fa\";\nimport CostLoginHistory from \"./CostLoginHistory\";\nimport { AiOutlineHistory } from \"react-icons/ai\";\nimport CostChangeHistory from \"./CostChangeHistory\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport { signal } from \"@preact/signals\";\nimport { MdModeEditOutline } from \"react-icons/md\";\nimport \"./CostCss.scss\";\nimport Loader from \"../Loader/Loader\";\nimport { CCollapse } from \"@coreui/react\";\nimport { AiOutlineWarning } from \"react-icons/ai\";\nimport GlobalValidation from \"../ValidationComponent/GlobalValidation\";\n\nconst userInputCostValue = signal(\"\");\nconst updatedCostOrNot = signal(false);\nconst borderColor = signal(\"\");\n\nfunction CostViewAndUpload(props) {\n  const {\n    formData,\n    country,\n    departments,\n    selectedDepartments,\n    filtersData,\n    setfiltersData,\n    date,\n    setDate,\n    setSelectedDepartments,\n  } = props;\n\n  const baseUrl = environment.baseUrl;\n\n  let url = window.location.href;\n\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const [visible, setVisible] = useState(false);\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [resourceCostData, setResourceCostData] = useState(null);\n  const [excelUploadPopUp, setExcelUploadPopUp] = useState(false);\n  const [excelFile, setExcelFile] = useState(null);\n  const viewAllState = useRef(false);\n  const viewAllStateArr = useRef([]);\n  const maskId = useRef(\"\");\n  const resourceCostRespData = useRef([]);\n  const [costLoginHistoryPopUp, setCostLoginHistoryPopUp] = useState(false);\n  const [costLoginHistoryData, setCostLoginHistoryData] = useState([]);\n  const [costChangeHistoryPopUp, setCostChangeHistoryPopUp] = useState(false);\n  const [costHistoryChangeData, setCostHistoryChangeData] = useState([]);\n  const textInputRef = useRef(\"show\");\n  const textInputRefId = useRef(\"\");\n  const [confirmationMsg, setConfirmationMsg] = useState(\"\");\n  const [stateValue, setStateValue] = useState(\"\");\n  const [gridComputedState, setGridComputedState] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(false);\n  const [loaderTimer, setLoaderTimer] = useState(false);\n  const [getData, setGetData] = useState(0);\n  const abortController = useRef([]);\n  const ref = useRef([]);\n\n  const editedCheck = {};\n\n  const handleChangeDate = (date) => setDate(date);\n\n  const getResourcesCostData = async (data) => {\n    setLoaderTimer(true);\n    if (data !== undefined && data.includes(\"Calculate\")) {\n      abortController.current = new AbortController();\n      const computedData = await axios({\n        method: \"POST\",\n        url: baseUrl + `/CostMS/cost/computedCost`,\n\n        signal: abortController.current.signal,\n        data: filtersData,\n      });\n    }\n    abortController.current = new AbortController();\n    const responseData = await axios({\n      method: \"POST\",\n      url: baseUrl + `/CostMS/cost/resourcesCostData`,\n\n      signal: abortController.current.signal,\n      data: filtersData,\n    });\n    let resp = responseData.data;\n    resourceCostRespData.current = resp;\n    setGetData(resp.length);\n    setLoaderTimer(false);\n    handleTableView();\n  };\n\n  const onKeyPress = (e) => {\n    var code = e.which ? e.which : e.keyCode;\n    if (code == 8 || code == 46 || code == 37 || code == 39) {\n      return e.key;\n    } else if (code < 48 || code > 57) {\n      return e.preventDefault();\n    } else return e.key;\n  };\n\n  const handleTableView = () => {\n    setResourceCostData(() => {\n      let tableDataKeys = [\n        \"eNum\",\n        \"eName\",\n        \"designation\",\n        \"dName\",\n        \"cName\",\n        \"cVal\",\n        \"actual_cost\",\n        \"computedCost\",\n        \"effectiveFrom\",\n      ];\n\n      const finalMap = resourceCostRespData.current?.map((ele, index) => {\n        let tabData = [];\n        tableDataKeys.forEach((element, keyIndex) => {\n          if (element == \"cVal\") {\n            tabData.push(\n              textInputRef.current === \"show\" ? (\n                <td id={ele.eNum} align=\"right\">\n                  {viewAllState.current == false && maskId.current == \"\"\n                    ? \"*******\"\n                    : maskId.current == ele.eNum ||\n                      (viewAllState.current == true &&\n                        viewAllStateArr.current?.indexOf(ele.eNum) != -1)\n                    ? ele[element]\n                    : \"*******\"}\n                </td>\n              ) : textInputRefId.current === ele.eNum ? (\n                <td>\n                  <input\n                    type=\"text\"\n                    className={borderColor.current}\n                    onKeyPress={(e) => {\n                      return onKeyPress(e);\n                    }}\n                    defaultValue={ele[element]}\n                    onChange={(e) => {\n                      onCostChangeHandler(e);\n                    }}\n                  />\n                </td>\n              ) : (\n                <td>*******</td>\n              )\n            );\n          } else if (tableDataKeys.length - 1 == keyIndex) {\n            tabData.push(\n              <td align=\"center\">\n                {moment(ele[element]).format(\"DD-MMM-yyyy\")}\n              </td>\n            );\n\n            tabData.push(\n              <td align=\"center\">\n                <span>\n                  <IconButton\n                    title=\"View\"\n                    style={{ height: \"1px\" }}\n                    onClick={(e) => {\n                      HandleViewButton(e, ele.eNum, ele[element]);\n                    }}\n                  >\n                    <GrFormView />\n                  </IconButton>\n                </span>\n                {(textInputRef.current === \"textInput\" &&\n                  textInputRefId.current === ele.eNum) == false ? (\n                  <span style={{ marginLeft: \"-10px\" }}>\n                    <IconButton\n                      title=\"Edit\"\n                      style={{ height: \"1px\" }}\n                      onClick={(e) => {\n                        onUpdateHandler(ele, ele[\"cVal\"], index);\n                      }}\n                    >\n                      <MdModeEditOutline style={{ fontSize: \"16px\" }} />\n                    </IconButton>\n                  </span>\n                ) : (\n                  \"\"\n                )}\n                {textInputRef.current === \"textInput\" &&\n                textInputRefId.current === ele.eNum ? (\n                  <span style={{ marginLeft: \"-10px\" }}>\n                    <IconButton\n                      title=\"Save\"\n                      style={{ height: \"1px\" }}\n                      onClick={(e) => {\n                        onUpdateHandler(ele, ele[\"cVal\"]);\n                      }}\n                    >\n                      <FaSave style={{ fontSize: \"16px\" }} />\n                    </IconButton>\n                  </span>\n                ) : (\n                  \"\"\n                )}\n                <span style={{ marginLeft: \"-10px\" }}>\n                  <IconButton\n                    title=\"Cost History\"\n                    style={{ height: \"1px\" }}\n                    onClick={(e) => {\n                      handleCostChangeHistory(ele);\n                    }}\n                  >\n                    <AiOutlineHistory style={{ fontSize: \"16px\" }} />\n                  </IconButton>\n                </span>\n                {textInputRef.current === \"textInput\" &&\n                textInputRefId.current === ele.eNum ? (\n                  <span style={{ marginLeft: \"-10px\" }}>\n                    <IconButton\n                      title=\"Close\"\n                      style={{ height: \"1px\" }}\n                      onClick={() => {\n                        onCloseHandler();\n                      }}\n                    >\n                      <AiFillCloseCircle style={{ fontSize: \"16px\" }} />\n                    </IconButton>\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </td>\n            );\n          } else if (element === \"cVal\" || element === \"computedCost\") {\n            tabData.push(\n              <td>\n                <span> $</span>{\" \"}\n                <span style={{ float: \"right\" }}>\n                  {ele[element] === \"\" + null ? \"-\" : ele[element]}\n                </span>\n              </td>\n            );\n          } else if (element === \"actual_cost\") {\n            tabData.push(\n              <td>\n                <span> $</span>{\" \"}\n                <span style={{ float: \"right\" }}>{ele[element]}</span>\n              </td>\n            );\n          } else {\n            tabData.push(<td>{ele[element]}</td>);\n          }\n        });\n        return <tr key={index}>{tabData}</tr>;\n      });\n      return finalMap;\n    });\n  };\n\n  const HandleViewButton = (e, id, originalValue) => {\n    if (maskId.current == id) {\n      maskId.current = \"\";\n      stop();\n      handleTableView();\n      return;\n    } else if (viewAllStateArr.current.length > 0) {\n      viewAllStateArr.current = viewAllStateArr.current.filter((d) => d != id);\n      restart();\n    } else {\n      maskId.current = id;\n      restart();\n      // return;\n    }\n    handleTableView();\n  };\n\n  const onCostChangeHandler = (e) => {\n    userInputCostValue.value = e.target.value;\n  };\n\n  const FilterChangeHandler = (e) => {\n    const { id, value } = e.target;\n    setfiltersData((prevVal) => ({ ...prevVal, [id]: value }));\n  };\n\n  const getIpAddress = async () => {\n    await fetch(\"https://geolocation-db.com/json/\")\n      .then((response) => {\n        return response.json();\n      }, \"jsonp\")\n      .then((res) => {\n        loginHistoryTracks(res.IPv4);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const loginHistoryTracks = (ipAddress) => {\n    const loginTrackData = {};\n\n    let urlData = url.split(\"#\");\n\n    loginTrackData[\"ipAddress\"] = ipAddress;\n    loginTrackData[\"userId\"] = loggedUserId;\n    loginTrackData[\"url\"] = urlData[1];\n\n    axios({\n      method: \"POST\",\n      url: baseUrl + \"/CostMS/cost/saveLoginTracks\",\n      data: loginTrackData,\n    }).then((resp) => {});\n  };\n\n  const onUpdateHandler = async (ele, value, index) => {\n    if (editedCheck[index] == undefined) {\n      editedCheck[index] = \"update\";\n    }\n\n    let id = ele.eNum;\n    if (textInputRef.current === \"show\") {\n      textInputRef.current = \"textInput\";\n      textInputRefId.current = id;\n    } else {\n      if (\n        userInputCostValue.value != ele.cVal &&\n        userInputCostValue.value != \"\"\n      ) {\n        borderColor.current = \"\";\n        ele[\"cVal\"] = userInputCostValue.value;\n        ele[\"secretKey\"] = formData.secretKey;\n        ele[\"resourceId\"] = formData.resourceId;\n        const response = await updateCostValue(ele);\n        if (response) {\n          setConfirmationMsg(\n            <div className=\"col-md-12 successMsg\">\n              <span>Values Updated Successfully.</span>\n            </div>\n          );\n          setTimeout(() => {\n            borderColor.current = \"\";\n            setConfirmationMsg(\"\");\n          }, 2000);\n          textInputRef.current = \"show\";\n          textInputRefId.current = \"\";\n          getResourcesCostData();\n        }\n      } else {\n        borderColor.current = \"txtBoxBorderColor\";\n        setConfirmationMsg(\n          <div className=\"col-md-12 errMsg\">\n            <span>Please Give Correct Values.</span>\n          </div>\n        );\n        setTimeout(() => {\n          borderColor.current = \"\";\n          setConfirmationMsg(\"\");\n        }, 2000);\n      }\n    }\n    getResourcesCostData();\n    handleTableView();\n\n    // let a = document.getElementById(id);\n    // if (a.innerText == \"\") {\n    //   const textElement = document.getElementById(id + \"_text\");\n    //   ele[\"cVal\"] = textElement.value;\n    //   ele[\"secretKey\"] = formData.secretKey;\n    //   ele[\"resourceId\"] = formData.resourceId\n    //   const response = updateCostValue(ele);\n    //   response ? textElement.remove() : \"\";\n    //   a.innerHTML = \"*******\";\n    // } else {\n    //   var input = document.createElement(\"input\");\n    //   input.type = \"text\";\n    //   input.setAttribute(\"id\", id + \"_text\");\n    //   input.setAttribute(\"value\", value);\n    //   // input.className = \"css-class-name\"; // set the CSS class\n\n    //   a.innerHTML = \"\";\n    //   a.appendChild(input); // put it into the DOM\n    // }\n  };\n\n  const onCloseHandler = () => {\n    textInputRef.current = \"show\";\n    textInputRefId.current = \"\";\n    handleTableView();\n  };\n\n  const updateCostValue = async (data) => {\n    const resp = await axios({\n      method: \"post\",\n      url: baseUrl + `/CostMS/cost/updateResourceCost`,\n      data: data,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    updatedCostOrNot.value = resp.data.type;\n    return resp.data.type;\n  };\n\n  const handleCostChangeHistory = (data) => {\n    const objData = {\n      resourceId: data.eNum,\n      secretKey: formData.secretKey,\n    };\n    axios({\n      method: \"POST\",\n      url: baseUrl + `/CostMS/cost/getCostHistory`,\n      data: objData,\n    }).then((resp) => {\n      setCostHistoryChangeData(resp.data);\n      setCostChangeHistoryPopUp(true);\n    });\n  };\n\n  useLayoutEffect(() => {}, [selectedDepartments]);\n\n  useEffect(() => {\n    let filterDeptData = [];\n    selectedDepartments.forEach((data) => {\n      filterDeptData.push(data.value);\n    });\n    filtersData[\"businessUnit\"] = filterDeptData.toString();\n    getResourcesCostData();\n  }, []);\n\n  const [seconds, setSeconds] = useState(30);\n  const [minutes, setMinutes] = useState(0);\n  const [displayTimer, setDisplayTimer] = useState(\"hide\");\n\n  var timer;\n\n  useEffect(() => {\n    timer = setInterval(() => {\n      setSeconds((prevVal) => prevVal - 1);\n      if (seconds === 0) {\n        setMinutes((prevVal) => prevVal + 1);\n      }\n    }, 1000);\n\n    if (seconds === 0) {\n      setDisplayTimer(\"hide\");\n      maskId.current = \"\";\n      viewAllState.current = false;\n      handleTableView();\n      return () => clearInterval(timer);\n    }\n\n    return () => clearInterval(timer);\n  }, [seconds]);\n\n  const restart = () => {\n    setDisplayTimer(\"show\");\n    setSeconds(30);\n    setMinutes(0);\n  };\n\n  const stop = () => {\n    setDisplayTimer(\"hide\");\n    clearInterval(timer);\n  };\n\n  const uploadExcelSheet = async () => {\n    let link = baseUrl + \"/CostMS/cost/upload\";\n    const data = await axios.post(link, excelFile, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n  };\n\n  const handleViewAll = () => {\n    if (resourceCostData == null || resourceCostData.length == 0) {\n      return;\n    }\n\n    viewAllState.current = viewAllState.current === true ? false : true;\n    if (viewAllState.current) {\n      let showAllArr = [];\n      resourceCostRespData.current?.forEach((d) => {\n        showAllArr.push(d.eNum);\n      });\n      let filteredArr = showAllArr.filter((d) => d != maskId.current);\n      viewAllStateArr.current = filteredArr;\n      restart();\n      handleTableView();\n      // return;\n    } else {\n      viewAllStateArr.current = [];\n      stop();\n      handleTableView();\n      return;\n    }\n  };\n\n  const HandleCostLoginHistory = () => {\n    getCostLoginHistory();\n  };\n\n  const getCostLoginHistory = async () => {\n    const responseData = await axios({\n      method: \"GET\",\n      url: baseUrl + `/CostMS/cost/getCostLoginTracks`,\n    });\n\n    setCostLoginHistoryData(responseData.data);\n    setCostLoginHistoryPopUp(true);\n  };\n\n  const searchClickHandler = (e) => {\n    filtersData[\"fromDate\"] = moment(date)\n      .subtract(filtersData.duration - 1, \"months\")\n      .startOf(\"month\")\n      .format(\"yyyy-MM-DD\");\n    filtersData[\"toDate\"] = moment(date).endOf(\"month\").format(\"yyyy-MM-DD\");\n\n    let valid = GlobalValidation(ref);\n\n    if (valid) {\n      setStatusMessage(true);\n      setTimeout(() => {\n        setStatusMessage(false);\n      }, 3000);\n      return;\n    }\n    getResourcesCostData();\n  };\n\n  useEffect(() => {}, [stateValue]);\n\n  useEffect(() => {\n    getIpAddress();\n  }, []);\n\n  const calculateHandler = () => {\n    if (resourceCostData == null || resourceCostData.length == 0) {\n      return;\n    }\n\n    setStateValue(\"Calculate\");\n    getResourcesCostData(\"Calculate\");\n  };\n\n  const computeGridHandler = () => {\n    if (resourceCostData == null || resourceCostData.length == 0) {\n      return;\n    }\n\n    setLoaderTimer(true);\n    const data = {};\n\n    data[\"secretKey\"] = formData.secretKey;\n    data[\"loggedUserId\"] = loggedUserId;\n\n    axios({\n      method: \"POST\",\n      url: baseUrl + `/CostMS/cost/computeGrid`,\n      data: data,\n    }).then((resp) => {\n      setLoaderTimer(false);\n      setGridComputedState(true);\n      setTimeout(() => {\n        setGridComputedState(false);\n      }, 2000);\n    });\n  };\n\n  const customValueRenderer = (selected, _options) => {\n    return selected.length === departments.length\n      ? \"<< ALL >>\"\n      : selected.length === 0\n      ? \"<< Please Select >>\"\n      : selected.map((label) => {\n          return selected.length > 1 ? label.label + \",\" : label.label;\n        });\n  };\n\n  const onChangePractice = (e) => {\n    const { value, id } = e.target;\n    setGetData(value);\n  };\n  const handleAbort = () => {\n    abortController.current && abortController.current.abort();\n    setLoaderTimer(false);\n  };\n  return (\n    <div className=\"col-md-12\">\n      {loaderTimer ? <Loader handleAbort={handleAbort} /> : \"\"}\n      <div className=\"col-md-12\">\n        {gridComputedState && (\n          <div className=\"p6 col-md-12 successMsg\">\n            {\"Grid Computed Successfully....\"}\n          </div>\n        )}\n        {statusMessage && (\n          <div className=\"p6 col-md-12 statusMsg error\">\n            <AiOutlineWarning className=\"confirmMsgIcon\" />\n            {\"Please Enter Mandatory Fields\"}\n          </div>\n        )}\n        <div className=\"pageTitle\">\n          <div className=\"childOne\">\n            <div className=\"childTwo\">\n              <h2>View/Upload</h2>\n            </div>\n            <div className=\"childThree\"></div>\n          </div>\n        </div>\n        <div className=\"gropu mb-3 customCard\">\n          <div className=\"col-md-12 collapseHeader\">\n            <h2>Search Filters</h2>\n            <div\n              onClick={() => {\n                setVisible(!visible);\n                visible\n                  ? setCheveronIcon(FaChevronCircleUp)\n                  : setCheveronIcon(FaChevronCircleDown);\n              }}\n            >\n              <span>{cheveronIcon}</span>\n            </div>\n          </div>\n          <CCollapse visible={!visible}>\n            <div class=\"group-content row mb-2\">\n              <div class=\"col-md-4 mb-2\">\n                <div class=\"form-group row\">\n                  <label class=\"col-5\" for=\"BuIds\">\n                    Country<span className=\"required error-text ml-1\">*</span>\n                  </label>\n                  <span class=\"col-1 p-0\">:</span>\n                  <div class=\"col-6\">\n                    {\" \"}\n                    <select\n                      id=\"country\"\n                      onChange={(e) => FilterChangeHandler(e)}\n                    >\n                      {country.map((data) => (\n                        <option\n                          value={data.id}\n                          selected={data.country_name == \"India\" ? true : false}\n                        >\n                          {data.country_name}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"col-md-4 mb-2\">\n                <div class=\"form-group row\">\n                  <label class=\"col-5\" for=\"BuIds\">\n                    Business Unit\n                    <span className=\"required error-text ml-1\">*</span>\n                  </label>\n                  <span class=\"col-1 p-0\">:</span>\n                  <div\n                    class=\"col-6 multiselect\"\n                    ref={(ele) => {\n                      ref.current[0] = ele;\n                    }}\n                  >\n                    <MultiSelect\n                      id=\"businessUnit\"\n                      options={departments}\n                      hasSelectAll={true}\n                      isLoading={false}\n                      shouldToggleOnHover={false}\n                      disableSearch={false}\n                      valueRenderer={customValueRenderer}\n                      value={selectedDepartments}\n                      disabled={false}\n                      onChange={(s) => {\n                        setSelectedDepartments(s);\n                        let filteredDeptData = [];\n                        s?.forEach((element) => {\n                          filteredDeptData.push(element.value);\n                        });\n                        filtersData.businessUnit = filteredDeptData.toString();\n                        // setselectedCSL(s);\n                        // let selected = s.map((item) => {\n                        //   return item.value\n                        // })\n                        // onFilterChange({ id: \"cslIds\", value: selected })\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"col-md-4 mb-2\">\n                <div class=\"form-group row\">\n                  <label class=\"col-5\" for=\"BuIds\">\n                    Month<span className=\"required error-text ml-1\">*</span>\n                  </label>\n                  <span class=\"col-1 p-0\">:</span>\n                  <div class=\"col-6\">\n                    <DatePicker\n                      id=\"month\"\n                      selected={date}\n                      onChange={(e) => {\n                        handleChangeDate(e);\n                      }}\n                      maxDate={new Date()}\n                      dateFormat=\"MMM-yyyy\"\n                      showMonthYearPicker\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* <div class=\"col-md-3 mb-2\">\n            <div class=\"form-group row\">\n              <label class=\"col-5\" for=\"BuIds\">\n                Duration<span style={{ color: \"red\" }}>*</span>\n              </label>\n              <span class=\"col-1 p-0\">:</span>\n              <div class=\"col-6\">\n                <select\n                  id=\"duration\"\n                  onChange={(e) => FilterChangeHandler(e)}\n                  name=\"duration\"\n                  className=\" \"\n                  defaultValue={\"1\"}\n                >\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"5\">5</option>\n                  <option value=\"6\">6</option>\n                </select>\n              </div>\n            </div>\n          </div> */}\n              <div class=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-3 \">\n                <button\n                  type=\"submit\"\n                  class=\"btn btn-primary\"\n                  title=\"Search\"\n                  onClick={() => {\n                    searchClickHandler();\n                  }}\n                >\n                  Search\n                </button>\n              </div>\n            </div>\n          </CCollapse>\n\n          {/* <div class=\"group-content row\">\n          <div class=\"col-md-1 mb-2\">\n            <button\n              className=\"btn btn-primary \"\n              style={{ marginRight: \"2px\" }}\n              onClick={() => {\n                calculateHandler();\n              }}\n            >\n              {\"Calculate\"}\n            </button>\n          </div>\n\n          <div class=\"col-md-1 mb-2\">\n            <button\n              className=\"btn btn-primary \"\n              style={{ marginRight: \"2px\" }}\n              onClick={() => {\n                calculateHandler();\n              }}\n            >\n              {\"Calculate\"}\n            </button>\n          </div>\n\n          <div class=\"col-md-1 mb-2\">\n            <button\n              className=\"btn btn-primary \"\n              style={{ marginRight: \"2px\" }}\n              onClick={() => {\n                calculateHandler();\n              }}\n            >\n              {\"Calculate\"}\n            </button>\n          </div>\n        </div> */}\n\n          {confirmationMsg}\n          <div className=\"mb-1 row\" style={{ float: \"right\" }}>\n            {displayTimer === \"show\" ? (\n              <div className=\"col-md-2 maskTimer\" align=\"left\">\n                <label>Mask Time :</label>\n                <span>\n                  {minutes < 10 ? \"0\" + minutes : minutes}:\n                  {seconds < 10 ? \"0\" + seconds : seconds}\n                </span>\n              </div>\n            ) : (\n              \"\"\n            )}\n            <div className=\"col me-1 d-flex flex-direction-end gap-2\">\n              <button\n                className=\"btn btn-primary \"\n                onClick={() => {\n                  calculateHandler();\n                }}\n              >\n                {\"Calculate\"}\n              </button>\n              <button\n                className=\"btn btn-primary \"\n                onClick={() => {\n                  computeGridHandler();\n                }}\n              >\n                Compute Grid\n              </button>\n              <button\n                className=\"btn btn-primary \"\n                onClick={() => {\n                  handleViewAll();\n                }}\n              >\n                View All\n              </button>\n              <button\n                className=\"btn btn-primary \"\n                onClick={() => {\n                  setExcelUploadPopUp(true);\n                  setStateValue(\"Upload\");\n                }}\n              >\n                Upload\n              </button>\n              <button\n                className=\"btn btn-primary\"\n                onClick={() => {\n                  setExcelUploadPopUp(true);\n                  setStateValue(\"Upload & Calculate\");\n                }}\n              >\n                Upload & Calculate\n              </button>\n            </div>\n          </div>\n          <div id=\"viewAndUpload\" className=\"col-md-12 mt-1 \">\n            <table\n              id=\"viewAndUploadTable\"\n              style={{ width: \"100%\" }}\n              className=\"table table-bordered table-striped darkHeader\"\n            >\n              <thead>\n                <tr className=\"headerSticky \" align=\"center\">\n                  <th>Resource Id</th>\n                  <th>Resource Name</th>\n                  <th>Role Type</th>\n                  <th>Business Unit</th>\n                  <th>Country</th>\n                  <th>Actual Salary ($)</th>\n                  <th>Actual Cost ($)</th>\n                  <th>Role Cost</th>\n                  <th>Effective From</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {resourceCostRespData.current.length != 0 ? (\n                  resourceCostData\n                ) : (\n                  <tr>\n                    <td colSpan={9}>No Data Found</td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        {excelUploadPopUp ? (\n          <>\n            <UploadExcelSheet\n              excelUploadPopUp={excelUploadPopUp}\n              setExcelUploadPopUp={setExcelUploadPopUp}\n              excelFile={excelFile}\n              setExcelFile={setExcelFile}\n              uploadExcelSheet={uploadExcelSheet}\n              getResourcesCostData={getResourcesCostData}\n              formData={formData}\n              stateValue={stateValue}\n              setLoaderTimer={setLoaderTimer}\n            />\n          </>\n        ) : (\n          \"\"\n        )}\n\n        {costLoginHistoryPopUp ? (\n          <CostLoginHistory\n            costLoginHistoryPopUp={costLoginHistoryPopUp}\n            setCostLoginHistoryPopUp={setCostLoginHistoryPopUp}\n            costLoginHistoryData={costLoginHistoryData}\n          />\n        ) : (\n          \"\"\n        )}\n\n        {costChangeHistoryPopUp ? (\n          <CostChangeHistory\n            costChangeHistoryPopUp={costChangeHistoryPopUp}\n            setCostChangeHistoryPopUp={setCostChangeHistoryPopUp}\n            costHistoryChangeData={costHistoryChangeData}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CostViewAndUpload;\n","import React, { useEffect, useState } from \"react\";\nimport { CModal } from \"@coreui/react\";\nimport { CModalBody } from \"@coreui/react\";\nimport { CModalFooter } from \"@coreui/react\";\nimport { CModalHeader } from \"@coreui/react\";\nimport { CModalTitle } from \"@coreui/react\";\nimport { CButton } from \"@coreui/react\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\nimport { AiOutlineWarning } from \"react-icons/ai\";\nimport \"./CostCss.scss\";\n\nfunction GenerateSecretKey(props) {\n  const { open, setGenerateSecretKey } = props;\n  const [logged, setLogged] = useState([]);\n  console.log(logged);\n\n  const baseUrl = environment.baseUrl;\n\n  const [validationMessage, setValidationMessage] = useState(\"\");\n  const [enterSecretKeyValidation, setEnterSecretKeyValidation] = useState(\"\");\n  const [reEnterSecretKeyValidation, setReEnterSecretKeyValidation] =\n    useState(\"\");\n\n  const getloggeduser = () => {\n    axios\n      .get(baseUrl + `/ProjectMS/Audit/getloggeduser?loggedId=${loggedUserId}`)\n      .then((Response) => {\n        let data = Response.data;\n        console.log(data);\n        setLogged(data);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  useEffect(() => {\n    getloggeduser();\n  }, []);\n\n  const initialValues = {\n    resourceId: 513,\n    emailOfficial: \"bala.peddi@prolifics.com\",\n    secretKey: \"\",\n  };\n\n  const [secretKeyFormData, setSecretKeyFormData] = useState({\n    initialSecretKey: \"\",\n    secondSecretKey: \"\",\n  });\n\n  useEffect(() => {}, []);\n\n  const secretKeyChangeHandler = (e) => {\n    const { id, value } = e.target;\n    setSecretKeyFormData((prevVal) => ({ ...prevVal, [id]: value }));\n  };\n\n  const saveSecretKeyData = () => {\n    if (\n      secretKeyFormData.initialSecretKey ===\n        secretKeyFormData.secondSecretKey &&\n      secretKeyFormData.initialSecretKey.length != 0 &&\n      secretKeyFormData.secondSecretKey.length != 0\n    ) {\n      initialValues[\"secretKey\"] = secretKeyFormData.initialSecretKey;\n      setEnterSecretKeyValidation(\"\");\n      setReEnterSecretKeyValidation(\"\");\n      setValidationMessage(\"\");\n      axios({\n        method: \"post\",\n        url: baseUrl + `/CostMS/cost/generateSecretKey`,\n        data: initialValues,\n        headers: { \"Content-Type\": \"application/json\" },\n      })\n        .then(function (responseData) {\n          //handle success\n          setValidationMessage(responseData.data.status);\n          setTimeout(() => {\n            setValidationMessage(\"\");\n          }, 2000);\n        })\n        .catch((err) => console.log(err));\n    } else {\n      setValidationMessage(\n        <div className=\"col-md-12 errMsg\" style={{ width: \"90%\" }}>\n          <AiOutlineWarning className=\"confirmMsgIcon\" />\n          Please Enter Mandatory Fields\n        </div>\n      );\n      setEnterSecretKeyValidation(\"txtBoxBorderColor\");\n      setReEnterSecretKeyValidation(\"txtBoxBorderColor\");\n    }\n  };\n\n  return (\n    <div>\n      <CModal\n        size=\"lg\"\n        visible={open}\n        onClose={() => setGenerateSecretKey(false)}\n      >\n        <CModalHeader>\n          <CModalTitle>Generate Secret Key</CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <div>{validationMessage}</div>\n          <div>\n            <div className=\"col-md-5\">\n              <label className=\"p0\">Enter secret Key </label>\n              <span style={{ color: \"red\" }}>*</span>\n            </div>\n            <div className=\"col-md-1\">\n              <span className=\"p25\">:</span>\n            </div>\n            <div className=\"col-md-6\">\n              <input\n                className=\"enterSecretKeyValidation\"\n                style={{ marginLeft: \"-40px\" }}\n                id=\"initialSecretKey\"\n                type=\"text\"\n                onChange={(e) => {\n                  secretKeyChangeHandler(e);\n                }}\n              />\n              <br />\n            </div>\n            <div className=\"col-md-5\">\n              <label className=\"p0\">Re-Enter secret Key </label>\n              <span style={{ color: \"red\" }}>*</span>\n            </div>\n            <div className=\"col-md-1\">\n              <span className=\"p25\">:</span>\n            </div>\n            <div className=\"col-md-6\">\n              <input\n                className=\"reEnterSecretKeyValidation\"\n                style={{ marginLeft: \"-40px\", marginTop: \"4px\" }}\n                id=\"secondSecretKey\"\n                type=\"text\"\n                onChange={(e) => {\n                  secretKeyChangeHandler(e);\n                }}\n              />\n              <br />\n            </div>\n          </div>\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            className=\"popUpCloseButton\"\n            color=\"secondary\"\n            onClick={() => setGenerateSecretKey(false)}\n          >\n            <div className=\"popUpCloseButtonText\">Close</div>\n          </CButton>\n          <CButton\n            onClick={() => {\n              saveSecretKeyData();\n            }}\n            color=\"primary\"\n          >\n            Save changes\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </div>\n  );\n}\n\nexport default GenerateSecretKey;\n","import React from \"react\";\nimport { CModal } from \"@coreui/react\";\nimport { CModalBody } from \"@coreui/react\";\nimport { CModalFooter } from \"@coreui/react\";\nimport { CModalHeader } from \"@coreui/react\";\nimport { CModalTitle } from \"@coreui/react\";\nimport { CButton } from \"@coreui/react\";\nimport \"./CostCss.scss\";\nimport { GoKey } from \"react-icons/go\";\n\nfunction SecretKeyVerificationPopUp(props) {\n  const {\n    secretKeyValidationPopUp,\n    setSecretKeyValidationPopUp,\n    loginStatus,\n    setLoginStatus,\n    secretKeysDataSize,\n    onChangeHandler,\n    validateSecretKey,\n    handleGenerateSecretKey,\n    confirmationMessageClass,\n    borderColor,\n  } = props;\n  return (\n    <div>\n      <CModal\n        size=\"sm\"\n        visible={secretKeyValidationPopUp}\n        onClose={() => setSecretKeyValidationPopUp(false)}\n      >\n        <CModalHeader className=\"hgt22\">\n          <CModalTitle>\n            <span className=\"ft16\">Secret Key Verification</span>\n          </CModalTitle>\n        </CModalHeader>\n        <CModalBody>\n          <div className={confirmationMessageClass}>{loginStatus}</div>\n          <div className=\"col-md-12\">\n            {/* <div>\n                            <h6>Secret Key Verification</h6>\n                        </div> */}\n            <input\n              id=\"secretKey\"\n              type=\"text\"\n              autoComplete=\"off\"\n              className={`${borderColor} hideCharacters`}\n              style={{ width: \"60%\" }}\n              onChange={(e) => {\n                onChangeHandler(e);\n              }}\n            />\n            <button\n              className=\"btn btn-primary mt-2\"\n              onClick={() => {\n                validateSecretKey();\n              }}\n            >\n              Submit\n            </button>\n            <br />\n            {secretKeysDataSize.length == 0 ? (\n              <button\n                className=\"btn btn-primary\"\n                onClick={() => {\n                  handleGenerateSecretKey();\n                }}\n              >\n                <GoKey className=\"genarateKeyIcon\" />\n                Generate Secret Key\n              </button>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </CModalBody>\n        {/* <CModalFooter>\n                    <CButton color=\"secondary\" onClick={() => setSecretKeyValidationPopUp(false)}>\n                        Close\n                    </CButton>\n                    <CButton onClick={() => { saveSecretKeyData() }} color=\"primary\">Save changes</CButton>\n                </CModalFooter> */}\n      </CModal>\n    </div>\n  );\n}\n\nexport default SecretKeyVerificationPopUp;\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport CostViewAndUpload from \"./CostViewAndUpload\";\nimport GenerateSecretKey from \"./GenerateSecretKey\";\nimport { environment } from \"../../environments/environment\";\nimport SecretKeyVerificationPopUp from \"./SecretKeyVerificationPopUp\";\nimport { AiOutlineWarning } from \"react-icons/ai\";\nimport { TiTickOutline } from \"react-icons/ti\";\nimport moment from \"moment\";\n\nfunction SecretKeyVerification(props) {\n  const { country, departments, selectedDepartments, setSelectedDepartments } =\n    props;\n\n  const baseUrl = environment.baseUrl;\n\n  const initialValues = {\n    resourceId: 513,\n    emailOfficial: \"bala.peddi@prolifics.com\",\n    secretKey: \"\",\n  };\n\n  const [formData, setFormData] = useState(initialValues);\n  const [validateKeyResponse, setValidateKeyResponse] = useState();\n  const [generateSecretKey, setGenerateSecretKey] = useState(false);\n  const [loginStatus, setLoginStatus] = useState(\"\");\n  const [secretKeyValidationPopUp, setSecretKeyValidationPopUp] =\n    useState(true);\n  const [secretKeysDataSize, setSecretKeysDataSize] = useState([]);\n  const [confirmationMessageClass, setConfirmationMessageClass] = useState(\"\");\n  const [borderColor, setBorderColor] = useState(\"\");\n  const [ipAddress, setIpAddress] = useState(\"\");\n\n  const [date, setDate] = useState(() => {\n    const date = new Date();\n    return date;\n  });\n\n  const [filtersData, setfiltersData] = useState({\n    legalEntityName: \"a\",\n    country: \"3\",\n    businessUnit: \"\",\n    fromDate: moment(date).startOf(\"month\").format(\"yyyy-MM-DD\"),\n    toDate: moment(date).endOf(\"month\").format(\"yyyy-MM-DD\"),\n    duration: \"1\",\n    secretKey: formData.secretKey,\n  });\n\n  const onChangeHandler = (e) => {\n    const { id, value } = e.target;\n    setFormData((prevVal) => ({ ...prevVal, [id]: value }));\n  };\n\n  useEffect(() => {\n    filtersData[\"secretKey\"] = formData.secretKey;\n  }, [formData]);\n\n  const validateSecretKey = async () => {\n    const finalFormData = formData;\n    finalFormData[\"ipAddress\"] = ipAddress;\n    const responseData = await axios({\n      method: \"post\",\n      url: baseUrl + `/CostMS/cost/validateSecretKey`,\n      data: finalFormData,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    //handle success\n    setValidateKeyResponse(responseData.data);\n    if (Object.keys(responseData.data).length == 0) {\n      setConfirmationMessageClass(\"errMsg\");\n      setLoginStatus(\n        <span className=\"statusMsg error\">\n          <AiOutlineWarning className=\"confirmMsgIcon\" />\n          Authentication Failed.......!\n        </span>\n      );\n      setBorderColor(\"txtBoxBorderColor\");\n      setTimeout(() => {\n        setLoginStatus(\"\");\n        setBorderColor(\"\");\n        setConfirmationMessageClass(\"\");\n      }, 4000);\n    } else {\n      setConfirmationMessageClass(\"successMsg\");\n      setLoginStatus(\n        <span>\n          <TiTickOutline className=\"confirmMsgIcon\" />\n          Logged In Successfully\n        </span>\n      );\n      // setTimeout(() => {\n      setLoginStatus(\"\");\n      setSecretKeyValidationPopUp(false);\n      setConfirmationMessageClass(\"\");\n      // }, 3000);\n    }\n  };\n\n  const getIpAddressData = async () => {\n    fetch(\"https://geolocation-db.com/json/\")\n      .then((response) => {\n        return response.json();\n      }, \"jsonp\")\n      .then((res) => {\n        setIpAddress(res.IPv4);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleGenerateSecretKey = () => {\n    setGenerateSecretKey(!generateSecretKey);\n  };\n\n  const secretKeysDataSizeHandler = () => {\n    axios({\n      method: \"GET\",\n      url: baseUrl + `/CostMS/cost/findSecretKeysDataSize`,\n    })\n      .then(function (responseData) {\n        //handle success\n        setSecretKeysDataSize(responseData.data);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    secretKeysDataSizeHandler();\n    getIpAddressData();\n  }, []);\n\n  return (\n    <div>\n      <SecretKeyVerificationPopUp\n        secretKeyValidationPopUp={secretKeyValidationPopUp}\n        setSecretKeyValidationPopUp={setSecretKeyValidationPopUp}\n        loginStatus={loginStatus}\n        setLoginStatus={setLoginStatus}\n        secretKeysDataSize={secretKeysDataSize}\n        onChangeHandler={onChangeHandler}\n        validateSecretKey={validateSecretKey}\n        handleGenerateSecretKey={handleGenerateSecretKey}\n        confirmationMessageClass={confirmationMessageClass}\n        borderColor={borderColor}\n      />\n      <div>\n        {validateKeyResponse?.status && secretKeyValidationPopUp == false ? (\n          <CostViewAndUpload\n            formData={formData}\n            country={country}\n            departments={departments}\n            selectedDepartments={selectedDepartments}\n            filtersData={filtersData}\n            setfiltersData={setfiltersData}\n            date={date}\n            setDate={setDate}\n            setSelectedDepartments={setSelectedDepartments}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div>\n        {generateSecretKey ? (\n          <GenerateSecretKey\n            open={generateSecretKey}\n            setGenerateSecretKey={setGenerateSecretKey}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default SecretKeyVerification;\n"],"names":["props","costLoginHistoryPopUp","setCostLoginHistoryPopUp","costLoginHistoryData","useState","displayData","setDisplayData","useEffect","displayTableData","data","undefined","map","d","index","push","forEach","iData","cIndex","moment","format","size","visible","onClose","className","style","marginLeft","align","type","onChange","e","target","value","id","filteresData","filter","Object","keys","some","key","existedVal","_d","finalVal","toLowerCase","includes","handleChange","width","costChangeHistoryPopUp","setCostChangeHistoryPopUp","costHistoryChangeData","costId","useRef","viewAllState","handleDisplayData","timer","seconds","setSeconds","minutes","setMinutes","displayTimer","setDisplayTimer","setInterval","prevVal","current","clearInterval","restart","stop","showCostHandler","headers","length","dat","ele","innerIndex","IconButton","title","height","onClick","colSpan","userInputCostValue","signal","updatedCostOrNot","borderColor","formData","country","departments","selectedDepartments","filtersData","setfiltersData","date","setDate","setSelectedDepartments","baseUrl","environment","url","window","location","href","loggedUserId","localStorage","getItem","setVisible","FaChevronCircleUp","cheveronIcon","setCheveronIcon","resourceCostData","setResourceCostData","excelUploadPopUp","setExcelUploadPopUp","excelFile","setExcelFile","viewAllStateArr","maskId","resourceCostRespData","setCostHistoryChangeData","textInputRef","textInputRefId","confirmationMsg","setConfirmationMsg","stateValue","setStateValue","gridComputedState","setGridComputedState","statusMessage","setStatusMessage","loaderTimer","setLoaderTimer","setGetData","abortController","ref","editedCheck","getResourcesCostData","AbortController","axios","method","responseData","resp","handleTableView","tableDataKeys","tabData","element","keyIndex","eNum","indexOf","onKeyPress","code","which","keyCode","preventDefault","defaultValue","onCostChangeHandler","HandleViewButton","onUpdateHandler","fontSize","handleCostChangeHistory","onCloseHandler","float","originalValue","getIpAddress","fetch","then","response","json","res","loginHistoryTracks","IPv4","catch","err","console","log","ipAddress","loginTrackData","urlData","split","cVal","secretKey","resourceId","updateCostValue","setTimeout","objData","useLayoutEffect","filterDeptData","toString","uploadExcelSheet","link","Loader","handleAbort","abort","FaChevronCircleDown","class","for","FilterChangeHandler","selected","country_name","options","hasSelectAll","isLoading","shouldToggleOnHover","disableSearch","valueRenderer","_options","label","disabled","s","filteredDeptData","businessUnit","handleChangeDate","maxDate","Date","dateFormat","showMonthYearPicker","subtract","duration","startOf","endOf","GlobalValidation","searchClickHandler","computeGridHandler","showAllArr","filteredArr","handleViewAll","UploadExcelSheet","open","setGenerateSecretKey","logged","setLogged","validationMessage","setValidationMessage","setEnterSecretKeyValidation","setReEnterSecretKeyValidation","Response","error","initialValues","emailOfficial","initialSecretKey","secondSecretKey","secretKeyFormData","setSecretKeyFormData","secretKeyChangeHandler","color","marginTop","status","secretKeyValidationPopUp","setSecretKeyValidationPopUp","loginStatus","secretKeysDataSize","setLoginStatus","onChangeHandler","validateSecretKey","handleGenerateSecretKey","confirmationMessageClass","autoComplete","setFormData","validateKeyResponse","setValidateKeyResponse","generateSecretKey","setSecretKeysDataSize","setConfirmationMessageClass","setBorderColor","setIpAddress","legalEntityName","fromDate","toDate","finalFormData","getIpAddressData"],"sourceRoot":""}