{"version":3,"file":"static/js/8190.d69b8ea4.chunk.js","mappings":"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","sources":["views/GovernanceComponent/CSATSurveyDataTable.js","views/GovernanceComponent/CSATSurveyQuestions.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Column } from \"primereact/column\";\nimport { DataTable } from \"primereact/datatable\";\n// import { getTableData } from \"./CSATSurveyQuestionsData\";\nimport { ColumnGroup } from \"primereact/columngroup\";\nimport { Row } from \"primereact/row\";\n// import \"primeflex/primeflex.css\";\nimport { Button } from \"primereact/button\";\nimport { FaSave } from \"react-icons/fa\";\nimport DatePicker from \"react-datepicker\";\nimport { TiCancel } from \"react-icons/ti\";\nimport { environment } from \"../../environments/environment\";\nimport { BiCheck } from \"react-icons/bi\";\n\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { MdOutlineAdd, MdOutlinePlaylistAdd } from \"react-icons/md\";\nimport { AiFillWarning, AiOutlinePlusSquare } from \"react-icons/ai\";\nimport { ImCross } from \"react-icons/im\";\nimport \"./CSATSurveyDataTable.scss\";\nimport { TfiSave } from \"react-icons/tfi\";\n\nfunction CSATSurveyDataTable() {\n  const [Data, setData] = useState([]);\n  const [subRowData, setSubRowData] = useState([]);\n  const [expandedRows, setExpandedRows] = useState(null);\n  const [flag, setFlag] = useState(false);\n  const [neastedFlag, setNeastedflag] = useState(false);\n  const [quesType, setQuesType] = useState([]);\n  const [addmsg, setAddmsg] = useState(false);\n  const [addinnermsg, setAddinnermsg] = useState(false);\n  const [surveyquesArr, setSurveyquesArr] = useState();\n  const [emptyMessage, setEmptyMessage] = useState(false);\n  const [clicked, setClicked] = useState(false);\n  const [saveCliked, setSaveClicked] = useState(true);\n  const [cancelClicked, setCancelClicked] = useState(true);\n  const [click, setClick] = useState(false);\n  const [saveClik, setSaveClick] = useState(true);\n  const [cancelClick, setCancelClick] = useState(true);\n  // const [surveyinnerquesArr, setSurveyinnerquesArr] = useState();\n  const [saveQue, setSaveQue] = useState(\"\");\n  const [saveInnerQue, setSaveInnerQue] = useState(\"\");\n\n  const [uniqueMessage, setUniqueMessage] = useState(false);\n  const [isModified, setIsModified] = useState(false);\n  const [isinnerModified, setIsinnerModified] = useState(false);\n\n  const [addFormData, setAadFormData] = useState({\n    survey_name: \"\",\n    type: \"CSAT\",\n  });\n\n  const [addNestedFormData, setAddNeastedFormData] = useState({\n    pcqa_csat_survey_id: \"\",\n    question: \"\",\n    question_code: \"\",\n    // response_type: \"160\",\n    // status: 1,\n    // question: \"\",\n    // type: \"\",\n  });\n  const baseUrl = environment.baseUrl;\n\n  useEffect(() => {\n    getTableData();\n    getQuestionType();\n    getSurveyquesArr();\n  }, []);\n\n  const Reset = () => {\n    document.getElementsByClassName(\"p-row-editor-cancel p-link\")[0]?.click();\n    setAddNeastedFormData({});\n    setClicked(false);\n    setCancelClicked(true);\n    setSaveClicked(true);\n  };\n  const Reset1 = () => {\n    document.getElementsByClassName(\"p-row-editor-cancel p-link\")[0]?.click();\n    setCancelClick(true);\n    setClick(false);\n    setSaveClick(true);\n  };\n  const Save = () => {\n    document\n      .getElementsByClassName(\"p-row-editor-save-icon pi pi-fw pi-check\")[0]\n      ?.click();\n    // EditedData();\n    // setCancelClicked(true);\n    // setSaveClicked(true);\n    // setClicked(false);\n    // EditedData(editeddata);\n  };\n  const getSurveyquesArr = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/governancems/Csat/getCsatsurvey`,\n    })\n      .then(function (response) {\n        let resp = response.data;\n        setSurveyquesArr(resp);\n      })\n      .catch(function (error) {});\n  };\n\n  const getTableData = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/governancems/Csat/getCsatques`,\n    })\n      .then(function (response) {\n        var resp = response.data;\n        setData(resp);\n      })\n      .catch(function (response) {});\n  };\n\n  const getQuestionType = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/governancems/Csat/getQuestionType`,\n    })\n      .then(function (response) {\n        var resp = response.data;\n        setQuesType(resp);\n      })\n      .catch(function (response) {});\n  };\n\n  const saveSurveyQuestion = () => {\n    let someDataa = surveyquesArr.some(\n      (d) => d.survey_name == addFormData.survey_name\n    );\n    if (Data != undefined) {\n      if (someDataa) {\n        let ele = document.getElementsByName(\"survey_name\");\n        for (let index = 0; index < ele.length; index++) {\n          ele[index].classList.add(\"error-block\");\n        }\n\n        setUniqueMessage(true);\n        setSaveClick(false);\n        setCancelClick(false);\n        setClick(true);\n\n        setTimeout(() => {\n          setUniqueMessage(false);\n        }, 3000);\n        return;\n      }\n    }\n    if (addFormData.survey_name == \"\" || addFormData.survey_name == \" \") {\n      let ele = document.getElementsByName(\"survey_name\");\n      for (let index = 0; index < ele.length; index++) {\n        ele[index].classList.add(\"error-block\");\n      }\n      setEmptyMessage(true);\n      setTimeout(() => {\n        setEmptyMessage(false);\n      }, 3000);\n      return;\n    }\n\n    axios({\n      method: \"post\",\n      url: baseUrl + `/governancems/Csat/saveSurvey`,\n      data: addFormData,\n    }).then((error) => {\n      getTableData();\n      getSurveyquesArr();\n      setFlag(false);\n      setSaveQue(addFormData?.survey_name);\n      setAddmsg(true);\n      setTimeout(() => {\n        setAddmsg(false);\n      }, 3000);\n      setSaveClick(true);\n      setCancelClick(true);\n      setClick(false);\n    });\n  };\n  const saveInnerSurveyQue = () => {\n    // let someDataa = surveyquesArr.some(d => d.subrows?.question == addNestedFormData?.question);\n    // let someDataa = surveyquesArr.some((d) => {\n    //   return d.subrows.some((a) => {\n    //     if (addNestedFormData.pcqa_csat_survey_id === a.pcqa_csat_survey_id)\n    //       return a.question == addNestedFormData?.question;\n    //   });\n    // });\n    // if (Data != undefined) {\n    //   if (someDataa) {\n    //     let ele = document.getElementsByName(\"question\");\n    //     for (let index = 0; index < ele.length; index++) {\n    //       ele[index].classList.add(\"error-block\");\n    //     }\n\n    //     setUniqueMessage(true);\n    //     setClicked(true);\n    //     setCancelClicked(true);\n    //     setSaveClicked(true);\n\n    //     // setValidationMessage(false);\n    //     setTimeout(() => {\n    //       setUniqueMessage(false);\n    //     }, 3000);\n    //     return;\n    //   }\n    // }\n    if (\n      addNestedFormData.question == \"\" ||\n      addNestedFormData.question == \" \" ||\n      addNestedFormData.question == undefined\n    ) {\n      let ele = document.getElementsByName(\"question\");\n      for (let index = 0; index < ele.length; index++) {\n        ele[index].classList.add(\"error-block\");\n      }\n      // addFormData.survey_name;\n      setEmptyMessage(true);\n      setSaveClicked(false);\n      setCancelClicked(false);\n      setClicked(true);\n      setTimeout(() => {\n        setEmptyMessage(false);\n        //\n      }, 3000);\n      return;\n    }\n\n    axios({\n      method: \"post\",\n      url: baseUrl + `/governancems/Csat/saveInnerSurveyQue`,\n      data: {\n        pcqa_csat_survey_id: addNestedFormData.pcqa_csat_survey_id,\n        question: addNestedFormData.question,\n        question_code: \"\",\n        response_type:\n          addNestedFormData?.response_type == undefined\n            ? \"160\"\n            : addNestedFormData?.response_type,\n        status: 1,\n      },\n    }).then((error) => {\n      getTableData();\n      setSaveInnerQue(addNestedFormData?.question);\n      getSurveyquesArr();\n      setNeastedflag(false);\n      setAddNeastedFormData((prev) => ({ ...prev, [\"response_type\"]: \"160\" }));\n      setAddinnermsg(true);\n      setTimeout(() => {\n        setAddinnermsg(false);\n      }, 3000);\n      setSaveClicked(true);\n      setClicked(false);\n      setCancelClicked(true);\n      setAddNeastedFormData({});\n    });\n  };\n\n  const addHandler = () => {\n    // setIsAdding(true);\n\n    setClicked(true);\n    setCancelClicked(false);\n    setSaveClicked(false);\n  };\n  const addHandler1 = () => {\n    // setIsAdding(true);\n\n    setClick(true);\n    setCancelClick(false);\n    setSaveClick(false);\n  };\n  let count = Data.length;\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value.trim();\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAadFormData(newFormData);\n    setIsModified(true);\n  };\n  const handleIsModifiedChange = () => {\n    setIsModified(false);\n    setClick(true);\n    setCancelClick(false);\n    setSaveClick(false);\n  };\n  const handleIsModified = () => {\n    setIsinnerModified(false);\n    setClicked(true);\n    setCancelClicked(false);\n    setSaveClicked(false);\n  };\n  const handleAddNestedFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value.trim();\n\n    const newFormData = { ...addNestedFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddNeastedFormData(newFormData);\n    setIsinnerModified(true);\n  };\n\n  const allowExpansion = (rowData) => {\n    return (\n      // <span className=\"col-2\">\n      rowData.subrows?.length >= 0\n      // </span>\n    );\n  };\n\n  // let headerGroup = (\n  //   <ColumnGroup>\n  //     <Row>\n  //       <Column />\n  //       <Column header=\"Survey/Question\" alignHeader={\"center\"} />\n  //       <Column header=\"Created On/Question type\" alignHeader={\"center\"} />\n  //       {/* <Column header=\"Question type\" /> */}\n  //     </Row>\n  //   </ColumnGroup>\n  // );\n  const questionTooltip = (data) => {\n    return (\n      <div data-toggle=\"tooltip\" title={data.survey_name}>\n        {data.survey_name}\n      </div>\n    );\n  };\n\n  const question = (data) => {\n    return (\n      <div data-toggle=\"tooltip\" title={data.question}>\n        {data.question}\n      </div>\n    );\n  };\n\n  const questionRange = (data) => {\n    return (\n      <div data-toggle=\"tooltip\" title={data.lkup_name}>\n        {data.lkup_name}\n      </div>\n    );\n  };\n\n  const handleForm = (\n    <div className=\"newEntryFields\">\n      <form className=\"col-md-12\">\n        <div className=\"row px-1 py-2\">\n          <div className=\"col-9\">\n            <input\n              type=\"text\"\n              name=\"survey_name\"\n              required\n              onChange={handleAddFormChange}\n              placeholder=\"Enter Survey Question\"\n            />\n          </div>\n          <div className=\"col-3\">\n            <DatePicker\n              name=\"date\"\n              id=\"date\"\n              className=\"disableField\"\n              selected={new Date()}\n              // selected={editedData?.Due_Date}\n              // selected={editedData && 'Due_Date' in editedData && editedData.Due_Date}\n              dateFormat=\"dd-MMM-yyyy\"\n              showMonthDropdown\n              disabled\n              showYearDropdown\n            />\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n  const representDate = (data) => {\n    return (\n      <div title={moment(data.date).format(\"DD-MMM-YYYY\")}>\n        {moment(data.date).format(\"DD-MMM-YYYY\")}\n      </div>\n    );\n  };\n\n  const handleNestedForm = (\n    <div className=\"newEntryFields\">\n      <form className=\"col-md-12\">\n        <div className=\"row px-1 py-2\">\n          <div className=\"col-9\">\n            <input\n              type=\"text\"\n              name=\"question\"\n              required\n              onChange={handleAddNestedFormChange}\n              placeholder=\"Enter Survey Question\"\n            />\n          </div>\n          <div className=\"col-3\">\n            <select\n              name=\"response_type\"\n              id=\"response_type\"\n              onChange={handleAddNestedFormChange}\n            >\n              {quesType.map((Item) => (\n                <option value={Item.val}> {Item.lkup_name}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n\n  let rowExpansionTemplate = (data) => {\n    return (\n      <div className=\" darkHeader p-2\">\n        <DataTable\n          value={data.subrows}\n          responsiveLayout=\"scroll\"\n          header={null}\n          className=\"p-grid innercsat customerEngament\"\n          pagination={data.subrows.length > 0}\n          paginator={data.subrows.length > 0}\n          rows={10}\n          paginationPerPage={5}\n          paginationRowsPerPageOptions={[5, 15, 25, 50]}\n          paginationComponentOptions={{\n            rowsPerPageText: \"Records per page:\",\n            rangeSeparatorText: \"out of\",\n          }}\n        >\n          <Column field=\"question\" body={question} />\n\n          <Column field=\"lkup_name\" body={questionRange} />\n        </DataTable>\n        <>{setSubRowData(data.subrows)}</>\n        <div className=\"newTableEntry\">\n          <div>{neastedFlag === true && <span>{handleNestedForm}</span>}</div>\n        </div>\n        <div className=\"tableBottomButtons btn-container-events center\">\n          <button\n            className=\"btn btn-primary p-1\"\n            data-toggle=\"tooltip\"\n            disabled={clicked}\n            title=\"Add new row\"\n            onClick={() => {\n              setNeastedflag(true);\n              addHandler();\n              setAddNeastedFormData((prev) => ({\n                ...prev,\n                [\"pcqa_csat_survey_id\"]: data.id,\n              }));\n            }}\n          >\n            <MdOutlineAdd size={\"1.2em\"} /> Add\n          </button>\n          <button\n            className=\"btn btn-primary p-1\"\n            disabled={saveCliked}\n            onClick={() => {\n              saveInnerSurveyQue();\n              Save();\n            }}\n            data-toggle=\"tooltip\"\n            title=\"Save row\"\n          >\n            <TfiSave size=\"0.7em\" />\n            <span className=\"ml-1\"> Save </span>\n          </button>\n          <button\n            className=\"btn btn-primary p-1\"\n            disabled={cancelClicked}\n            onClick={() => {\n              setNeastedflag(false);\n              Reset();\n            }}\n            data-toggle=\"tooltip\"\n            title=\"Cancel row editing\"\n          >\n            <ImCross size={\"0.6em\"} />\n            <span className=\"ml-1\">Cancel</span>\n          </button>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <React.Fragment>\n      <div className=\"col-md-12\">\n        {uniqueMessage ? (\n          <div className=\"statusMsg error\">\n            {\" \"}\n            <AiFillWarning /> Please give Unique Name\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n      {isModified && handleIsModifiedChange()}\n      {isinnerModified && handleIsModified()}\n\n      <div className=\"col-md-12\">\n        {emptyMessage ? (\n          <div className=\"statusMsg error\">\n            {\" \"}\n            <AiFillWarning /> Please select the valid values for highlighted\n            fields\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className=\"col-md-12\">\n        {addmsg ? (\n          <div className=\"statusMsg success\">\n            {\" \"}\n            <BiCheck />\n            {/* {saveQue} survey question saved successfully */}\n            CSAT Survey {saveQue} created successfully\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className=\"col-md-12\">\n        {addinnermsg ? (\n          <div className=\"statusMsg success\">\n            {\" \"}\n            <BiCheck />\n            {/* {saveInnerQue} survey question saved successfully */}\n            Survey Question {saveInnerQue} created successfully.\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <div className=\"csatTable darkHeader toHead\">\n        <DataTable\n          value={Data}\n          showGridlines\n          // headerColumnGroup={headerGroup}\n\n          expandedRows={expandedRows}\n          onRowToggle={(e) => setExpandedRows(e.data)}\n          rowExpansionTemplate={rowExpansionTemplate}\n          pagination\n          paginator\n          rows={15}\n          className=\"primeReactDataTable \" ////customerEngament\n          paginatorTemplate=\"RowsPerPageDropdown FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"\n          currentPageReportTemplate=\"{first} to {last} of {totalRecords}\"\n          rowsPerPageOptions={[15, 25, 50]}\n          // paginationPerPage={5}\n          // paginationRowsPerPageOptions={[5, 15, 25, 50]}\n          // paginationComponentOptions={{\n          //   rowsPerPageText: \"Records per page:\",\n          //   rangeSeparatorText: \"out of\",\n          // }}\n        >\n          <Column expander={allowExpansion} />\n          <Column\n            field=\"survey_name\"\n            header=\"Survey/Question\"\n            sortable\n            // header={Data.survey_name}\n            body={questionTooltip}\n            alignHeader={\"center\"}\n          />\n          <Column\n            sortable\n            field=\"date\"\n            header=\"Created On/Question type\"\n            // header={Data.date}\n            body={representDate}\n            alignHeader={\"center\"}\n          />\n        </DataTable>\n        <div className=\"newTableEntry\">\n          {flag === true && <span>{handleForm}</span>}\n        </div>\n        <div className=\"tableBottomButtons btn-container-events center\">\n          <button\n            className=\"btn btn-primary p-1\"\n            data-toggle=\"tooltip\"\n            disabled={click}\n            title=\"Add new row\"\n            onClick={() => {\n              setFlag(true);\n              addHandler1();\n            }}\n            variant=\"contained\"\n          >\n            <MdOutlineAdd size=\"1.2em\" /> Add\n          </button>\n          <button\n            className=\"btn btn-primary p-1\"\n            disabled={saveClik}\n            onClick={() => {\n              saveSurveyQuestion();\n              Save();\n            }}\n            data-toggle=\"tooltip\"\n            title=\"Save row\"\n            // variant=\"contained\"\n          >\n            <TfiSave size={\"0.7em\"} />\n            <span className=\"ml-1\"> Save </span>\n          </button>\n          <button\n            className=\"btn btn-primary p-1\"\n            disabled={cancelClick}\n            onClick={() => {\n              setFlag(false);\n              Reset1();\n            }}\n            data-toggle=\"tooltip\"\n            title=\"Cancel row editing\"\n            variant=\"contained\"\n          >\n            <ImCross size={\"0.6em\"} />\n            <span className=\"ml-1\">Cancel</span>\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default CSATSurveyDataTable;\n","import React, { useState, useEffect } from \"react\";\nimport { getTableData } from \"./CSATSurveyQuestionsData\";\n// import DataTable from 'react-data-table-component'\nimport CSATSurveyDataTable from './CSATSurveyDataTable';\nfunction CSATSurveyQuestions() {\n\n\n  return (\n    <>\n      <div className=\"col-md-12\">\n        <div className=\"pageTitle\">\n          <div className=\"childOne\"></div>\n          <div className=\"childTwo\">\n            <h2>CSAT Survey Questions</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n      </div>\n\n      <CSATSurveyDataTable />\n    </>\n  );\n}\n\nexport default CSATSurveyQuestions;\n"],"names":["useState","Data","setData","setSubRowData","expandedRows","setExpandedRows","flag","setFlag","neastedFlag","setNeastedflag","quesType","setQuesType","addmsg","setAddmsg","addinnermsg","setAddinnermsg","surveyquesArr","setSurveyquesArr","emptyMessage","setEmptyMessage","clicked","setClicked","saveCliked","setSaveClicked","cancelClicked","setCancelClicked","click","setClick","saveClik","setSaveClick","cancelClick","setCancelClick","saveQue","setSaveQue","saveInnerQue","setSaveInnerQue","uniqueMessage","setUniqueMessage","isModified","setIsModified","isinnerModified","setIsinnerModified","survey_name","type","addFormData","setAadFormData","pcqa_csat_survey_id","question","question_code","addNestedFormData","setAddNeastedFormData","baseUrl","environment","useEffect","getTableData","getQuestionType","getSurveyquesArr","Save","document","getElementsByClassName","axios","method","url","then","response","resp","data","catch","error","handleAddNestedFormChange","length","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","trim","newFormData","title","questionRange","lkup_name","handleForm","className","name","required","onChange","placeholder","id","selected","Date","dateFormat","showMonthDropdown","disabled","showYearDropdown","handleNestedForm","map","Item","val","showGridlines","onRowToggle","e","rowExpansionTemplate","subrows","responsiveLayout","header","pagination","paginator","rows","paginationPerPage","paginationRowsPerPageOptions","paginationComponentOptions","rowsPerPageText","rangeSeparatorText","field","body","onClick","prev","size","undefined","ele","getElementsByName","index","classList","add","setTimeout","response_type","status","saveInnerSurveyQue","Reset","paginatorTemplate","currentPageReportTemplate","rowsPerPageOptions","expander","rowData","sortable","alignHeader","moment","date","format","variant","someDataa","some","d","saveSurveyQuestion","Reset1"],"sourceRoot":""}