{"version":3,"file":"static/js/4205.b2117c89.chunk.js","mappings":"+OAmIA,IA9HA,SAA0BA,GACxB,IACEC,EAaED,EAbFC,YACAC,EAYEF,EAZFE,QACAC,EAWEH,EAXFG,YAEAC,GASEJ,EAVFK,WAUEL,EATFI,cACAE,EAQEN,EARFM,gBACAC,EAOEP,EAPFO,OAEAC,GAKER,EANFS,YAMET,EALFQ,MACAE,EAIEV,EAJFU,GACAC,EAGEX,EAHFW,MACAC,EAEEZ,EAFFY,QACAC,EACEb,EADFa,kBAEF,GAAwBC,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAiBT,OAjBkB,MAMpBC,EAAAA,EAAAA,YAAU,WACR,GACC,CAACD,KAMJC,EAAAA,EAAAA,YAAU,WAAO,GAAG,CAACf,KAIjB,iCACE,gBAAKgB,UAAU,yBAAwB,SAC3B,qBAATN,GACC,SAAC,EAAAO,wBAAuB,CACtBC,MAAOlB,EACPmB,KAAK,OACLZ,KAAMA,EACNK,kBAA+B,OAAZT,QAAY,IAAZA,OAAY,EAAZA,EAAciB,YACjCX,GAAIA,EACJO,UAAU,MACVhB,YAAaA,EACbC,QAASA,EACTU,QAASA,EACTU,YAAY,4BACZC,SAAU,SAACC,GACTlB,EAAgBkB,GAChBC,QAAQC,IAAI,8BACd,EAEAC,SAAU,SAACH,GACTrB,GAAY,SAACyB,GAAS,yBAAWA,GAAS,cAAGpB,EAAOgB,EAAEd,IAAE,IAExDP,GAAY,SAACyB,GAAS,yBACjBA,GAAS,cACX,UAAYJ,EAAEhB,MAAI,GAEvB,EACAqB,UAAU,IAED,eAATlB,GACF,SAAC,EAAAO,wBAAuB,CACtBC,MAAOlB,EACPmB,KAAK,OACLZ,KAAMA,EACNK,kBAA+B,OAAZT,QAAY,IAAZA,OAAY,EAAZA,EAAciB,YACjCX,GAAIA,EACJO,UAAU,MACVhB,YAAaA,EACbC,QAASA,EACTU,QA/CQ,SAACkB,GACnB3B,GAAY,SAACyB,GAAS,yBAAWA,GAAS,cAAGpB,EAAO,IAAE,IACtDiB,QAAQC,IAAIlB,EACd,EA6CYc,YAAY,4BACZC,SAAU,SAACC,GACTlB,EAAgBkB,EAClB,EAEAG,SAAU,SAACH,GACTrB,GAAY,SAACyB,GAAS,yBAAWA,GAAS,cAAGpB,EAAOgB,EAAEd,IAAE,GAE1D,EACAmB,UAAU,EACVE,eAAe,EACfC,kBAAkB,aAGpB,gBACEf,UAAU,oBACVP,GAAG,OACHuB,IAAK,SAACC,QACUC,GAAV5B,IACFA,EAAO6B,QAAQ,GAAKF,EAExB,EAAE,UAEF,SAAC,EAAAhB,wBAAuB,CACtBC,MAAOlB,EACPmB,KAAK,OACLZ,KAAMA,EACNc,YAAY,4BACZT,kBAAmBA,EACnBH,GAAIA,EACJO,UAAU,MACVL,QAASA,EACTX,YAAaA,EACbC,QAASA,EACTqB,SAAU,SAACC,GACTlB,EAAgBkB,GAChBC,QAAQC,IAAI,qBACd,EAEAC,SAAU,SAACH,GACTrB,GAAY,SAACyB,GAAS,yBAAWA,GAAS,cAAGpB,EAAOgB,EAAEd,IAAE,GAC1D,EACAmB,UAAU,SAKlB,0BAAOd,EAAKP,SAIpB,C","sources":["views/ProjectComponent/RiskAutocomplete.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\n\nfunction RiskAutoComplete(props) {\n  const {\n    riskDetails,\n    getData,\n    setFormData,\n    editedData,\n    formEditData,\n    onChangeHandler,\n    refArr,\n    setUsername,\n    name,\n    id,\n    value,\n    onClear,\n    inputSearchString,\n  } = props;\n  const [item, setItem] = useState([]);\n\n  // console.log(\"in line 10\");\n  // console.log(props);\n  // console.log(refArr);\n\n  useEffect(() => {\n    // console.log(item);\n  }, [item]);\n\n  const handleClear = (edit) => {\n    setFormData((prevProps) => ({ ...prevProps, [name]: \"\" }));\n    console.log(name);\n  };\n  useEffect(() => {}, [riskDetails]);\n  // console.log(value);\n  {\n    return (\n      <>\n        <div className=\"autoComplete-container\">\n          {value == \"UpdateBillingRate\" ? (\n            <ReactSearchAutocomplete\n              items={riskDetails}\n              type=\"Text\"\n              name={name}\n              inputSearchString={formEditData?.assigned_to}\n              id={id}\n              className=\"err\"\n              riskDetails={riskDetails}\n              getData={getData}\n              onClear={onClear}\n              placeholder=\"Type minimum 3 characters\"\n              onChange={(e) => {\n                onChangeHandler(e);\n                console.log(\"789------------------------\");\n              }}\n              // setSelectEmployee={setSelectEmployee}\n              onSelect={(e) => {\n                setFormData((prevProps) => ({ ...prevProps, [name]: e.id }));\n\n                setFormData((prevProps) => ({\n                  ...prevProps,\n                  [\"Resname\"]: e.name,\n                }));\n              }}\n              showIcon={false}\n            />\n          ) : value == \"EngagementS\" ? (\n            <ReactSearchAutocomplete\n              items={riskDetails}\n              type=\"Text\"\n              name={name}\n              inputSearchString={formEditData?.assigned_to}\n              id={id}\n              className=\"err\"\n              riskDetails={riskDetails}\n              getData={getData}\n              onClear={handleClear}\n              placeholder=\"Type minimum 3 characters\"\n              onChange={(e) => {\n                onChangeHandler(e);\n              }}\n              // setSelectEmployee={setSelectEmployee}\n              onSelect={(e) => {\n                setFormData((prevProps) => ({ ...prevProps, [name]: e.id }));\n                // console.log(e.id);\n              }}\n              showIcon={false}\n              showNoResults={true}\n              showNoResultsText=\"<<ALL>>\"\n            />\n          ) : (\n            <div\n              className=\"auto autocomplete\"\n              id=\"auto\"\n              ref={(ele) => {\n                if (refArr != undefined) {\n                  refArr.current[0] = ele;\n                }\n              }}\n            >\n              <ReactSearchAutocomplete\n                items={riskDetails}\n                type=\"Text\"\n                name={name}\n                placeholder=\"Type minimum 3 characters\"\n                inputSearchString={inputSearchString}\n                id={id}\n                className=\"err\"\n                onClear={onClear}\n                riskDetails={riskDetails}\n                getData={getData}\n                onChange={(e) => {\n                  onChangeHandler(e);\n                  console.log(\"123---------------\");\n                }}\n                // setSelectEmployee={setSelectEmployee}\n                onSelect={(e) => {\n                  setFormData((prevProps) => ({ ...prevProps, [name]: e.id }));\n                }}\n                showIcon={false}\n              />\n            </div>\n          )}\n        </div>\n        <span>{item.name}</span>\n      </>\n    );\n  }\n}\nexport default RiskAutoComplete;\n"],"names":["props","riskDetails","getData","setFormData","formEditData","editedData","onChangeHandler","refArr","name","setUsername","id","value","onClear","inputSearchString","useState","item","useEffect","className","ReactSearchAutocomplete","items","type","assigned_to","placeholder","onChange","e","console","log","onSelect","prevProps","showIcon","edit","showNoResults","showNoResultsText","ref","ele","undefined","current"],"sourceRoot":""}