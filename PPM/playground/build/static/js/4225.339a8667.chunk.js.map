{"version":3,"file":"static/js/4225.339a8667.chunk.js","mappings":"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","sources":["views/GovernanceComponent/PCQA.js"],"sourcesContent":["import axios from \"axios\";\nimport MaterialReactTable from \"material-react-table\";\nimport React, { useMemo, useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport { FaDownload, FaPlus, FaSave } from \"react-icons/fa\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { ReactSearchAutocomplete } from \"react-search-autocomplete\";\nimport { environment } from \"../../environments/environment\";\nimport GlobalHelp from \"../PrimeReactTableComponent/GlobalHelp\";\nimport './PCQA.scss';\n\nimport { CCollapse } from \"@coreui/react\";\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport {\n  FaChevronCircleDown,\n  FaChevronCircleUp\n} from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\nfunction PCQA() {\n\n  const [startDate, setStartDate] = useState(new Date());\n  const [visible, setVisible] = useState(false);\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [departments, setDepartments] = useState([]);\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\n  const HelpPDFName = \"PCQAGovernance.pdf\";\n  const Header = \"PCQA Help\";\n  const baseUrl = environment.baseUrl;\n  const loggedUserId = localStorage.getItem(\"resId\");\n\n  const [selectedProjectStage, setSelectedProjectStage] = useState([])\n\n  const [coustomOptions, setCoustomOptions] = useState([])\n  const [contractOptions, setContractOptions] = useState([])\n\n  const [auditTypes, setAuditTypes] = useState([])\n  const [tableData, setTableData] = useState([]);\n  const [selectedAuditStatus, setSelectedAuditStatus] = useState([])\n\n\n  const [rowData, setRowData] = useState({});\n  const [rowCompletedData, setRowCompletedData] = useState({});\n\n  const [files, setFiles] = useState(null);\n\n  console.log(\"rowCompletedData\");\n  console.log(rowCompletedData);\n\n  const [schduleData, setSchduleData] = useState({})\n\n  const [resource, setResource] = useState([]);\n\n  console.log(\"rowdata\")\n  console.log(rowData)\n\n  const projectSourceOptions = [\n    { label: 'PPM', value: 'PPM' },\n    { label: 'Projector', value: 'Projector' },\n  ];\n\n\n  const resourceFnc = async () => {\n    await axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/risks/getAssignedData`,\n    }).then((res) => {\n      let manger = res.data;\n      setResource(manger);\n    });\n  };\n\n  const [selectedProjectSource, setSelectedProjectSource] = useState([])\n\n  //State variable to set the selected row\n  const [selectedRow, setSelectedRow] = useState(null);\n\n  useEffect(() => {\n    getAccounts();\n  }, [selectedDepartments])\n\n\n\n  useEffect(() => {\n    getAccounts();\n  }, [selectedProjectStage])\n  useEffect(() => {\n    resourceFnc();\n    pcqaDashboard();\n    getDepartments();\n    enguagementTypeFnc();\n    getcontractTerms();\n    setSelectedProjectStage([\n      { label: 'In progress', value: 1 },\n    ]);\n    setSelectedProjectSource(projectSourceOptions);\n    setSelectedAuditStatus(auditStatusOptions);\n\n  }, [])\n\n  useEffect(() => {\n    pcqaDashboard()\n  }, [schduleData])\n\n  const [showCompletedPopUp, setCompletedPopUp] = useState(true);\n\n  const handleClose = () => setCompletedPopUp(false);\n  const handleShow = () => setCompletedPopUp(true);\n\n\n  const getColumns = (rowData) => [\n\n    {\n      Header: 'rowm',\n      accessorKey: 'rowKey',\n      size: 40,\n      Cell: ({ row }) => {\n        const pastVal = row.original.id;\n        const auditVal = rowData[row.id]?.auditType;\n        const statusVal = rowData[row.id]?.auditStatus;\n\n        // Determine whether to check the checkbox based on the condition\n        //       const shouldCheckCheckbox = auditVal !== undefined && pastVal !== auditVal;   \n        var shouldCheckCheckbox = false;\n        if (auditVal !== undefined) {\n          var shouldCheckCheckbox = true;\n        }\n\n        if (statusVal !== undefined) {\n          var shouldCheckCheckbox = true;\n        }\n\n        const [rowChecked, setRowChecked] = useState(false);\n\n\n        useEffect(() => {\n          // Update the checkbox state when auditVal changes\n          setRowChecked(shouldCheckCheckbox);\n        }, [shouldCheckCheckbox]);\n        const handleCheckboxChange = () => {\n          // Toggle the checked status\n          setRowChecked(!rowChecked);\n        };\n\n        return (\n          <input\n            type=\"checkbox\"\n            checked={rowChecked}\n            onChange={handleCheckboxChange}\n          />\n        );\n      }\n    },\n    {\n      Header: 'Project Details',\n      accessorKey: 'projectDetails',\n      size: 350,\n      columns: [\n        // { Header: 'RAJ/Prj Status/Name', accessorKey: 'projectName', size: 380,},\n        {\n          Header: 'RAJ/Prj Status/Name',\n          accessorKey: 'projectName',\n          size: 380,\n          Cell: ({ row }) => (\n            <div className=\"d-flex\">\n              <span style={{ color: 'red' }}>● </span>\n              <span style={{ color: 'yellow' }}>● </span>\n              <div className=\"ellipsis\">\n              <Link to={`/project/Overview/:${row.original.id}`} className=\"linkSty\" title={row.original.projectName}>\n                {row.original.projectName}\n              </Link>\n              </div>\n            </div>\n          ),\n        },\n        { Header: 'Customer', accessorKey: 'customer', size: 20, },\n      ],\n\n    },\n    {\n      Header: 'Last Audit Details',\n      accessorKey: 'lastAuditDetails',\n      columns: [\n        { Header: 'Audit Type', accessorKey: 'pastAuditType', size: 50, },\n        { Header: 'Planned Date', accessorKey: 'plandStartDate', size: 150, },\n        { Header: 'Actual Date', accessorKey: 'actualStartDate', size: 150, },\n        { Header: 'Audited Date', accessorKey: 'pastAuditedDate', size: 150, },\n        { Header: 'Auditor Name', accessorKey: 'auditName', size: 150, },\n        {\n          Header: 'Trend', accessorKey: 'Result', size: 50,\n          Cell: ({ row }) => (\n            <div>\n              <a href=\"\" target=\"_blank\" rel=\"noopener noreferrer\">\n                {row.original.Result}\n              </a>\n            </div>\n          ),\n\n\n        },\n        {\n          Header: 'Reports',\n          accessorKey: 'reports',\n          size: 50,\n          Cell: ({ row }) => (\n            row.original.documentId ? (\n              <FaDownload\n                onClick={() =>\n                  downloadEmployeeData(row.original.documentId)\n                }\n              /> // Enabled (boolean value is true)\n            ) : (\n              <FaDownload style={{ opacity: 0.5 }} disabled /> // Disabled (boolean value is false)\n            )\n          ),\n        }\n\n      ],\n    },\n    {\n      Header: 'Schedule Details',\n      accessorKey: 'scheduleDetails',\n      columns: [\n        {\n          Header: 'Type',\n          accessorKey: 'scheduleType',\n          size: 80,\n          Cell: ({ row }) => {\n            const [selectedAudit, setSelectedAudit] = useState(row.original.liveAuditType)\n            const handleDropdownChange = (e) => {\n              setSelectedAudit(e.target.value);\n              setRowData((prev) => {\n                const updatedRowData = { ...prev };\n\n                // Check if 'auditStatus' is not present or undefined\n                if (!updatedRowData[row.id]?.auditStatus) {\n                  updatedRowData[row.id] = {\n                    ...updatedRowData[row.id],\n                    id: row.original.id,\n                    auditType: e.target.value,\n                    auditStatus: row.original.status, // Set auditStatus to row.original.value\n                  };\n                } else {\n                  updatedRowData[row.id] = {\n                    ...updatedRowData[row.id],\n                    id: row.original.id,\n                    auditType: e.target.value,\n                  };\n                }\n\n                return updatedRowData;\n              });\n\n            };\n\n            return (\n              <select\n                id=\"auditType\"\n                onChange={handleDropdownChange}\n                value={selectedAudit}\n              >\n                <option value=\"1285\">CMMI</option>\n                <option value=\"478\">IQA</option>\n                <option value=\"1272\">ISMS</option>\n                <option value=\"1284\">ISO</option>\n                <option value=\"477\">QCR</option>\n              </select>\n            );\n          }\n        },\n        {\n          Header: 'Audit Status',\n          accessorKey: 'status',\n          size: 80,\n          Cell: ({ row }) => {\n            var dumm = row.original.status;\n            var auditVal = row.original.liveAuditType;\n            const [selectedStatus, setSelectedStatus] = useState(dumm)\n            const [showCompletedPopUp, setCompletedPopUp] = useState(false);\n\n\n\n            const handleClose = () => {\n              setCompletedPopUp(false);\n              setRowCompletedData(null);\n            } \n            const handleShow = () => setCompletedPopUp(true);\n\n            const [show, setShow] = useState(false);\n            const handleQcrClose = () => setShow(false);\n            const handleQcrShow = () => setShow(true);\n\n            const handleDropdownChange = (e) => {\n              setSelectedStatus(e.target.value);\n              setRowData((prev) => {\n                const updatedRowData = { ...prev };\n\n                // Check if 'auditStatus' is not present or undefined\n                if (!updatedRowData[row.id]?.auditType) {\n                  updatedRowData[row.id] = {\n                    ...updatedRowData[row.id],\n                    id: row.original.id,\n                    auditType: row.original.liveAuditType,\n                    auditStatus: e.target.value,\n                  };\n                } else {\n                  updatedRowData[row.id] = {\n                    ...updatedRowData[row.id],\n                    id: row.original.id,\n                    auditStatus: e.target.value,\n                  };\n                }\n\n                if (e.target.value === '479') {\n                  if (updatedRowData[row.id]?.auditType !== undefined && updatedRowData[row.id]?.auditType === \"477\") {\n                    handleQcrShow();\n                  } else {\n                    if (row.original.liveAuditType === 477) {\n                      handleQcrShow();\n                    } else {\n                      handleShow();\n                    }\n                  }\n                }\n\n\n                return updatedRowData;\n              });\n\n            };\n\n            const handleCompletedChange = (event) => {\n              setRowCompletedData((prev) => {\n                const updatedRowData = { ...prev };\n\n                  updatedRowData[row.id] = {\n                    ...updatedRowData[row.id],\n                    \"projectId\": row.original.projectId,\n                    \"auditType\": rowData[row.id]?.auditType,\n                    \"auditStatus\":rowData[row.id]?.auditStatus,\n                    \"auditDate\": rowData[row.id]?.auditStatus ,\n                    [event.target.name]: event.target.value\n                  };\n                return updatedRowData;\n\n              });\n\n            }\n\n              // Function to handle file input change\n              const handleFileChange = (event) => {\n                const selectedFile = event.target.files[0];\n                setFiles(selectedFile);\n                setRowCompletedData((prev) => {\n                  const updatedRowData = { ...prev };\n                    updatedRowData[row.id] = {\n                      ...updatedRowData[row.id],\n                      [event.target.name]: selectedFile.name \n                    };\n                  return updatedRowData;\n                });\n              };\n    \n\n            return (\n              <>\n                <select\n                  id=\"auditStatus\"\n                  onChange={handleDropdownChange}\n                  value={selectedStatus}\n                >\n                  <option value=\"480\">To be Scheduled</option>\n                  <option value=\"482\">Scheduled</option>\n                  <option value=\"1283\">Audited</option>\n                  <option value=\"483\">Delayed</option>\n                  <option value=\"479\">Completed</option>\n                  <option value=\"581\">Out of Scope</option>\n                </select>\n\n                <Modal show={showCompletedPopUp} onHide={handleClose} size=\"xl\">\n                  <Modal.Header closeButton>\n                    <Modal.Title>Audit Details :</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n\n                    <div>\n\n                      <table className=\"table\">\n                        <thead>\n                          <tr>\n                            <th scope=\"col\">S.No</th>\n                            <th scope=\"col\">Major</th>\n                            <th scope=\"col\">Minor</th>\n                            <th scope=\"col\">Observations</th>\n                            <th scope=\"col\">Recommendations</th>\n                            <th scope=\"col\">Auditor Name</th>\n                            <th scope=\"col\">Auditee</th>\n                            <th scope=\"col\">Reports</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          <tr>\n                            <th scope=\"row\">1</th>\n                            <td>\n                            <input type=\"text\" name=\"major\"\n                              onKeyDown={(e) => {\n                                const key = e.key;\n                                const isNumber = /^[0-9]$/.test(key);\n                                const isDecimal = key === \".\";\n\n                                if (!isNumber && !isDecimal && key !== \"Backspace\") {\n                                  e.preventDefault();\n                                }\n                              }}\n                              onChange={handleCompletedChange}\n\n                              value={rowData[row.id]?.major}\n\n\n                            />\n                            </td>\n\n\n                            <td>\n                              <input type=\"text\" name=\"minor\"\n                                onKeyDown={(e) => {\n                                  const key = e.key;\n                                  const isNumber = /^[0-9]$/.test(key);\n                                  const isDecimal = key === \".\";\n\n                                  if (!isNumber && !isDecimal && key !== \"Backspace\") {\n                                    e.preventDefault();\n                                  }\n                                }}\n                                onChange={handleCompletedChange}\n                                value={rowData[row.id]?.minor}\n                              /></td>\n                            <td><input type=\"text\" name=\"medium\"\n                              onKeyDown={(e) => {\n                                const key = e.key;\n                                const isNumber = /^[0-9]$/.test(key);\n                                const isDecimal = key === \".\";\n\n                                if (!isNumber && !isDecimal && key !== \"Backspace\") {\n                                  e.preventDefault();\n                                }\n                              }}\n                              onChange={handleCompletedChange}\n                                value={rowData[row.id]?.medium}\n                            /></td>\n                            <td><input type=\"text\" name=\"recom\"\n                              onKeyDown={(e) => {\n                                const key = e.key;\n                                const isNumber = /^[0-9]$/.test(key);\n                                const isDecimal = key === \".\";\n\n                                if (!isNumber && !isDecimal && key !== \"Backspace\") {\n                                  e.preventDefault();\n                                }\n                              }}\n                            /></td>\n                            <td>\n                              <div className=\"autoComplete-container\">\n                                <ReactSearchAutocomplete\n                                  className=\"AutoComplete\"\n                                  items={resource}\n                                  type=\"text\"\n                                  name=\"auditorName\"\n                                  id=\"auditorName\"\n                                  disabled\n                                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                                  resultStringKeyName=\"name\"\n                                  resource={resource}\n                                  placeholder=\"Type minimum 3 characters\"\n                                  resourceFnc={resourceFnc}\n                                  onSelect={(e) => {\n                                    console.log(e);\n                                    setRowCompletedData((prev) => {\n                                      const updatedRowData = { ...prev };\n                      \n                                        updatedRowData[row.id] = {\n                                          ...updatedRowData[row.id],\n                                          auditorName: e.name,\n                                        };\n                                      return updatedRowData;               \n                                    });\n                                  }}\n                                  onClear={handleClearAe}\n                                  showIcon={false}\n                                />\n                              </div>\n                            </td>\n                            <td><input type=\"text\"  name=\"auditee\"\n                            \n                            onChange={handleCompletedChange}\n                            value={rowData[row.id]?.minor}\n                            />\n                            \n                            </td>\n                            <td><input type=\"file\" name=\"fileName\"\n                            onChange={handleFileChange}                          \n                            /></td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                    <div className=\"btn btn-container center\" >\n                      <Button onClick={handleClose}>\n                        <FaSave />\n                        Save{\" \"}\n                      </Button>\n                      <Button onClick={handleClose} >\n                        Cancel\n                      </Button>\n                    </div>\n                  </Modal.Body>\n                </Modal>\n\n\n                <Modal show={show} onHide={handleQcrClose}>\n                  <Modal.Header closeButton>\n                    <Modal.Title>Audit Details :</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n\n                    <table class=\"table\">\n                      <thead>\n                        <tr>\n                          <th scope=\"col\">S.No</th>\n                          <th scope=\"col\">QCR%</th>\n                          <th scope=\"col\">Auditor Name</th>\n                          <th scope=\"col\">Auditee</th>\n                          <th scope=\"col\">Reports</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <th scope=\"row\">1</th>\n                          <td>\n                            <input type=\"text\" name=\"percentage\"\n                              onKeyDown={(e) => {\n                                const key = e.key;\n                                const isNumber = /^[0-9]$/.test(key);\n                                const isDecimal = key === \".\";\n\n                                if (!isNumber && !isDecimal && key !== \"Backspace\") {\n                                  e.preventDefault();\n                                }\n                              }}\n                              onChange={handleCompletedChange}\n                              value={rowData[row.id]?.percentage}\n                            />\n                            </td>\n\n                            <td>\n                              <div className=\"autoComplete-container\">\n                                <ReactSearchAutocomplete\n                                  className=\"AutoComplete\"\n                                  items={resource}\n                                  type=\"text\"\n                                  name=\"auditorName\"\n                                  id=\"auditorName\"\n                                  disabled\n                                  fuseOptions={{ keys: [\"id\", \"name\"] }}\n                                  resultStringKeyName=\"name\"\n                                  resource={resource}\n                                  placeholder=\"Type minimum 3 characters\"\n                                  resourceFnc={resourceFnc}\n                                  onSelect={(e) => {\n                                    setRowCompletedData((prev) => {\n                                      const updatedRowData = { ...prev };\n                      \n                                        updatedRowData[row.id] = {\n                                          ...updatedRowData[row.id],\n                                          auditorName: e.name,\n                                        };\n                                      return updatedRowData;               \n                                    });\n                                  }}\n                                  onClear={handleClearAe}\n                                  showIcon={false}\n                                />\n                              </div>\n                            </td>\n                            <td><input type=\"text\"  name=\"auditee\"\n                            \n                            onChange={handleCompletedChange}\n\n                            value={rowData[row.id]?.minor}\n                            />\n                            \n                            </td>\n                          <td><input type=\"text\" /></td>\n                          <td><input type=\"file\" /></td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </Modal.Body>\n                  <div className=\"btn btn-container center\" >\n                      <Button onClick={handleQcrClose}>\n                        <FaSave />\n                        Save{\" \"}\n                      </Button>\n                      <Button onClick={handleQcrClose} >\n                        Cancel\n                      </Button>\n                    </div>\n                </Modal>\n\n              </>\n            );\n          },\n\n        },\n        {\n          Header: 'Date', accessorKey: 'scheduleDate',\n          size: 80,\n          Cell: ({ row }) => {\n            const initialVal = row.original.liveAuditedDate;\n            const defaultDate = new Date(initialVal);\n            const [rowStartDate, setRowStartDate] = useState(null);\n            useEffect(() => {\n              if (initialVal !== null) {\n                setRowStartDate(defaultDate);\n              } else {\n                setRowStartDate(null)\n              }\n            }, [initialVal]);\n            return (\n              <DatePicker\n                selected={rowStartDate}\n                onChange={(date) => {\n                  setRowStartDate(date);\n\n                  if(rowData[row.id]?.auditStatus ==='479'){\n                    const today = moment().format('DD-MMM-YYYY');\n                    console.log(\"today\"+today)\n                    setRowStartDate(today);\n                  }\n\n\n                  setRowData((prev) => {\n                    const updatedRowData = { ...prev };\n\n                    // Check if 'auditStatus' is not present or undefined\n                    if (!updatedRowData[row.id]?.auditStatus && !updatedRowData[row.id]?.auditType) {\n\n\n                      updatedRowData[row.id] = {\n                        ...updatedRowData[row.id],\n                        id: row.original.id,\n                        auditType: row.original.liveAuditType,\n                        auditStatus: row.original.status, // Set auditStatus to row.original.value\n                        auditedDt: moment(date).format(\"DD-MMM-YYYY\"),\n                      }\n                        ;\n                    } else {\n                      updatedRowData[row.id] = {\n                        ...updatedRowData[row.id],\n                        id: row.original.id,\n                        auditedDt: moment(date).format(\"DD-MMM-YYYY\"),\n                      };\n                    }\n\n                    return updatedRowData;\n                  });\n                }}\n                value={rowStartDate}\n                dateFormat=\"dd-MMM-yyyy\"\n              />\n\n            );\n          }\n\n        },\n      ],\n    },\n    {\n      Header: 'Action',\n      accessorKey: 'action',\n      size: 40,\n      Cell: ({ row }) => {\n        const [show, setShow] = useState(false);\n        const handleClose = () => setShow(false);\n        const handleShow = () => setShow(true);\n        return (\n          <>\n            <FaPlus onClick={handleShow} />\n\n\n            <Modal show={show} onHide={handleClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Project Name: {row.original.projectName}</Modal.Title>\n              </Modal.Header>\n              <Modal.Body> Facilitator : <input type=\"text\"></input></Modal.Body>\n              <Modal.Footer>\n                <Button onClick={handleClose}>\n                  <FaSave />\n                  Save{\" \"}\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        );\n      }\n    },\n\n  ];\n\n  const columnData = useMemo(() => getColumns(rowData), [rowData]);\n\n\n  const initialValue = {\n    userId: loggedUserId,\n    unit: \"170,211,123,82,168,207,212,18,213,49,149,208,243\",\n    account: \"-1\",\n    projects: \"\",\n    facilitator: \"\",\n    prjStageList: \"1\",\n    prjSource: \"-1\",\n    auditStatusList: \"486\",\n    fromDt: \"2023-08-01\",\n    auditType: \"484\",\n    isSubmit: true,\n    engType: \"-1\",\n    contractModel: \"-1\",\n    curAlloc: \"1\"\n  };\n\n  const [searchdata, setSearchdata] = useState(initialValue);\n  console.log(\"searchdata\")\n  console.log(searchdata)\n\n  {\n    /*----------------Getting BU---------------- */\n  }\n\n  const getDepartments = async () => {\n    const resp = await axios({\n      url: baseUrl + `/CostMS/cost/getDepartments`, //13\n    });\n\n    let departments = resp.data;\n    departments = departments.filter((ele) => ele.value >= 0);\n    setDepartments(departments);\n    setSelectedDepartments(departments);\n    let filteredDeptData = [];\n    departments.forEach((data) => {\n      filteredDeptData.push(data.value);\n    });\n  };\n\n\n  let apiUrl;\n  apiUrl = baseUrl + `/governancems/PCQA/getAccounts`\n\n  const getAccounts = async () => {\n    const requestBody = {\n      userId: loggedUserId,\n      units: selectedDepartments.map(item => item.value.toString()),\n      status: selectedProjectStage.map(i => i.value.toString())\n    }\n    axios.post(baseUrl + `/governancems/PCQA/getAccounts`, requestBody)\n      .then(res => {\n\n        const responseData = res.data;\n        if (Array.isArray(responseData)) {\n          const formattedData = responseData.map(i => ({\n            label: i.name,\n            value: i.id.toString(),\n          }));\n          setCoustomOptions(formattedData);\n          setSelectedCustomer(formattedData);\n\n          let filteredValues = [];\n          formattedData.forEach((d) => {\n            filteredValues.push(d.value);\n          });\n\n          setSearchdata((prevVal) => ({\n            ...prevVal,\n            [\"account\"]: filteredValues.toString(),\n          }));\n\n        } else {\n          console.error('Invalid response data format');\n        }\n      }).catch(error => console.log(error))\n\n  };\n\n  const downloadEmployeeData = (id) => {\n    const link = document.createElement(\"a\");\n    link.href =\n      baseUrl +\n      `/CommonMS/document/downloadFile?documentId=${id}`;\n    link.click();\n  };\n\n  const pcqaDashboard = async () => {\n    axios.post(baseUrl+`/governancems/PCQA/pcqaDashboard`, searchdata)\n      .then(res => {\n\n        const responseData = res.data;\n        console.log(responseData)\n        setTableData(responseData.pcqa)\n        console.log(responseData.pcqa)\n      }).catch(error => console.log(error))\n\n  };\n\n  const handleClearAe = () => {\n    setSearchdata((prevVal) => ({\n      ...prevVal,\n      [\"facilitator\"]: \"\",\n    }));\n    // setFormData((prev) => ({ ...prev, awId: \"\" }));\n  };\n\n\n  const projectStageOptions = [\n    { value: 1, label: 'In progress' },\n    { value: 2, label: 'Completed' },\n    { value: 4, label: 'On hold' },\n  ];\n\n\n\n  const [selectedCustomer, setSelectedCustomer] = useState([])\n\n\n  const auditStatusOptions = [\n    { value: 480, label: 'To be Scheduled' },\n    { value: 482, label: 'Scheduled' },\n    { value: 1283, label: 'Audited' },\n    { value: 483, label: 'Delayed' },\n    { value: 479, label: 'Completed' },\n    { value: 581, label: 'Out Of Scope' },\n  ];\n\n\n\n\n  const [engagementOptions, setEngagementOptions] = useState([])\n  const [selectedEngagementType, setSelectedEngagementType] = useState([])\n  const [selectedContractTerms, setSelectedContractTerms] = useState([])\n\n  const enguagementTypeFnc = () => {\n    axios({\n      method: \"get\",\n      url: baseUrl + `/ProjectMS/ProjectScopeChange/getEnguagementType`,\n    })\n      .then((res) => {\n        let engmentType = [];\n        let data = res.data;\n        data.length > 0 &&\n          data.forEach((e) => {\n            let engmentObj = {\n              label: e.lkup_name,\n              value: e.id,\n            };\n            engmentType.push(engmentObj);\n          });\n        setEngagementOptions(engmentType);\n        setSelectedEngagementType(engmentType);\n      })\n      .catch((error) => {\n        console.log(\"error :\" + error);\n      });\n  };\n\n  const getcontractTerms = () => {\n    axios\n      .get(baseUrl + `/ProjectMS/ProjectScopeChange/getContractTerms`)\n      .then((Response) => {\n        let terms = [];\n        let data = Response.data;\n        data.length > 0 &&\n          data.forEach((e) => {\n            let termsObj = {\n              label: e.lkup_name,\n              value: e.id,\n            };\n            terms.push(termsObj);\n          });\n        setContractOptions(terms);\n        setSelectedContractTerms(terms);\n\n\n      })\n      .catch((error) => console.log(error));\n  };\n\n  console.log(selectedCustomer)\n\n  // Create a function to convert rowData to schduleData format\n  function convertToSchduleData(rowData) {\n    const schduleData = {\n      resMap: {},\n    };\n\n    // Iterate through the keys in rowData and transform the data\n    Object.keys(rowData).forEach((key) => {\n      schduleData.resMap[key] = {\n        id: rowData[key].id.toString(), // Convert id to a string if needed\n        auditStatus: rowData[key].auditStatus,\n        auditedDt: rowData[key].auditedDt,\n        auditType: rowData[key].auditType ? rowData[key].auditType.toString() : null, // Convert auditType to a string if it's not null\n      };\n    });\n\n    return schduleData;\n  }\n\n  const scheduleDates = () => {\n\n    const formatedSchduleData = convertToSchduleData(rowData);\n    console.log(formatedSchduleData)\n    axios.post(baseUrl+`/governancems/PCQA/scheduled`, formatedSchduleData)\n      .then(res => {\n\n        const responseData = res.data;\n        console.log(\"scheduleDates response\")\n        console.log(responseData)\n        setSchduleData(responseData)\n        pcqaDashboard();\n        setRowChecked(false)\n\n      }).catch(error => console.log(error))\n\n  };\n\n\n\n\n  return (\n    <>\n      <div>\n        <div>\n          <div className=\"col-md-12\">\n            <div className=\"pageTitle\">\n              <div className=\"childOne\"></div>\n              <div className=\"childTwo\">\n                <h2>PCQA Dashboard</h2>\n              </div>\n              <div className=\"childThree\"></div>\n            </div>\n          </div>\n          <div className=\"group mb-3 customCard\">\n            <div className=\"col-md-12 collapseHeader\">\n              <h2>Search Filters</h2>\n              <div className=\"helpBtn\">\n                <GlobalHelp pdfname={HelpPDFName} name={Header} />\n              </div>\n              <div\n                onClick={() => {\n                  setVisible(!visible);\n\n                  visible\n                    ? setCheveronIcon(FaChevronCircleUp)\n                    : setCheveronIcon(FaChevronCircleDown);\n                }}\n              >\n                <span>{cheveronIcon}</span>\n              </div>\n            </div>\n            {/* <h2>PCQA Dashboard</h2> */}\n            <CCollapse visible={!visible}>\n              <div className=\"group-content row\">\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"businessUnit\">\n                      Business Unit\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n\n                    <div className=\"col-6\">\n                      <MultiSelect\n                        id=\"unit\"\n                        options={departments}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        value={selectedDepartments}\n                        disabled={false}\n                        onChange={(s) => {\n                          setSelectedDepartments(s);\n                          let filteredValues = [];\n                          s.forEach((d) => {\n                            filteredValues.push(d.value);\n                          });\n\n                          setSearchdata((prevVal) => ({\n                            ...prevVal,\n                            [\"unit\"]: filteredValues.toString(),\n                          }));\n\n                        }}\n                        valueRenderer={(selected) => {\n                          if (selected.length === 0) {\n                            return \"Select\";\n                          } else {\n                            return `${selected.length} selected`;\n                          }\n                        }}\n\n                      />\n                    </div>\n                  </div>\n                </div>\n\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"projectStage\">\n                      Project Stage\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <MultiSelect\n                        id=\"status\"\n                        options={projectStageOptions}\n                        value={selectedProjectStage}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n\n                        onChange={(selectedOptions) => {\n                          setSelectedProjectStage(selectedOptions);\n                          const allOptionsSelected =\n                            selectedOptions.length === projectStageOptions.length;\n                          const selectedValues = allOptionsSelected ? \"-1\" : selectedOptions.map((option) => option.value).join(', ');\n                          setSearchdata((prev) => ({\n                            ...prev,\n                            prjStageList: selectedValues,\n                          }));\n                        }}\n                        valueRenderer={(selected) => {\n                          if (selected.length === 0) {\n                            return \"Select\";\n                          } else {\n                            return `${selected.length} selected`;\n                          }\n                        }}\n                        disabled={false}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"customer\">\n                      Customer\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <MultiSelect\n                        id=\"account\"\n                        options={coustomOptions}\n                        value={selectedCustomer}\n                        onChange={(s) => {\n                          setSelectedCustomer(s);\n                          setSearchdata((prevVal) => ({\n                            ...prevVal,\n                            [\"account\"]: s.map((option) => option.value).join(\", \"),\n                          }));\n                        }}\n                        labelledBy=\"customer\"\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        valueRenderer={(selected) => {\n                          if (selected.length === 0) {\n                            return \"Select\";\n                          } else {\n                            return `${selected.length} selected`;\n                          }\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"projectName\">\n                      projectName\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"projectName\"\n                        placeholder=\"Enter your name\"\n                        required\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"projectSource\">\n                      Project Source\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <MultiSelect\n                        id=\"roles\"\n                        options={projectSourceOptions}\n                        value={selectedProjectSource}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n                        disabled={false}\n                        onChange={(selectedOptions) => {\n                          setSelectedProjectSource(selectedOptions);\n                          const allOptionsSelected =\n                            selectedOptions.length === projectSourceOptions.length;\n                          const selectedValues = allOptionsSelected ? \"-1\" : selectedOptions.map((option) => option.value).join(', ');\n                          setSearchdata((prev) => ({\n                            ...prev,\n                            prjSource: selectedValues,\n                          }));\n                        }}\n                        valueRenderer={(selected) => {\n                          if (selected.length === 0) {\n                            return \"Select\";\n                          } else {\n                            return `${selected.length} selected`;\n                          }\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"auditType\">\n                      Audit Type\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <select\n                        id=\"auditType\"\n                        onChange={(e) => {\n                          setAuditTypes(e.target.value);\n                          setSearchdata(prev =>\n                          ({\n                            ...prev,\n                            auditType: e.target.value,\n                          }))\n                        }}\n                        value={auditTypes}\n                      >\n                        <option value=\"484\"> &lt;&lt;ALL &gt;&gt;</option>\n                        <option value=\"1285\">CMMI</option>\n                        <option value=\"478\">IQA</option>\n                        <option value=\"1272\">ISMS</option>\n                        <option value=\"1284\">ISO</option>\n                        <option value=\"477\">QCR</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"auditStatus\">\n                      Audit Status\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <MultiSelect\n                        id=\"roles\"\n                        options={auditStatusOptions}\n                        value={selectedAuditStatus}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n                        disabled={false}\n                        //onChange={s=>setSelectedAuditStatus(s)}\n\n                        onChange={(selectedOptions) => {\n                          setSelectedAuditStatus(selectedOptions);\n                          const allOptionsSelected =\n                            selectedOptions.length === auditStatusOptions.length;\n                          const selectedValues = allOptionsSelected ? 486 : selectedOptions.map((option) => option.value).join(', ');\n                          setSearchdata((prev) => ({\n                            ...prev,\n                            auditStatusList: selectedValues,\n                          }));\n                        }}\n\n                        valueRenderer={(selected) => {\n                          if (selected.length === 0) {\n                            return \"Select\";\n                          } else {\n                            return `${selected.length} selected`;\n                          }\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"auditMonth\">\n                      Audit Month\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <DatePicker\n                        selected={startDate}\n                        onChange={(date) => setStartDate(date)}\n                        dateFormat=\"MM/yyyy\"\n                        showMonthYearPicker\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"engagementType\">\n                      Engagement Type\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <MultiSelect\n                        id=\"roles\"\n                        options={engagementOptions}\n                        value={selectedEngagementType}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n                        onChange={(selectedOptions) => {\n                          setSelectedEngagementType(selectedOptions);\n                          const allOptionsSelected =\n                            selectedOptions.length === engagementOptions.length;\n                          const selectedValues = allOptionsSelected ? \"-1\" : selectedOptions.map((option) => option.value).join(', ');\n                          setSearchdata((prev) => ({\n                            ...prev,\n                            engType: selectedValues,\n                          }));\n                        }}\n                        valueRenderer={(selected) => {\n                          if (selected.length === 0) {\n                            return \"Select\";\n                          } else {\n                            return `${selected.length} selected`;\n                          }\n                        }}\n                        disabled={false}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"contractTerms\">\n                      Contract Terms\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <MultiSelect\n                        id=\"roles\"\n                        options={contractOptions}\n                        value={selectedContractTerms}\n                        hasSelectAll={true}\n                        isLoading={false}\n                        shouldToggleOnHover={false}\n                        disableSearch={false}\n                        onChange={(selectedOptions) => {\n                          setSelectedContractTerms(selectedOptions);\n                          const allOptionsSelected =\n                            selectedOptions.length === contractOptions.length;\n                          const selectedValues = allOptionsSelected ? \"-1\" : selectedOptions.map((option) => option.value).join(', ');\n                          setSearchdata((prev) => ({\n                            ...prev,\n                            contractModel: selectedValues,\n                          }));\n                        }}\n                        valueRenderer={(selected) => {\n                          if (selected.length === 0) {\n                            return \"Select\";\n                          } else {\n                            return `${selected.length} selected`;\n                          }\n                        }}\n                        disabled={false}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"currentAllocation\">\n                      Current Allocation\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6\">\n                      <select\n                        id=\"curAlloc\"\n                        onChange={(e) => {\n                          const { value, id } = e.target;\n                          const selectedValue = value === \"null\" ? -1 : value;\n                          setCurrentAllocation(selectedValue);\n                          setSearchdata(prev =>\n                          ({\n                            ...prev,\n                            curAlloc: selectedValue,\n                          }))\n                        }}\n                        value={searchdata.curAlloc}\n                      >\n                        <option value=\"null\">&lt;&lt;ALL&gt;&gt;</option>\n                        <option value=\"1\" selected=\"selected\">\n                          Active\n                        </option>\n                        <option value=\"2\">InActive</option>\n                        <option value=\"3\">No Allocation</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-3 mb-2\">\n                  <div className=\"form-group row\">\n                    <label className=\"col-5\" htmlFor=\"facilitator\">\n                      facilitator\n                    </label>\n                    <span className=\"col-1 p-0\">:</span>\n                    <div className=\"col-6 autoComplete-container\">\n                      <ReactSearchAutocomplete\n                        className=\"AutoComplete\"\n                        items={resource}\n                        type=\"Text\"\n                        name=\"AeId\"\n                        id=\"AeId\"\n                        disabled\n                        fuseOptions={{ keys: [\"id\", \"name\"] }}\n                        resultStringKeyName=\"name\"\n                        resource={resource}\n                        placeholder=\"Type minimum 3 characters\"\n                        resourceFnc={resourceFnc}\n                        onSelect={(e) => {\n                          // // setFormData((prevProps) => ({\n                          // //   ...prevProps,\n                          // //   AeId: e.id,\n                          // }));\n                          setSearchdata((prevVal) => ({\n                            ...prevVal,\n                            [\"facilitator\"]: e.id,\n                          }));\n                        }}\n                        onClear={handleClearAe}\n                        showIcon={false}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-3 mb-2\">\n                  <button className=\"btn btn-primary \" onClick={pcqaDashboard}>Search</button>\n                </div>\n\n              </div>\n            </CCollapse>\n          </div>\n        </div>\n        <div>\n        </div>\n        <div className=\"group customCard\">\n          <div className=\"group-content row\">\n            <div className=\"col-md-12\">\n              <MaterialReactTable \n              className=\"materialReactExpandableTable\"\n               columns={columnData} \n               data={tableData}\n\n               enableExpandAll={false} //hide expand all double arrow in column header\n               enableExpanding={false}\n               enableRowVirtualization\n               enableFullScreenToggle={false}\n               enableDensityToggle={false}\n               enableHiding={false}\n               enableGlobalFilter={true}\n               enableTopToolbar={true}\n               enableColumnActions={false}\n               enablePinning={false}\n               enableColumnFilters={false}\n               enableSorting={false}\n               // enableGrouping\n               filterFromLeafRows \n                // enableRowSelection\n\n                enableSelectAll={false}\n              />\n            </div>\n\n            <div className=\"btn-container center my-3 mb-2\">\n              <button\n                type=\"button\"\n                className=\"btn\"\n                style={{\n                  width: \"80px\",\n                  fontWeight: \"bold\",\n                  backgroundColor: \"#428bca\",\n                  color: \"white\",\n                }}\n                onClick={scheduleDates}\n              >\n                <FaSave />\n                Save{\" \"}\n              </button>\n\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default PCQA;\n"],"names":["useState","Date","startDate","setStartDate","visible","setVisible","FaChevronCircleUp","cheveronIcon","setCheveronIcon","departments","setDepartments","selectedDepartments","setSelectedDepartments","baseUrl","environment","loggedUserId","localStorage","getItem","selectedProjectStage","setSelectedProjectStage","coustomOptions","setCoustomOptions","contractOptions","setContractOptions","auditTypes","setAuditTypes","tableData","setTableData","selectedAuditStatus","setSelectedAuditStatus","rowData","setRowData","rowCompletedData","setRowCompletedData","setFiles","console","log","schduleData","setSchduleData","resource","setResource","projectSourceOptions","label","value","resourceFnc","axios","method","url","then","res","manger","data","selectedProjectSource","setSelectedProjectSource","useEffect","getAccounts","pcqaDashboard","getDepartments","enguagementTypeFnc","getcontractTerms","auditStatusOptions","getColumns","Header","accessorKey","size","Cell","row","auditVal","original","id","auditType","statusVal","auditStatus","shouldCheckCheckbox","undefined","rowChecked","setRowChecked","type","checked","onChange","columns","className","style","color","to","title","projectName","href","target","rel","Result","documentId","onClick","downloadEmployeeData","opacity","disabled","liveAuditType","selectedAudit","setSelectedAudit","e","prev","updatedRowData","status","dumm","selectedStatus","setSelectedStatus","showCompletedPopUp","setCompletedPopUp","handleClose","show","setShow","handleQcrClose","handleQcrShow","handleCompletedChange","event","projectId","name","Modal","onHide","closeButton","scope","onKeyDown","key","test","preventDefault","major","minor","medium","ReactSearchAutocomplete","items","fuseOptions","keys","resultStringKeyName","placeholder","onSelect","auditorName","onClear","handleClearAe","showIcon","selectedFile","files","Button","class","percentage","initialVal","liveAuditedDate","defaultDate","rowStartDate","setRowStartDate","selected","date","today","moment","format","auditedDt","dateFormat","columnData","useMemo","initialValue","userId","unit","account","projects","facilitator","prjStageList","prjSource","auditStatusList","fromDt","isSubmit","engType","contractModel","curAlloc","searchdata","setSearchdata","resp","filter","ele","filteredDeptData","forEach","push","requestBody","units","map","item","toString","i","responseData","Array","isArray","formattedData","setSelectedCustomer","filteredValues","d","prevVal","error","catch","link","document","createElement","click","pcqa","projectStageOptions","selectedCustomer","engagementOptions","setEngagementOptions","selectedEngagementType","setSelectedEngagementType","selectedContractTerms","setSelectedContractTerms","engmentType","length","engmentObj","lkup_name","Response","terms","termsObj","GlobalHelp","pdfname","FaChevronCircleDown","htmlFor","options","hasSelectAll","isLoading","shouldToggleOnHover","s","valueRenderer","disableSearch","selectedOptions","selectedValues","option","join","labelledBy","required","showMonthYearPicker","selectedValue","setCurrentAllocation","enableExpandAll","enableExpanding","enableRowVirtualization","enableFullScreenToggle","enableDensityToggle","enableHiding","enableGlobalFilter","enableTopToolbar","enableColumnActions","enablePinning","enableColumnFilters","enableSorting","filterFromLeafRows","enableSelectAll","width","fontWeight","backgroundColor","formatedSchduleData","resMap","Object","convertToSchduleData"],"sourceRoot":""}