{"version":3,"file":"static/js/618.0610c2f7.chunk.js","mappings":"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","sources":["views/Administration/RoleCostRoleView.js","views/Administration/RoleCosts.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport MaterialReactTable from \"material-react-table\";\nimport { Button, IconButton } from \"@mui/material\";\nimport { AiFillRightCircle, AiOutlineInfoCircle } from \"react-icons/ai\";\nimport { Link } from \"react-router-dom\";\nimport { environment } from \"../../environments/environment\";\nimport axios from \"axios\";\nimport { AiOutlineLeftSquare, AiOutlineRightSquare } from \"react-icons/ai\";\nimport moment from \"moment\";\nimport Loader from \"../Loader/Loader\";\n\nexport default function RoleCostView(props) {\n  const { formData } = props;\n  const [nodes, setNodes] = useState([]);\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const [columns, setColumns] = useState(null);\n  const [hiddenColumns, setHiddenColumns] = useState({});\n  const [headers, setHeaders] = useState([]);\n  const [data, setData] = useState({});\n  const [details, setDetails] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, [data]);\n\n  console.log(data + \".......data\");\n\n  const baseUrl = environment.baseUrl;\n\n  const getPageviewcountdetails = (dt) => {\n    // setLoader(true);\n    axios({\n      method: \"post\",\n      url: baseUrl + `/administrationms/roleCosts/getviewDetails`,\n\n      data: {\n        Country: formData.country,\n        Bu: formData.resBusinessUnit,\n        loggedUser: loggedUserId,\n        RoleTypeId: 0,\n        history: false,\n      },\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n      .then((res) => {\n        console.log(res + \"in line 224............\");\n        let detail = res.data.tableData;\n        console.log(detail);\n        let fdata = res.data;\n        console.log(res.data + \"in line 228.................\");\n        console.log(fdata + \".......fdata\");\n        let columnsArray = fdata.columns.split(\",\");\n        console.log(columnsArray + \".......columnsArray\");\n\n        // const columnIndexToRemove = columnsArray.indexOf(\"user_id\");\n        // console.log(columnIndexToRemove + \"..............columnIndexToRemove\");\n        // if (columnIndexToRemove !== -1) {\n        //   columnsArray.splice(columnIndexToRemove, 1);\n        // }\n        fdata.columns = columnsArray.join(\",\");\n        console.log(fdata.columns + \"........... fdataColumns\");\n\n        // fdata.tableData.forEach((rowData) => {\n        //   for (const key in rowData) {\n        //     if (rowData[key] === null) {\n        //       rowData[key] = 0;\n        //     }\n        //   }\n        // });\n        setDetails(detail);\n        console.log(detail);\n        setData(fdata);\n        console.log(data);\n        // setIsShow(true);\n        // setLoader(false);\n      })\n      .then((error) => {\n        console.log(error);\n      });\n  };\n\n  console.log(data);\n  useEffect(() => {\n    getPageviewcountdetails();\n  }, []);\n\n  useEffect(() => {\n    defineColumns();\n  }, [data]);\n\n  const defineColumns = () => {\n    let newColumns = [];\n    const headersArray = data?.columns?.replaceAll(\"'\", \"\").split(\",\");\n    const headers = [];\n    const subHeaders = [];\n    headersArray?.forEach((column, index) => {\n      if (column.includes(\"_\") && !column.includes(\"role\")) {\n        const filterHeadSubHead = column.split(\"_\");\n        filterHeadSubHead.forEach((e, index) => {\n          if (index == filterHeadSubHead.length - 1)\n            !subHeaders.includes(e) ? subHeaders.push(e) : \"\";\n          else headers;\n        });\n      } else {\n      }\n      newColumns.push(newColumn);\n    });\n\n    setColumns(newColumns);\n  };\n\n  const getData = () => {\n    let tableData = data.tableData;\n\n    console.log(tableData + \"...........tableData\");\n    let columns = null;\n    if (data?.columns?.includes(\"'\")) {\n      columns = data?.columns?.replaceAll(\"'\", \"\");\n    } else {\n      columns = data?.columns;\n    }\n    let colArr = columns?.split(\",\");\n    let newHeaders = [];\n    let hiddenHeaders = [];\n    const obj = {};\n    console.log(colArr);\n    for (let i = 0; i < colArr?.length; i++) {\n      let colVal = colArr[i].trim();\n\n      let firstData = tableData;\n      obj[colVal] = firstData[colVal];\n    }\n    console.log(obj);\n    let headerArray = Object.entries(obj);\n    console.log(headerArray);\n    let filteredHeaders = headerArray;\n\n    setHeaders(filteredHeaders);\n\n    filteredHeaders.map(([key, value], index) => {\n      console.log(key + \"..............key\");\n      console.log(value + \"va;ue\");\n      newHeaders.push({\n        accessorKey: key,\n\n        header: key,\n        enableColumnActions: false,\n        enableHiding: true,\n        Header: ({ column }) => <div>{key}</div>,\n        Cell: ({ cell }) => {\n          console.log(cell);\n          return <div title={cell.getValue()}>{cell.getValue()}</div>;\n        },\n      });\n    });\n\n    // Use the dynamically generated columns in the MaterialReactTable component\n    // <MaterialReactTable columns={dynamicColumns} data={nodes} /* other props */ />\n\n    console.log(newHeaders);\n    // setColumns(newHeaders);\n    let values = [];\n    let minusOneRow = [];\n    if (tableData && tableData.length > 0) {\n      tableData.forEach((d) => {\n        if (d && d.role_type_id && d.role_type_id.length > 0) {\n          values.push(d);\n        } else {\n          minusOneRow.push(d);\n        }\n      });\n    } else {\n    }\n    let tempData = jsonToTree(values);\n    let finalData = [...tempData];\n    setNodes(finalData);\n  };\n  // useEffect(() => {\n  //   colExpFlag ? setHiddenColumns({}) : colCollapse();\n  // }, [colExpFlag]);\n\n  // const colCollapse = () => {\n  //   setHiddenColumns(Object.assign({}, ...hiddenHeaders));\n  // };\n  const jsonToTree = (flatArray, options) => {\n    options = {\n      ...options,\n    };\n    const dictionary = {}; // a hash table mapping to the specific array objects with their ids as key\n    const tree = [];\n    const children = options.children;\n    flatArray.forEach((node) => {\n      const nodeId = node[options.Resource];\n      const nodeParentId = node[options.Supervisor];\n      // set up current node data in dictionary\n      dictionary[nodeId] = {\n        [children]: [], // init a children property\n        ...node, // add other propertys\n        ...dictionary[nodeId], // children will be replaced if this node already has children property which was set below\n      };\n      dictionary[nodeParentId] = dictionary[nodeParentId] || { [children]: [] }; // if it's not exist in dictionary, init an object with children property\n      dictionary[nodeParentId][children].push(dictionary[nodeId]); // add reference to current node object in parent node object\n    });\n    Object.values(dictionary).forEach((obj) => {\n      if (typeof obj[options.Resource] === \"undefined\") {\n        tree.push(...obj[children]);\n      }\n    });\n    return tree;\n  };\n\n  console.log(nodes);\n  console.log(columns);\n  const generateColumns = (data) => {\n    const columns = Object.keys(data).map((key) => ({\n      accessorKey: key,\n      header: key, // You can use the key as the column header\n      // Add other column properties as needed\n    }));\n    return columns;\n  };\n\n  // Call the generateColumns function with your data\n  console.log(columns);\n  const dynamicColumns = generateColumns(data);\n  console.log(dynamicColumns);\n  return (\n    <>\n      <div className=\"\" style={{ marginTop: \"20px\" }}>\n        {columns && nodes ? (\n          <MaterialReactTable\n            columns={columns}\n            data={nodes}\n            enableExpandAll={true}\n            enableExpanding={false}\n            enablePagination={false}\n            enableBottomToolbar={false}\n            enableTopToolbar={false}\n            enableColumnActions={false}\n            enableSorting={false}\n            filterFromLeafRows\n            enablePinning\n            initialState={{\n              expanded: false,\n              density: \"compact\",\n              columnVisibility: { ...hiddenColumns },\n              columnPinning: { right: [\"total\"], left: [\"name\"] },\n            }}\n            state={{ columnVisibility: { ...hiddenColumns } }}\n            paginateExpandedRows={false}\n            defaultColumn={{ minSize: 40, maxSize: 1000, size: 150 }}\n            muiTableContainerProps={{\n              sx: { maxHeight: \"50vh\", width: \"auto\", maxWidth: \"fit-content\" },\n            }}\n            muiTableBodyProps={{\n              sx: {\n                \"&\": {},\n                \"& td\": {\n                  borderRight: \"1px solid #ccc\",\n                  height: \"22px\",\n                  fontSize: \"11px\",\n                  paddingTop: \"0px\",\n                  paddingBottom: \"0px\",\n                },\n              },\n            }}\n            muiTableHeadProps={{\n              sx: {\n                \"& th\": {\n                  borderTop: \"1px solid #ccc\",\n                  borderRight: \"1px solid #ccc\",\n                  background: \"#f4f4f4 \",\n                  fontSize: \"11px\",\n                  padding: \"0px 8px\",\n                },\n              },\n            }}\n          />\n        ) : (\n          // Handle the case when nodes or columns are undefined\n          <p>Data is not available.</p>\n        )}\n      </div>\n    </>\n  );\n}\n","import { React, useEffect, useState, useRef } from \"react\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { Column } from \"primereact/column\";\nimport { environment } from \"../../environments/environment\";\nimport axios from \"axios\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport { DataTable } from \"primereact/datatable\";\nimport { InputText } from \"primereact/inputtext\";\nimport { ColumnGroup } from \"primereact/columngroup\";\nimport { FilterMatchMode, FilterOperator } from \"primereact/api\";\nimport { Row } from \"primereact/row\";\nimport RoleCostView from \"./RoleCostRoleView\";\nimport {\n  FaChevronCircleDown,\n  FaChevronCircleUp,\n  FaSearch,\n  FaCaretDown,\n} from \"react-icons/fa\";\nimport { CCollapse } from \"@coreui/react\";\n\nfunction RoleCosts() {\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [visible, setVisible] = useState(false);\n  const [country, setCountry] = useState([]);\n  const [business, setBusiness] = useState([]);\n  const [selectedBusiness, setSelectedBusiness] = useState([]);\n  const [resvalue, setResValue] = useState([{}]);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [searching, setSearching] = useState(false);\n  const baseUrl = environment.baseUrl;\n  console.log(business?.length);\n  var d = new Date();\n  var year = d.getFullYear();\n  var month1 = d.getMonth();\n  var day = d.getDate();\n  var max = new Date(year, month1);\n  var month = 0; // 0 represents January\n  var day1 = 1; // 1 represents the first day of the month\n  var min = new Date(year, month1, day1);\n  var mindate = new Date(year, month, day1);\n  console.log(moment(min).format(\"YYYY-MM-DD\"));\n  const initialValue = {\n    resBusinessUnit: \"170,211,123,82,168,207,212,18,213,49,149,208,243\",\n    action: \"view\",\n    country: \"3\",\n    month: moment(min).format(\"YYYY-MM-DD\"),\n    countryName: \"India\",\n  };\n  console.log(moment(min).format(\"YYYY-MM-DD\"));\n  const [formData, setFormData] = useState(initialValue);\n  const [selectedCountryName, setSelectedCountryName] = useState(\"\");\n  const [details, setDetails] = useState({});\n  const [data, setData] = useState({});\n\n  const [filters, setFilters] = useState({\n    global: { value: null, matchMode: FilterMatchMode.CONTAINS },\n    name: {\n      operator: FilterOperator.AND,\n      constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }],\n    },\n    \"country.name\": {\n      operator: FilterOperator.AND,\n      constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }],\n    },\n    representative: { value: null, matchMode: FilterMatchMode.IN },\n    status: {\n      operator: FilterOperator.OR,\n      constraints: [{ value: null, matchMode: FilterMatchMode.EQUALS }],\n    },\n  });\n  // http://10.11.12.149:8090/administrationms/roleCosts/getResource?Country=3&Bu=170,211,123,82,168,207,212,18,213,49,149,208,243&monthStartDate=2023-09-01\n\n  const getResourceView = () => {\n    axios({\n      url:\n        baseUrl +\n        `/administrationms/roleCosts/getResource?Country=${formData?.country}&Bu=${formData?.resBusinessUnit}&monthStartDate=${formData?.month}`,\n    }).then((resp) => {\n      setResValue(resp.data);\n    });\n  };\n  console.log(resvalue);\n  const handleClick = () => {\n    getPageviewcountdetails();\n    setSearching(true);\n    if (formData.action == \"resview\") {\n      getResourceView();\n    }\n  };\n  const getBusinessUnit = async () => {\n    const resp = await axios({\n      url: baseUrl + `/CostMS/cost/getDepartments`,\n    });\n\n    let departments = resp.data;\n    departments.push({ value: 0, label: \"Non-Revenue Units\" });\n    setBusiness(departments);\n    setSelectedBusiness(departments.filter((ele) => ele.value != 0));\n    let filteredDeptData = [];\n    departments?.forEach((data) => {\n      if (data.value != 0) {\n        filteredDeptData.push(data.value);\n      }\n    });\n  };\n  const getCountries = () => {\n    axios({\n      url: baseUrl + `/revenuemetricsms/headCountAndTrend/getCountries`,\n    }).then((resp) => {\n      setCountry(resp.data);\n    });\n  };\n  useEffect(() => {\n    getCountries();\n    getBusinessUnit();\n    getResourceView();\n  }, []);\n  const ArrowRenderer = ({ expanded }) => (\n    <>\n      {expanded ? (\n        <FaCaretDown className=\"chevronIcon\" />\n      ) : (\n        <FaCaretDown className=\"chevronIcon\" />\n      )}\n    </>\n  );\n  const generateDropdownLabel = (selectedOptions, allOptions) => {\n    const selectedValues = selectedOptions.map((option) => option.value);\n    const allValues = allOptions.map((item) => item.value);\n\n    if (selectedValues.length === allValues.length) {\n      return \"<< ALL >>\";\n    } else {\n      return selectedOptions.map((option) => option.label).join(\", \");\n    }\n  };\n\n  const isColumnVisible = (columnName) => {\n    console.log(columnName + \"..............columnName\");\n    // Check if the data for the specified column is present in resvalue\n    // You can use your own condition here based on your data structure\n    console.log(resvalue);\n\n    if (resvalue && resvalue.length > 0) {\n      return resvalue.some((item) => item[columnName] != null);\n    }\n\n    return false;\n  };\n\n  const headerGroup = (\n    <ColumnGroup>\n      <Row>\n        {<Column header=\"Verif. Health\" rowSpan={2} />}\n        <Column header=\"Resource Name\" rowSpan={2} />\n        <Column header=\"Department\" rowSpan={2} />\n        <Column header=\"Role Type\" rowSpan={2} />\n        <Column header=\"Designation\" rowSpan={2} />\n        <Column header=\"Cadre\" rowSpan={2} />\n        <Column header=\"Bill Rate\" rowSpan={2} />\n\n        <Column header=\"Cost\" colSpan={5} style={{ textAlign: \"center\" }} />\n        <Column header=\"Verified Date\" rowSpan={2} />\n      </Row>\n\n      <Row>\n        <Column header=\"Avg Cost/Hr\" field=\"projectName\" title=\"projectName\" />\n        <Column header=\"CompletedCost\" field=\"prjStartDate\" />\n        <Column header=\"Start Month\" field=\"customer\" />\n        <Column header=\"End Month\" field=\"prjStatus\" />\n        <Column header=\"Verified By\" field=\"reviewType\" />\n      </Row>\n    </ColumnGroup>\n  );\n  const onGlobalFilterChange = (event) => {\n    const value = event.target.value;\n    let _filters = { ...filters };\n\n    _filters[\"global\"].value = value;\n\n    setFilters(_filters);\n  };\n  const renderHeader = () => {\n    const value = filters[\"global\"] ? filters[\"global\"].value : \"\";\n\n    return (\n      <>\n        {\" \"}\n        <div className=\"flex  flex-row-reverse\">\n          <span className=\"p-input-icon-left\">\n            <i className=\"pi pi-search\" />\n            <InputText\n              type=\"search\"\n              style={{ float: \"right\" }}\n              value={value || \"\"}\n              onChange={(e) => onGlobalFilterChange(e)}\n              placeholder=\"Global Search\"\n            />\n          </span>\n        </div>\n      </>\n    );\n  };\n  console.log(selectedCustomer);\n  const header = renderHeader();\n  const loggedUserId = localStorage.getItem(\"resId\");\n\n  const getPageviewcountdetails = (dt) => {\n    // setLoader(true);\n    axios({\n      method: \"post\",\n      url: baseUrl + `/administrationms/roleCosts/getviewDetails`,\n\n      data: {\n        Country: formData.country,\n        Bu: formData.resBusinessUnit,\n        loggedUser: loggedUserId,\n        RoleTypeId: 0,\n        history: false,\n      },\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n      .then((res) => {\n        console.log(res + \"in line 224............\");\n        let detail = res.data.tableData;\n        console.log(detail);\n        let fdata = res.data;\n        console.log(res.data + \"in line 228.................\");\n        console.log(fdata + \".......fdata\");\n        let columnsArray = fdata.columns.split(\",\");\n        console.log(columnsArray + \".......columnsArray\");\n        // const columnIndexToRemove = columnsArray.indexOf(\"user_id\");\n        // console.log(columnIndexToRemove + \"..............columnIndexToRemove\");\n        // if (columnIndexToRemove !== -1) {\n        //   columnsArray.splice(columnIndexToRemove, 1);\n        // }\n        fdata.columns = columnsArray.join(\",\");\n        console.log(fdata.columns + \"........... fdataColumns\");\n\n        fdata.tableData.forEach((rowData) => {\n          for (const key in rowData) {\n            if (rowData[key] === null) {\n              rowData[key] = 0;\n            }\n          }\n        });\n        setDetails(detail);\n        console.log(detail);\n        setData(fdata);\n        console.log(data);\n        // setIsShow(true);\n        // setLoader(false);\n      })\n      .then((error) => {\n        console.log(error);\n      });\n  };\n  console.log(data);\n  useEffect(() => {\n    getPageviewcountdetails();\n  }, []);\n\n  const LinkTemplate = (data) => {\n    console.log(data);\n    let legendElement = null;\n\n    if (data.Cost == null && data.ComptedCost == null) {\n      legendElement = (\n        <div className=\"legendContainer align center\">\n          <div className=\"legend black\">\n            <div className=\"legendCircle\" title=\"Old Cost\">\n              <div className=\"legendTxt\"></div>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      legendElement = (\n        <div className=\"legendContainer align center\">\n          <div className=\"legend red\">\n            <div className=\"legendCircle\" title=\"Unverified\">\n              {/* <div className=\"legendCircle\" align=\"center\"></div> */}\n              <div className=\"legendTxt\"></div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return <div className=\"ellipsis\">{legendElement}</div>;\n  };\n  console.log(resvalue?.endDate);\n  const endDateValues = resvalue.map((item) => item.endDate);\n  const areAllEndDatesNull = endDateValues.every((endDate) => endDate === null);\n\n  console.log(endDateValues.length);\n  console.log(endDateValues == null ? true : false);\n\n  const verifiedDatebosy = (data) => {\n    console.log(data);\n    // const isColumnVisible1 = (data) => {\n    // console.log(columnName);\n    // Check if the data for the specified column is present in the data array\n    // You can use your own condition here based on your data structure\n    console.log(resvalue?.some((item) => item[data.verifiedDate] != null));\n    return resvalue?.some((item) => item[data.verifiedDate] != null);\n    // };\n  };\n\n  return (\n    <div className=\"group mb-5 customCard\">\n      <div className=\"col-md-12 collapseHeader\">\n        <h2>Search Filters</h2>\n\n        <div\n          onClick={() => {\n            setVisible(!visible);\n            visible\n              ? setCheveronIcon(FaChevronCircleUp)\n              : setCheveronIcon(FaChevronCircleDown);\n          }}\n        >\n          <span>{cheveronIcon}</span>\n        </div>\n      </div>\n      <CCollapse visible={!visible} setVisible=\"false\">\n        <div className=\"group-content row\">\n          <div className=\" col-md-3 mb-2\">\n            <div className=\"form-group row\">\n              <label className=\"col-5\" htmlFor=\"resType\">\n                Action&nbsp;<span className=\"error-text\">*</span>\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n              <div className=\"col-6\">\n                <select\n                  id=\"action\"\n                  onChange={(e) => {\n                    setSearching(false);\n                    setFormData((prevVal) => ({\n                      ...prevVal,\n                      [\"action\"]: e.target.value,\n                    }));\n                  }}\n                >\n                  <option value=\"view\">{\"Role-View\"}</option>\n                  <option value=\"resview\">{\"Resource-View\"}</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-3 mb-2\">\n            <div class=\"form-group row\">\n              <label class=\"col-5\" for=\"BuIds\">\n                Res.Location <span style={{ color: \"red\" }}>*</span>\n              </label>\n              <span class=\"col-1 p-0\">:</span>\n              <div class=\"col-6\">\n                {\" \"}\n                {/* <select\n                  id=\"country\"\n                  onChange={(e) => {\n                    setFormData((prevVal) => ({\n                      ...prevVal,\n                      [\"country\"]: e.target.value,\n                    }));\n                  }}\n                  style={{ width: \"100%\" }}\n                >\n                  {country.map((data) => (\n                    <option\n                      key={data.id}\n                      value={data.id}\n                      selected={data.countryName == \"India\" ? true : false}\n                    >\n                      {data.countryName}\n                    </option>\n                  ))}\n                </select> */}\n                <select\n                  id=\"country\"\n                  onChange={(e) => {\n                    const selectedCountryName =\n                      e.target.options[e.target.selectedIndex].text;\n                    console.log(\"Selected Country Name:\", selectedCountryName);\n\n                    setFormData((prevVal) => ({\n                      ...prevVal,\n                      [\"country\"]: e.target.value,\n                      [\"countryName\"]: selectedCountryName,\n                    }));\n                  }}\n                  style={{ width: \"100%\" }}\n                >\n                  {country.map((data) => (\n                    <option\n                      key={data.id}\n                      value={data.id}\n                      selected={data.countryName === \"India\"}\n                    >\n                      {data.countryName}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n          <div className=\" col-md-3 mb-2\">\n            <div className=\"form-group row\">\n              <label className=\"col-5\" htmlFor=\"resBusinessUnit\">\n                Business Unit&nbsp;<span className=\"error-text\">*</span>\n              </label>\n              <span className=\"col-1 p-0\">:</span>\n              <div\n                className=\"col-6 multiselect\"\n                // ref={(ele) => {\n                //   ref.current[1] = ele;\n                // }}\n              >\n                <MultiSelect\n                  id=\"resBusinessUnit\"\n                  ArrowRenderer={ArrowRenderer}\n                  options={business}\n                  hasSelectAll={true}\n                  // isLoading={false}\n                  // shouldToggleOnHover={false}\n                  disableSearch={false}\n                  value={selectedBusiness}\n                  valueRenderer={generateDropdownLabel}\n                  disabled={false}\n                  onChange={(s) => {\n                    setSelectedBusiness(s);\n                    let filteredValues = [];\n                    s?.forEach((d) => {\n                      filteredValues.push(d.value);\n                    });\n\n                    setFormData((prevVal) => ({\n                      ...prevVal,\n                      [\"resBusinessUnit\"]: filteredValues.toString(),\n                    }));\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n          {formData.action == \"resview\" && (\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\">\n                  Month&nbsp;<span className=\"error-text\"> *</span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <div\n                    className=\"datepicker\"\n                    // ref={(ele) => {\n                    //   ref.current[0] = ele;\n                    // }}\n                  >\n                    <DatePicker\n                      name=\"month\"\n                      id=\"month\"\n                      selected={max}\n                      maxDate={max}\n                      minDate={mindate}\n                      onChange={(e) => {\n                        setFormData((prev) => ({\n                          ...prev,\n                          [\"month\"]: moment(e).format(\"yyyy-MM-DD\"),\n                        }));\n                      }}\n                      dateFormat=\"MMM-yyyy\"\n                      showMonthYearPicker\n                      placeholderText=\"Start Month\"\n                      onKeyDown={(e) => {\n                        e.preventDefault();\n                      }}\n                      autoComplete=\"off\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"col-md-12 col-sm-12 col-xs-12  btn-container center my-0\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              title=\"Search\"\n              onClick={() => handleClick()}\n            >\n              <FaSearch />\n              Search{\" \"}\n            </button>\n          </div>\n        </div>\n      </CCollapse>\n      {searching == true && formData.action == \"resview\" ? (\n        <>\n          <div>\n            <h2 className=\" col-md-12 mt-4 align center\">\n              Role Costs for {formData.countryName}\n            </h2>\n          </div>\n          <div className=\"darkHeader\">\n            <DataTable\n              paginatorTemplate=\"RowsPerPageDropdown FirstPageLink PrevPageLink CurrentPageReport NextPageLink LastPageLink\"\n              currentPageReportTemplate=\"{first} to {last} of {totalRecords}\"\n              rowsPerPageOptions={[10, 25, 50]}\n              className=\"primeReactDataTable invoicingSearchTable   customerEngament\"\n              value={resvalue}\n              paginator\n              rows={10}\n              header={header}\n              filters={filters}\n              onFilter={(e) => setFilters(e.filters)}\n              selection={selectedCustomer}\n              onSelectionChange={(e) => setSelectedCustomer(e.value)}\n              selectionMode=\"single\"\n              dataKey=\"id\"\n              showGridlines\n              stateStorage=\"session\"\n              stateKey=\"dt-state-demo-local\"\n              emptyMessage=\"No Records To View.\"\n              tableStyle={{ minWidth: \"50rem\" }}\n              // tableStyle={{ minWidth: \"auto\", width: \"auto\" }}\n              headerColumnGroup={headerGroup}\n            >\n              <Column\n                field=\"product\"\n                body={LinkTemplate}\n                style={{ width: \"50rem\" }}\n              />\n              {/* // <Column field=\"product\" style={{ width: \"50rem\" }} /> */}\n\n              <Column field=\"Resource Name\" />\n              <Column field=\"Department\" />\n              <Column field=\"Role Type\" />\n              <Column field=\"Designation\" />\n              <Column field=\"Cadre\" />\n              <Column field=\"Bill Rate\" />\n              <Column field=\"Cost\" />\n              <Column field=\"ComptedCost\" />\n              <Column field=\"startDate\" />\n              <Column field=\"endDate\" />\n              <Column field=\"Verified By\" />\n\n              <Column\n                field=\"verifiedDate\"\n                // body={verifiedDatebosy}\n                visible={resvalue?.some((item) => item?.verifiedDate !== null)}\n              />\n            </DataTable>\n          </div>\n        </>\n      ) : (\n        \"\"\n      )}\n      {searching == true && formData.action == \"view\" && (\n        <div>\n          <RoleCostView data={data} formData={formData} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RoleCosts;\n"],"names":["RoleCostView","props","formData","useState","nodes","setNodes","loggedUserId","localStorage","getItem","columns","setColumns","hiddenColumns","setHeaders","data","setData","setDetails","useEffect","getData","console","log","baseUrl","environment","axios","method","url","Country","country","Bu","resBusinessUnit","loggedUser","RoleTypeId","history","headers","then","res","detail","tableData","fdata","columnsArray","split","join","error","defineColumns","newColumns","headersArray","replaceAll","subHeaders","forEach","column","index","includes","filterHeadSubHead","e","length","push","newColumn","colArr","newHeaders","obj","i","colVal","trim","firstData","headerArray","Object","entries","filteredHeaders","map","key","value","accessorKey","header","enableColumnActions","enableHiding","Header","Cell","cell","title","getValue","values","minusOneRow","d","role_type_id","tempData","jsonToTree","finalData","flatArray","options","dictionary","tree","children","node","nodeId","Resource","nodeParentId","Supervisor","dynamicColumns","keys","generateColumns","className","style","marginTop","enableExpandAll","enableExpanding","enablePagination","enableBottomToolbar","enableTopToolbar","enableSorting","filterFromLeafRows","enablePinning","initialState","expanded","density","columnVisibility","columnPinning","right","left","state","paginateExpandedRows","defaultColumn","minSize","maxSize","size","muiTableContainerProps","sx","maxHeight","width","maxWidth","muiTableBodyProps","borderRight","height","fontSize","paddingTop","paddingBottom","muiTableHeadProps","borderTop","background","padding","FaChevronCircleUp","cheveronIcon","setCheveronIcon","visible","setVisible","setCountry","business","setBusiness","selectedBusiness","setSelectedBusiness","resvalue","setResValue","selectedCustomer","setSelectedCustomer","searching","setSearching","Date","year","getFullYear","month1","getMonth","max","getDate","min","mindate","moment","format","initialValue","action","month","countryName","setFormData","global","matchMode","FilterMatchMode","name","operator","FilterOperator","constraints","representative","status","filters","setFilters","getResourceView","resp","getBusinessUnit","departments","label","filter","ele","filteredDeptData","headerGroup","rowSpan","colSpan","textAlign","field","type","float","onChange","event","target","_filters","onGlobalFilterChange","placeholder","renderHeader","getPageviewcountdetails","dt","rowData","endDate","endDateValues","item","every","onClick","FaChevronCircleDown","htmlFor","id","prevVal","class","for","color","selectedCountryName","selectedIndex","text","selected","ArrowRenderer","hasSelectAll","disableSearch","valueRenderer","selectedOptions","allOptions","selectedValues","option","allValues","disabled","s","filteredValues","toString","maxDate","minDate","prev","dateFormat","showMonthYearPicker","placeholderText","onKeyDown","preventDefault","autoComplete","paginatorTemplate","currentPageReportTemplate","rowsPerPageOptions","paginator","rows","onFilter","selection","onSelectionChange","selectionMode","dataKey","showGridlines","stateStorage","stateKey","emptyMessage","tableStyle","minWidth","headerColumnGroup","body","legendElement","Cost","ComptedCost","some","verifiedDate"],"sourceRoot":""}