{"version":3,"file":"static/js/367.abbde8ab.chunk.js","mappings":"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","sources":["views/TimeAndExpenses/T&MOpen.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  FaChevronCircleDown,\n  FaChevronCircleUp,\n  FaSearch,\n  FaCheck,\n  FaChevronCircleRight,\n  FaChevronCircleLeft,\n  FaSave,\n  FaCaretDown,\n} from \"react-icons/fa\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { CCollapse } from \"@coreui/react\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\nimport MaterialReactTable from \"material-react-table\";\nimport { Box, IconButton } from \"@mui/material\";\n\nimport { AiFillLeftCircle, AiFillRightCircle } from \"react-icons/ai\";\nimport { Popover, Button, Select, MenuItem } from \"@mui/material\";\nimport { ImCross } from \"react-icons/im\";\nimport ScreenBreadcrumbs from \"../Common/ScreenBreadcrumbs\";\nimport { RiFileExcel2Line } from \"react-icons/ri\";\nimport * as XLSX from \"xlsx\";\nimport Loader from \"../Loader/Loader\";\nimport ExcelJS from \"exceljs\";\nimport { BiCheck, BiErrorCircle } from \"react-icons/bi\";\nimport GlobalHelp from \"../PrimeReactTableComponent/GlobalHelp\";\nimport \"./T&MOpen.scss\";\n\nfunction TMOpen() {\n  const currentDate = new Date();\n  const startOfMonth = new Date(\n    currentDate.getFullYear(),\n    currentDate.getMonth(),\n    1\n  );\n  const [isPopoverOpen, setPopoverOpen] = useState(false);\n  const [cancelClicked, setCancelClicked] = useState(false);\n  const [message, setMessage] = useState();\n  const abortControllerRef = useRef(new AbortController());\n  const [loader, setLoader] = useState(false);\n  const [tableDetails, setTableDetails] = useState(null); //response is an object with tsDates, tsDtls,tsInfo properties\n  const [startDate, setStartDate] = useState(startOfMonth);\n  const [endDate, setEndDate] = useState(null);\n  const [globalReportRunId, setGlobalReportRunId] = useState();\n  const [visible, setVisible] = useState(false);\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [projectData, setProjectData] = useState([]);\n  const [projectIds, setProjectIds] = useState([]);\n\n  const [selectedProjects, setSelectedProjects] = useState([]);\n  const [selectedProjectIds, setSelectedProjectIds] = useState([]);\n  const [firstSelProject, setFirstSelProject] = useState(\"\");\n  const [selectedPeriod, setSelectedPeriod] = useState(\"\");\n  const [columnData, setColumnData] = useState([]);\n  const [isFM, setIsFM] = useState(null);\n  const [approvalStates, setApprovalStates] = useState([]);\n  const [initialHiddenColumns, setInitialHiddenColumns] = useState({});\n  const [projectWiseRows, setProjectWiseRows] = useState(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [clickedCellIds, setClickedCellIds] = useState([]);\n  const [clickedCellStates, setClickedCellStates] = useState([]);\n  const [clickedRow, setClickedRow] = useState(null);\n  const [isPMPrjIds, setIsPMPrjIds] = useState([]);\n  const [cheveronIconHeader, setChevronIconHeader] =\n    useState(FaChevronCircleRight);\n  const [hiddenColumns, setHiddenColumns] = useState(initialHiddenColumns);\n  const [approvalIDs, setApprovalIDs] = useState([]);\n  const [rejectedIDs, setRejectedIDs] = useState([]);\n  const [weekBasedColExpFlags, setWeekBasedColExpFlags] = useState([]);\n  const [updatedWeekBasedCols, setUpdatedWeekBasedCols] = useState();\n  const [initialProjectSelectChange, setInitialProjectSelectChange] =\n    useState(true);\n  const [appStatusOptions, setAppStatusOptions] = useState([\n    //Values ate dynamic, fetch from tsStates of table data\n    { label: \"FM approved\", value: \"756\" },\n    { label: \"FM rejected\", value: \"757\" },\n    { label: \"Invoiced\", value: \"759\", disabled: false },\n    {\n      label: \"Ready for finance review\",\n      value: \"755\",\n      disabled: false,\n    },\n    {\n      label: \"Ready for Invoice\",\n      value: \"758\",\n      disabled: false,\n    },\n  ]);\n\n  const selectBoxStyle = {\n    width: \"200px\", // Adjust the width as needed\n  };\n  const [selectedAppStats, setSelectedAppStats] = useState([]);\n  const baseUrl = environment.baseUrl;\n  const loggedUserId = localStorage.getItem(\"resId\");\n  const [routes, setRoutes] = useState([]);\n  let textContent = \"Time & Expenses\";\n  let currentScreenName = [\"T&M - Open\"];\n  const [prjStates, setPrjStates] = useState(null);\n  const [searchFilters, setSearchFilters] = useState({\n    prjSource: \"PPM\",\n    prjStatus: \"1\",\n    appStatus: [],\n    period: \"\",\n  });\n  const [dataAccess, setDataAccess] = useState([]);\n\n  // ====================================useEffect start===============================\n\n  useEffect(() => {}, [cancelClicked]);\n  useEffect(() => {\n    getProjectByStatus();\n  }, [searchFilters, selectedAppStats, startDate, dataAccess]);\n\n  useEffect(() => {\n    if (!initialProjectSelectChange) {\n      getInvoicePeriod();\n    }\n  }, [firstSelProject, initialProjectSelectChange]);\n\n  useEffect(() => {\n    defineColumns();\n  }, [weekBasedColExpFlags]);\n\n  useEffect(() => {\n    setHiddenColumns(initialHiddenColumns);\n  }, [initialHiddenColumns]);\n\n  useEffect(() => {\n    defineTableData(); //Whenever the table details are changed, all my data pertaining to the new table should be refreshed\n    defWkBasedFlagsForExpCol(); //To track week expand button state\n    defineColumns();\n    setApprovalIDs([]); //Refresh approvalIds\n    setRejectedIDs([]); //Refresh rejectedIds\n    isPMThenPrjIds(); //If user is PM, then fetch the project ids he can approve\n    isUserFM(); //Check if user is FM\n  }, [tableDetails]);\n\n  //Refresh prjStates based on projectWiseRows\n  useEffect(() => {\n    const updatedPrjStates = {};\n    projectWiseRows?.forEach((projectRow) => {\n      let newObj = {};\n      newObj[\"id\"] = projectRow[\"project_id\"];\n      newObj[\"state\"] = projectRow[\"billing_status_id\"];\n      newObj[\"invOldAmt\"] = 0;\n      updatedPrjStates[projectRow[\"project_id\"]] = newObj;\n    });\n    setPrjStates(updatedPrjStates);\n  }, [projectWiseRows]);\n\n  useEffect(() => {\n    getMenus();\n  }, []);\n\n  // ====================================useEffect end===============================\n\n  // ====================================Function calls Start===============================\n\n  //For enabling/disabling approvals dropdown in TMOpen table\n  const getIsContractTermsType = (projectId) => {\n    axios({\n      method: \"GET\",\n      url: `${baseUrl}/timeandexpensesms/tmOpen/contractTermsType?id=${projectId}`,\n    })\n      .then((resp) => {\n        return resp?.data;\n      })\n      .catch((error) => {\n        console.log(\"error:\", error);\n      });\n  };\n\n  const getProjectByStatus = () => {\n    const requestBody = {\n      userId: loggedUserId,\n      prjSource: searchFilters.prjSource,\n      prjStatus: searchFilters.prjStatus,\n      appStatus: searchFilters.appStatus,\n      stDate: moment(startDate).format(\"YYYY-MM-DD\"),\n    };\n    if (dataAccess === 500) {\n      axios\n        .get(baseUrl + `/timeandexpensesms/getProjectsForAdmin`)\n        .then((Response) => {\n          let data = Response.data;\n          const updatedData = data.map((obj) => {\n            const { id, projectName, ...rest } = obj;\n            return { label: projectName, value: id, ...rest };\n          });\n          // console.log(updatedData)\n          const projectValues = updatedData.map((obj) => obj.value);\n\n          setProjectIds(projectValues);\n          setProjectData(updatedData);\n        });\n    } else {\n      axios\n        .post(\n          // (dataAccess === 250) ?\n          //   baseUrl + `/dashboardsms/allocationDashboard/getProjects?userId=${loggedUserId}`\n          //   :\n          baseUrl + `/timeandexpensesms/tmOpen/getProjectsByStatus`,\n          requestBody\n        )\n        .then(function (res) {\n          const data = res.data;\n          //changing the object property from 'text'->'label'\n          const updatedData = data.map((obj) => {\n            const { text, ...rest } = obj;\n            return { label: text, ...rest };\n          });\n\n          const projectValues = updatedData.map((obj) => obj.value);\n\n          setProjectIds(projectValues);\n          setProjectData(updatedData);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  };\n\n  const handleAbort = () => {\n    abortControllerRef.current.abort();\n    setLoader(false);\n  };\n\n  const defWkBasedFlagsForExpCol = () => {\n    const updatedWkBasedFlagsForExpCols = [];\n    tableDetails?.tsDtls.tsInfo.forEach((columnObj) => {\n      let obj = {};\n      columnObj.week_no ? (obj[columnObj.week_no] = false) : \"\";\n      columnObj.week_no ? updatedWkBasedFlagsForExpCols.push(obj) : \"\";\n    });\n    // Convert the array to a set to remove duplicates\n    const uniqueSet = new Set(\n      updatedWkBasedFlagsForExpCols.map(JSON.stringify)\n    );\n    //Set(5) {'{\"18\":false}', '{\"19\":false}', '{\"20\":false}', '{\"21\":false}', '{\"22\":false}'}\n\n    // Convert the set back to an array of objects\n    const newUpdatedWkBasedFlagsForExpCols = Array.from(uniqueSet).map(\n      JSON.parse\n    );\n    setWeekBasedColExpFlags(newUpdatedWkBasedFlagsForExpCols);\n  };\n\n  const handlePopOver = (clickedRow, wkNoOrColDteVal, isWkNoOrColDte) => {\n    // Filtering the mainRow for project based on project id and fetching billing_status_id\n    const projectMainRow = tableDetails.tsDates.find(\n      (obj) =>\n        obj[\"level\"] === 0 && obj[\"project_id\"] === clickedRow[\"project_id\"]\n    );\n\n    const billingStatus = projectMainRow[\"billing_status_id\"];\n\n    const foundId = isPMPrjIds?.find(\n      (obj) => obj.id === clickedRow[\"project_id\"]\n    );\n\n    const isContractTermType = getIsContractTermsType(clickedRow.project_id);\n\n    if (\n      (foundId &&\n        (billingStatus === null || billingStatus === \"757\") &&\n        !isContractTermType) ||\n      (isFM && billingStatus === \"755\" && !isContractTermType)\n    ) {\n      if (isWkNoOrColDte === \"week\") {\n        clickedRow[\"Wk_\" + wkNoOrColDteVal + \"_state\"] === null\n          ? setPopoverOpen(false)\n          : setPopoverOpen(true);\n      } else {\n        clickedRow[\"ts_state_\" + wkNoOrColDteVal] === null\n          ? setPopoverOpen(false)\n          : setPopoverOpen(true);\n      }\n    }\n  };\n\n  const defineColumns = () => {\n    const getClickedCellWkDetails = (weekNum, rowData) => {\n      /**\n          Level Info\n          0 : Project\n          1 : Resource\n          2 : Billable Category\n          3 : Billable Tasks\n          4 : Non Billable Category\t\t\t\t\t\n          5 : Non Billable Tasks\n        */\n      setClickedRow(rowData);\n      const updatedApprIds = [];\n      if (rowData.level === 0) {\n        rowData.subRows?.forEach((resourceRow) => {\n          resourceRow.subRows?.forEach((billOrNonBillTasks) => {\n            const billOrNonBillRow = billOrNonBillTasks.subRows[0];\n            //Fetching the cell ids for approve/reject- WeekBased\n            updatedWeekBasedCols[weekNum].forEach((id) => {\n              billOrNonBillRow[id] !== null\n                ? updatedApprIds.push(billOrNonBillRow[id])\n                : \"\";\n            });\n          });\n        });\n      } else if (rowData.level === 1) {\n        rowData.subRows?.forEach((billOrNonBillTasks) => {\n          const billOrNonBillRow = billOrNonBillTasks.subRows[0];\n          //Fetching the cell ids for approve/reject- WeekBased\n          updatedWeekBasedCols[weekNum].forEach((id) => {\n            billOrNonBillRow[id] !== null\n              ? updatedApprIds.push(billOrNonBillRow[id])\n              : \"\";\n          });\n        });\n      } else if (rowData.level === 2) {\n        const billOrNonBillRow = rowData.subRows[0];\n        //Fetching the cell ids for approve/reject- WeekBased\n        updatedWeekBasedCols[weekNum].forEach((id) => {\n          billOrNonBillRow[id] !== null\n            ? updatedApprIds.push(billOrNonBillRow[id])\n            : \"\";\n        });\n      } else {\n        updatedWeekBasedCols[weekNum].forEach((id) => {\n          rowData[id] !== null ? updatedApprIds.push(rowData[id]) : \"\";\n        });\n      }\n\n      //Changing the ts_id--->ts_state for state update on approve/reject\n      const updatedWeekBasedColStates = updatedWeekBasedCols[weekNum].map(\n        (element) => {\n          return element.replace(\"ts_id\", \"ts_state\");\n        }\n      );\n\n      setClickedCellIds(updatedApprIds);\n      setClickedCellStates(updatedWeekBasedColStates);\n    };\n\n    const getClickedCellDetails = (colID, rowData) => {\n      /**\n          Level Info\n          0 : Project\n          1 : Resource\n          2 : Billable Category\n          3 : Billable Tasks\n          4 : Non Billable Category\t\t\t\t\t\n          5 : Non Billable Tasks\n        */\n      setClickedRow(rowData);\n      const updatedApprIds = [];\n      const updatedCellStates = []; //To change color on approve/reject\n      //If the rowData is project level, we need to send all the ids of its child row\n      if (rowData[\"level\"] === 0) {\n        rowData.subRows?.forEach((resourceRow) => {\n          resourceRow.subRows?.forEach((billOrNonBillTasks) => {\n            const billOrNonBillRow = billOrNonBillTasks.subRows[0];\n            //Fetching the cell ids for approve/reject- WeekBased\n            billOrNonBillRow[\"ts_id_\" + colID] !== null\n              ? updatedApprIds.push(billOrNonBillRow[\"ts_id_\" + colID])\n              : \"\";\n\n            //Fetching the cell states\n            updatedCellStates.push(\"ts_state_\" + colID);\n          });\n        });\n      } //If the level is of Resource, we need to send the ids of billable and non billable tasks\n      else if (rowData[\"level\"] === 1) {\n        rowData.subRows?.forEach((billOrNonBillTasks) => {\n          const billOrNonBillRow = billOrNonBillTasks.subRows[0];\n          //Fetching the cell ids for approve/reject- WeekBased\n          billOrNonBillRow[\"ts_id_\" + colID] !== null\n            ? updatedApprIds.push(billOrNonBillRow[\"ts_id_\" + colID])\n            : \"\";\n\n          //Fetching the cell states\n          updatedCellStates.push(\"ts_state_\" + colID);\n        });\n      } else if (rowData[\"level\"] === 2 || rowData[\"level\"] === 4) {\n        //If the level is of billable/non billable tasks we need to send only the id of its child row\n        const billOrNonBillRow = rowData.subRows[0];\n        //Fetching the cell ids for approve/reject- WeekBased\n        billOrNonBillRow[\"ts_id_\" + colID] !== null\n          ? updatedApprIds.push(billOrNonBillRow[\"ts_id_\" + colID])\n          : \"\";\n\n        //Fetching the cell states\n        updatedCellStates.push(\"ts_state_\" + colID);\n      } else {\n        //else send the id of the rowData itself\n        updatedApprIds.push(rowData[\"ts_id_\" + colID]);\n        //Fetching the cell states\n        updatedCellStates.push(\"ts_state_\" + colID);\n      }\n      setClickedCellIds(updatedApprIds);\n      setClickedCellStates(updatedCellStates);\n    };\n\n    //Defining columns for material react table\n    let columns = [];\n\n    tableDetails?.tsDtls.tsInfo.forEach((columnObj, index) => {\n      let newColumnObject = null;\n      if (\n        (columnObj.week_day === \"\" || columnObj.week_day === null) &&\n        columnObj.week_no !== null\n      ) {\n        const splitHeaderArray = columnObj.display_date.split(\"<br/>\");\n        const foundWeekObject = weekBasedColExpFlags.find((weekObj) =>\n          weekObj.hasOwnProperty(columnObj.week_no)\n        );\n        newColumnObject = {\n          id: index + \"_\" + columnObj.week_no,\n          Header: ({ column }) => (\n            <div>\n              <span\n                className={index + \"_\" + columnObj.week_no}\n                onClick={() => {\n                  updateHiddenColumns(columnObj.week_no);\n                }}\n              >\n                {foundWeekObject && foundWeekObject[columnObj.week_no] ? (\n                  <FaChevronCircleLeft />\n                ) : (\n                  <FaChevronCircleRight />\n                )}\n              </span>\n            </div>\n          ),\n          enableColumnActions: false,\n          enableHiding: true,\n          columns: [\n            {\n              id: index + \"_WK_\" + columnObj.week_no,\n              accessorKey: \"Wk_\" + columnObj.week_no,\n              Header: ({ column }) => (\n                <div>\n                  <span title={\"Wk_\" + columnObj.week_no}>\n                    {splitHeaderArray[0]} <br />\n                    to\n                    <br />\n                    {splitHeaderArray[2]}\n                  </span>\n                </div>\n              ),\n              enableColumnActions: false,\n              enableHiding: true,\n              minSize: 10,\n              maxSize: 10,\n              size: 10,\n              // \"rgba(52, 210, 235, 0.1)\"- light blue color\n              muiTableBodyCellProps: ({ row }) => ({\n                sx: {\n                  backgroundColor:\n                    row.original[\"Wk_\" + columnObj.week_no + \"_state\"] === 2\n                      ? \"rgba(255, 0, 0, 0.5)\"\n                      : row.original[\"Wk_\" + columnObj.week_no + \"_state\"] === 4\n                      ? \"rgba(22, 184, 44, 0.5)\"\n                      : row.original.row_type === \"Billable Tasks\" ||\n                        row.original.row_type === \"Non Billable Tasks\"\n                      ? \"rgba(52, 210, 235, 0.1)\"\n                      : \"white\",\n                  borderRight: \"2px solid #e0e0e0\",\n                  fontSize: \"13px\",\n                  borderTop: \"1px solid #ccc\",\n                  padding: \"2px 8px\",\n                  verticalAlign: \"middle\",\n                  textAlign: \"right\",\n                  fontWeight: 550,\n                },\n              }),\n              Cell: ({ cell }) => (\n                <div\n                  onClick={(event) => {\n                    setAnchorEl(event.currentTarget);\n                    handlePopOver(cell.row.original, columnObj.week_no, \"week\");\n                    getClickedCellWkDetails(\n                      columnObj.week_no,\n                      cell.row.original\n                    );\n                  }}\n                >\n                  <span title={cell.getValue().toFixed(1)}>\n                    {cell.getValue().toFixed(1)}\n                  </span>\n                </div>\n              ),\n            },\n          ],\n        };\n        columns.push(newColumnObject);\n      } else if (columnObj.week_day !== null && columnObj.week_no !== null) {\n        newColumnObject = {\n          id: index + \"_\" + columnObj.format_date,\n          header: columnObj.week_day,\n          muiTableHeadCellProps: {\n            sx: {\n              textAlign: \"center\",\n            },\n          },\n          columns: [\n            {\n              accessorKey: \"ts_\" + columnObj.format_date,\n              header: columnObj.display_date,\n              enableColumnActions: false,\n              enableHiding: true,\n              minSize: 10,\n              maxSize: 10,\n              size: 10,\n              muiTableBodyCellProps: ({ row }) => ({\n                sx: {\n                  backgroundColor:\n                    row.original[\"ts_state_\" + columnObj.format_date] === 2\n                      ? \"rgba(255, 0, 0, 0.5)\"\n                      : row.original[\"ts_state_\" + columnObj.format_date] === 4\n                      ? \"rgba(22, 184, 44, 0.5)\"\n                      : row.original.row_type === \"Billable Tasks\" ||\n                        row.original.row_type === \"Non Billable Tasks\"\n                      ? \"rgba(52, 210, 235, 0.1)\"\n                      : \"white\",\n                  borderRight: \"2px solid #e0e0e0\",\n                  fontSize: \"13px\",\n                  borderTop: \"1px solid #ccc\",\n                  padding: \"2px 8px\",\n                  verticalAlign: \"middle\",\n                  textAlign: \"right\",\n                  fontWeight: 550,\n                },\n              }),\n              muiTableHeadCellProps: {\n                sx: {\n                  textAlign: \"center\",\n                },\n              },\n              Cell: ({ cell }) => (\n                <div\n                  onClick={(event) => {\n                    setAnchorEl(event.currentTarget);\n                    handlePopOver(\n                      cell.row.original,\n                      columnObj.format_date,\n                      \"col\"\n                    );\n                    getClickedCellDetails(\n                      columnObj.format_date,\n                      cell.row.original\n                    );\n                  }}\n                >\n                  <span title={cell.getValue().toFixed(1)}>\n                    {cell.getValue().toFixed(1)}\n                  </span>\n                </div>\n              ),\n            },\n          ],\n        };\n        columns.push(newColumnObject);\n      } else {\n        const columnKey = getAccessorKey(columnObj.display_date);\n        newColumnObject = {\n          id: index + \"_\" + columnKey,\n          accessorKey: columnKey,\n          header: columnObj.display_date,\n          enableColumnActions: false,\n          enableHiding: true,\n          minSize: 10,\n          maxSize: 200,\n          size:\n            columnKey === \"approvals\"\n              ? 200\n              : columnKey === \"total_amount\"\n              ? 120\n              : 10,\n          muiTableHeadCellProps: {\n            sx: {\n              textAlign: \"center\",\n            },\n          },\n          Cell: ({ cell }) =>\n            columnKey.includes(\"hours\") ||\n            columnKey.includes(\"hrs\") ||\n            columnKey === \"invoiced\" ||\n            columnKey === \"to_invoice\" ? (\n              <div>\n                <span\n                  title={\n                    cell.getValue()\n                      ? cell.getValue()?.toFixed(1)\n                      : (0.0).toFixed(1)\n                  }\n                >\n                  {cell.getValue()\n                    ? cell.getValue()?.toFixed(1)\n                    : (0.0).toFixed(1)}\n                </span>\n              </div>\n            ) : columnKey.includes(\"amount\") || columnKey.includes(\"rate\") ? (\n              <div>\n                <span\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\n                >\n                  <span style={{ textAlign: \"left\" }}>\n                    <span\n                      dangerouslySetInnerHTML={{\n                        __html: cell.row.original[\"currency\"],\n                      }}\n                    />\n                  </span>\n                  <span style={{ textAlign: \"right\" }}>\n                    {cell.getValue()\n                      ? cell.getValue()?.toLocaleString(\"en-IN\", {\n                          minimumFractionDigits: 1,\n                          maximumFractionDigits: 1,\n                        })\n                      : (0.0).toFixed(1)}\n                  </span>\n                </span>\n              </div>\n            ) : (\n              <div>\n                <span title={cell.getValue()}>{cell.getValue()}</span>\n              </div>\n            ),\n          muiTableBodyCellProps: ({ row }) => ({\n            sx: {\n              backgroundColor:\n                columnKey === \"rejected_hours\"\n                  ? \"#faf0f0\"\n                  : columnKey === \"pending_hours\"\n                  ? \"#f7f1ea\"\n                  : columnKey === \"to_invoice\"\n                  ? \"#eff8eb\"\n                  : row.original.row_type === \"Billable Tasks\" ||\n                    row.original.row_type === \"Non Billable Tasks\"\n                  ? \"rgba(52, 210, 235, 0.1)\"\n                  : \"white\",\n              borderRight: \"2px solid #e0e0e0\",\n              fontSize: \"13px\",\n              borderTop: \"1px solid #ccc\",\n              borderRight: \"2px solid #e0e0e0\",\n              padding: \"2px 8px\",\n              verticalAlign: \"middle\",\n              textAlign: columnKey === \"name\" ? \"left\" : \"right\",\n              fontWeight: 550,\n            },\n          }),\n        };\n        columns.push(newColumnObject);\n      }\n    });\n    setColumnData(columns);\n  };\n\n  const defineTableData = () => {\n    //creating this for approval/rejection of time sheets\n    //25:[ts_id_01_Feb_2023,ts_id_02_Feb_2023]\n    const updatedWeekBasedColumns = tableDetails?.tsDtls.tsInfo.reduce(\n      (result, item) => {\n        // Ignore items where week_day and week_no are null\n        if (\n          item.week_day !== null &&\n          item.week_no !== null &&\n          item.format_date !== null\n        ) {\n          // Check if week_no exists in result object\n          if (!result[item.week_no]) {\n            // Initialize an empty array for the week_no if it doesn't exist\n            result[item.week_no] = [];\n          }\n\n          // Push the format_date value to the week_no array\n          result[item.week_no].push(\"ts_id_\" + item.format_date);\n        }\n\n        return result;\n      },\n      {}\n    );\n    setUpdatedWeekBasedCols(updatedWeekBasedColumns);\n\n    //Setting initial hidden colums\n    const updatedInitialHiddenCols = {};\n\n    tableDetails?.tsDtls.tsInfo.forEach((obj) => {\n      if (obj.week_no && obj.week_day) {\n        updatedInitialHiddenCols[\"ts_\" + obj.format_date] = false;\n      }\n    });\n\n    setInitialHiddenColumns(updatedInitialHiddenCols);\n\n    //New row data with subRows mapping\n    let rowObjectsArray = tableDetails?.tsDates;\n    const groupedRowObjects = rowObjectsArray?.reduce(\n      (acc, obj) => {\n        const projectId = obj.project_id;\n        if (!acc.projectIds.includes(projectId)) {\n          acc.projectIds.push(projectId);\n          acc.groupedRowsByProject[projectId] = [];\n        }\n        acc.groupedRowsByProject[projectId].push(obj);\n        return acc;\n      },\n      { projectIds: [], groupedRowsByProject: {} }\n    );\n    //Fetching states from tableData and customizing for MultiSelect tag\n    const updatedApprovalStates = [];\n    tableDetails?.tsStates.forEach((e) => {\n      let approvalObj = {\n        label: e.name,\n        value: e.id,\n      };\n      updatedApprovalStates.push(approvalObj);\n    });\n\n    setApprovalStates(updatedApprovalStates);\n\n    const updatedProjectWiseRows = [];\n\n    const handleInvoiceSelect = (event, row) => {\n      const isChecked = event.target.checked;\n\n      setPrjStates((prevPrjStates) => ({\n        ...prevPrjStates,\n        [row[\"project_id\"]]: {\n          ...prevPrjStates[row[\"project_id\"]],\n          invOldAmt: isChecked ? 1 : 0,\n        },\n      }));\n    };\n\n    groupedRowObjects?.projectIds.forEach((id) => {\n      //For each project- fetching all child rows\n      let arrayOfRowObjects = groupedRowObjects?.groupedRowsByProject[id];\n      let mainRow = arrayOfRowObjects[0]; //Fetching main row(project parent row)\n      mainRow.subRows = []; //adding subRows property for mterial react table\n      let billingStatus = mainRow[\"billing_status_id\"];\n      const foundId = isPMPrjIds?.find(\n        (obj) => obj.id === mainRow[\"project_id\"]\n      );\n      const isStateEnable = () => {\n        if (\n          (foundId &&\n            (billingStatus === null || billingStatus === \"757\") &&\n            !getIsContractTermsType(mainRow.project_id)) ||\n          (isFM &&\n            billingStatus !== null &&\n            !getIsContractTermsType(mainRow.project_id))\n        ) {\n          return true;\n        } else return false;\n      };\n      // adding the checkbox for invoicing functionality\n      mainRow.prjInvoiceAmount = (\n        <input\n          type=\"checkbox\"\n          className=\"prjInvoiceAmount\"\n          // disabled={!isStateEnable()} //disable if the user is not FM\n          disabled={\n            dataAccess === 100 || dataAccess === 500 ? false : !isStateEnable()\n          }\n          onChange={(event) => {\n            handleInvoiceSelect(event, mainRow);\n          }}\n        />\n      );\n      //Approval dropdown\n      const approvals = tableDetails?.tsStates.map((obj) => {\n        if (obj.id === 758)\n          return {\n            ...obj,\n            name: \"Ready for Invoice\",\n          };\n        else return obj;\n      });\n      const handleOnChangeForSelect = (event) => {\n        const selectedOption = event.target.value;\n        setPrjStates((prevPrjStates) => ({\n          ...prevPrjStates,\n          [mainRow[\"project_id\"]]: {\n            ...prevPrjStates[mainRow[\"project_id\"]],\n            state: selectedOption,\n          },\n        }));\n      };\n\n      if (foundId) {\n        if (billingStatus === null) {\n          const option = approvals.find((obj) => obj.id === 755);\n          mainRow.approvals = (\n            <div>\n              <select\n                defaultValue={billingStatus}\n                className=\"approvals\"\n                id=\"approvals\"\n                // disabled={!isStateEnable()}\n                disabled={\n                  dataAccess === 100 || dataAccess === 500\n                    ? false\n                    : !isStateEnable()\n                }\n                onChange={handleOnChangeForSelect}\n                style={selectBoxStyle}\n              >\n                <option key=\"0\" value=\"0\" selected>\n                  &lt;&lt;Please Select&gt;&gt;\n                </option>\n                {\n                  <option key={option.id} value={option.id}>\n                    {option.name}\n                  </option>\n                }\n              </select>\n            </div>\n          );\n        } else if (billingStatus === \"757\") {\n          mainRow.approvals = (\n            <div>\n              <select\n                defaultValue={billingStatus}\n                className=\"approvals\"\n                id=\"approvals\"\n                // disabled={!isStateEnable()}\n                disabled={\n                  dataAccess === 100 || dataAccess === 500\n                    ? false\n                    : !isStateEnable()\n                }\n                onChange={handleOnChangeForSelect}\n                style={selectBoxStyle}\n              >\n                {approvals.map((option) => (\n                  <option\n                    key={option.id}\n                    value={option.id}\n                    disabled={option.id !== 755}\n                    hidden={\n                      option.id == 756 || option.id == 758 || option.id == 759\n                    }\n                  >\n                    {option.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          );\n        } else {\n          mainRow.approvals = (\n            <div>\n              <select\n                defaultValue={billingStatus}\n                className=\"approvals\"\n                id=\"approvals\"\n                // disabled={!isStateEnable()}\n                disabled={\n                  dataAccess === 100 || dataAccess === 500\n                    ? false\n                    : !isStateEnable()\n                }\n                onChange={handleOnChangeForSelect}\n                style={selectBoxStyle}\n              >\n                {approvals.map((option) => (\n                  <option key={option.id} value={option.id}>\n                    {option.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          );\n        }\n      } else if (isFM) {\n        if (isStateEnable()) {\n          mainRow.approvals = (\n            <div>\n              <select\n                defaultValue={billingStatus}\n                className=\"approvals\"\n                id=\"approvals\"\n                disabled={\n                  dataAccess === 100 || dataAccess === 500\n                    ? false\n                    : !isStateEnable()\n                }\n                onChange={handleOnChangeForSelect}\n                style={selectBoxStyle}\n              >\n                {approvals.map((option) => (\n                  <option\n                    key={option.id}\n                    value={option.id}\n                    disabled={option.id === 755}\n                    hidden={option.id === 759}\n                  >\n                    {option.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          );\n        } else {\n          mainRow.approvals = (\n            <div>\n              <select\n                defaultValue={billingStatus}\n                className=\"approvals\"\n                id=\"approvals\"\n                disabled={\n                  dataAccess === 100 || dataAccess === 500\n                    ? false\n                    : !isStateEnable()\n                }\n                onChange={handleOnChangeForSelect}\n                style={selectBoxStyle}\n              >\n                <option key=\"0\" value=\"0\">\n                  &lt;&lt;Please Select&gt;&gt;\n                </option>\n              </select>\n            </div>\n          );\n        }\n      } else {\n        mainRow.approvals = (\n          <div>\n            <select\n              defaultValue={billingStatus}\n              className=\"approvals\"\n              id=\"approvals\"\n              disabled={!isStateEnable()}\n              onChange={handleOnChangeForSelect}\n              style={selectBoxStyle}\n            >\n              <option key=\"0\" value=\"0\">\n                &lt;&lt;Please Select&gt;&gt;\n              </option>\n            </select>\n          </div>\n        );\n      }\n      //Building subRows for material react table\n      const resourceRows = arrayOfRowObjects.filter(\n        (row) => row.row_type == \"Resource\"\n      );\n\n      const billableTasks = arrayOfRowObjects.filter(\n        (row) => row.row_type == \"Billable Tasks\"\n      );\n\n      const nonBillableTasks = arrayOfRowObjects.filter(\n        (row) => row.row_type == \"Non Billable Tasks\"\n      );\n\n      const billableRows = arrayOfRowObjects.filter(\n        (row) => row.row_type == \"Billable\"\n      );\n\n      const nonBillableRows = arrayOfRowObjects.filter((row) =>\n        row.type?.includes(\"Non Billable\")\n      );\n\n      resourceRows?.forEach((resourceRow) => {\n        //Billable or Non billable task row for resource will always be ONE.\n        const resourceBillableTasks = billableTasks.filter(\n          (task) => task.resource_id == resourceRow.resource_id\n        );\n        const resourceNonBillableTasks = nonBillableTasks\n          .filter((task) => task.resource_id == resourceRow.resource_id)\n          ?.slice(0, 1);\n\n        //Under billable or non billable task, the rows will be multiple.\n        const resourceBillableRows = billableRows.filter(\n          (row) => row.resource_id == resourceRow.resource_id\n        );\n        const resourceNonBillableRows = nonBillableRows.filter(\n          (row) => row.resource_id == resourceRow.resource_id\n        );\n\n        //Add billableRows under billable tasks\n        if (resourceBillableTasks && resourceBillableTasks[0]) {\n          resourceBillableRows\n            ? (resourceBillableTasks[0][\"subRows\"] = resourceBillableRows)\n            : \"\";\n        }\n        if (resourceNonBillableTasks && resourceNonBillableTasks[0]) {\n          resourceNonBillableRows\n            ? (resourceNonBillableTasks[0][\"subRows\"] = resourceNonBillableRows)\n            : \"\";\n        }\n        resourceRow.subRows = [\n          ...resourceBillableTasks,\n          ...resourceNonBillableTasks,\n        ];\n        arrayOfRowObjects[0].subRows.push(resourceRow);\n      });\n      console.log(arrayOfRowObjects);\n      updatedProjectWiseRows.push(arrayOfRowObjects[0]);\n    });\n\n    setProjectWiseRows(updatedProjectWiseRows);\n  };\n\n  const updateHiddenColumns = (weekNo) => {\n    let columnsByWeekNo = [];\n    const weekBasedColumns = [];\n    tableDetails?.tsDtls.tsInfo.forEach((obj) => {\n      if (obj.week_no === weekNo && obj.week_day) {\n        let newObj = {};\n        newObj[obj.week_no] = \"ts_\" + obj.format_date;\n        weekBasedColumns.push(newObj);\n      }\n    });\n    weekBasedColumns.forEach((obj) => {\n      if (obj[weekNo]) columnsByWeekNo.push(obj[weekNo]);\n    });\n    setHiddenColumns((prevHiddenColumns) => {\n      const updatedHiddenCols = { ...prevHiddenColumns }; // Create a new object\n      columnsByWeekNo.forEach((column) => {\n        if (updatedHiddenCols.hasOwnProperty(column)) {\n          updatedHiddenCols[column] = !updatedHiddenCols[column];\n        }\n      });\n\n      return updatedHiddenCols; // Return the updated object\n    });\n    setChevronIconHeader((prevIcon) =>\n      prevIcon === FaChevronCircleRight\n        ? FaChevronCircleLeft\n        : FaChevronCircleRight\n    );\n    setWeekBasedColExpFlags((prevState) => {\n      const newState = prevState.map((obj) => {\n        if (obj.hasOwnProperty(weekNo)) {\n          return { [weekNo]: !obj[weekNo] };\n        }\n        return obj;\n      });\n      return newState;\n    });\n  };\n\n  function getInvoicePeriod() {\n    const apiUrl = baseUrl + `/timeandexpensesms/tmOpen/getInvoicePeriod`;\n    const requestBody = {\n      data: { selectedvalue: firstSelProject, projects: projectIds },\n    };\n    axios\n      .post(apiUrl, requestBody.data)\n      .then(function (response) {\n        setSelectedPeriod(\n          response?.data.invoiceCycle ? response?.data.invoiceCycle : \"653\"\n        );\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  }\n\n  const getMenus = () => {\n    // setMenusData\n\n    axios({\n      method: \"GET\",\n      url: baseUrl + `/CommonMS/master/getMenus?loggedUserId=${loggedUserId}`,\n    }).then((resp) => {\n      let data = resp.data;\n\n      data.forEach((item) => {\n        if (item.display_name === textContent) {\n          setRoutes([item]);\n        }\n      });\n\n      const TMExpensesSubMenu = data\n        .find((item) => item.display_name === \"Time & Expenses\")\n        .subMenus.find((subMenu) => subMenu.display_name === \"T&M - Open\");\n\n      // Extract the access_level value\n      const accessLevel = TMExpensesSubMenu\n        ? TMExpensesSubMenu.access_level\n        : null;\n      setDataAccess(accessLevel);\n    });\n  };\n\n  const savePtjTsReportRuns = async () => {\n    let apiUrl;\n\n    apiUrl = baseUrl + `/timeandexpensesms/tmOpen/savePtjTsReportRuns`;\n\n    const requestData = {\n      filterName: selectedPeriod.toString(),\n      UserId: loggedUserId,\n      projects: selectedProjectIds,\n    };\n\n    await axios\n      .post(apiUrl, requestData, { signal: abortControllerRef.current.signal })\n      .then((response) => {\n        //Using the response to call another api\n        const reportRunId = response?.data.reportRunId;\n        setGlobalReportRunId(reportRunId);\n        const month = moment(startDate).format(\"YYYY-MM-DD\");\n        const calculatedEndDate = moment(startDate)\n          .endOf(\"month\")\n          .format(\"YYYY-MM-DD\");\n        const endDate = calculatedEndDate;\n        getPrjTeamTimesheet(reportRunId, month, endDate);\n      })\n      .catch((error) => {\n        // Handle the error\n        console.error(error);\n      });\n  };\n\n  const getPrjTeamTimesheet = async (reportRunId, month, endDate) => {\n    // Cancel the previous requests before making new ones\n    abortControllerRef.current.abort();\n\n    // Create a new AbortController instance for the current search\n    abortControllerRef.current = new AbortController();\n    setLoader(false);\n    const apiUrl = baseUrl + `/timeandexpensesms/tmOpen/getPrjTeamTimeSheet`;\n    const requestData = {\n      month: month,\n      reportRunId: reportRunId,\n      endDate: endDate,\n    };\n\n    await axios\n      .post(apiUrl, requestData, { signal: abortControllerRef.current.signal })\n      .then((response) => {\n        setTableDetails(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    setLoader(false);\n    setVisible(!visible);\n    visible\n      ? setCheveronIcon(FaChevronCircleUp)\n      : setCheveronIcon(FaChevronCircleDown);\n  };\n\n  const handleSearch = () => {\n    if (selectedProjects !== null || selectedProjects.length !== 0) {\n      if (selectedProjectIds.length === 0) {\n        setMessage(\"Please select projects !!\");\n        window.scrollTo({\n          top: 0,\n          behavior: \"smooth\", // Use \"auto\" for instant scrolling\n        });\n        setTimeout(() => {\n          setMessage();\n        }, 3000);\n      } else {\n        savePtjTsReportRuns();\n      }\n    }\n  };\n\n  const handleProjectSelectChange = (selected) => {\n    setSelectedProjects(selected);\n    const selectedProjIds = selected.map((option) => option.value);\n    setSelectedProjectIds(selectedProjIds);\n\n    if (initialProjectSelectChange) {\n      //Api call to invoice period happens only on initial selection\n      setInitialProjectSelectChange(false);\n      setFirstSelProject(selectedProjIds[0]);\n    }\n  };\n\n  const handleDateChange = (selectedDate) => {\n    setStartDate(selectedDate);\n    setSelectedProjects([]);\n    setSelectedProjectIds([]);\n    setFirstSelProject(\"\");\n    setInitialProjectSelectChange(true);\n    // Calculate the end date as the last day of the month\n    const calculatedEndDate = moment(selectedDate)\n      .endOf(\"month\")\n      .format(\"YYYY-MM-DD\");\n    setEndDate(calculatedEndDate);\n  };\n\n  //Handling prev month icon click on top left of table\n  const handlePrevMonthIcon = () => {\n    const currentStDte = tableDetails?.tsDtls.startDate;\n    const prevStDate = moment(currentStDte)\n      .subtract(1, \"months\")\n      .format(\"YYYY-MM-DD\");\n    const prevEdDate = moment(prevStDate).endOf(\"month\").format(\"YYYY-MM-DD\");\n    getPrjTeamTimesheet(globalReportRunId, prevStDate, prevEdDate);\n  };\n\n  //Handling next month icon click on top left of table\n  const handleNextMonthIcon = () => {\n    const currentStDte = tableDetails?.tsDtls.startDate;\n    const nextStDate = moment(currentStDte)\n      .add(1, \"months\")\n      .format(\"YYYY-MM-DD\");\n    const nextEdDate = moment(nextStDate).endOf(\"month\").format(\"YYYY-MM-DD\");\n    getPrjTeamTimesheet(globalReportRunId, nextStDate, nextEdDate);\n  };\n\n  //Handling save button for table\n  const handleSave = async () => {\n    const apiUrl = baseUrl + `/timeandexpensesms/tmOpen/saveTeamTs`;\n    const postData = {\n      startDate: tableDetails.tsDtls.startDate,\n      endDate: tableDetails.tsDtls.endDate,\n      Approved: approvalIDs,\n      Rejected: rejectedIDs,\n      prjStates: prjStates,\n    };\n    await axios\n      .post(apiUrl, postData)\n      .then((response) => {\n        setMessage(\"Timesheet saved successfully!!\");\n        setTimeout(() => {\n          setMessage();\n        }, 3000);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    const month = moment(tableDetails?.tsDtls.startDate).format(\"YYYY-MM-DD\");\n    const calculatedEndDate = moment(tableDetails?.tsDtls.startDate)\n      .endOf(\"month\")\n      .format(\"YYYY-MM-DD\");\n    getPrjTeamTimesheet(globalReportRunId, month, calculatedEndDate);\n  };\n\n  const updateStatus = (nestedRows, clickedRow, statusCode) => {\n    nestedRows.forEach((projectRow) => {\n      if (projectRow.project_id === clickedRow.project_id) {\n        if (clickedRow.level === 0) {\n          clickedCellStates.forEach((stateId) => {\n            projectRow[stateId] ? (projectRow[stateId] = statusCode) : \"\";\n          });\n          projectRow.subRows.forEach((resourceRow) => {\n            clickedCellStates.forEach((stateId) => {\n              resourceRow[stateId] ? (resourceRow[stateId] = statusCode) : \"\";\n            });\n            resourceRow.subRows?.forEach((billOrNonBillTasks) => {\n              clickedCellStates.forEach((stateId) => {\n                billOrNonBillTasks[stateId]\n                  ? (billOrNonBillTasks[stateId] = statusCode)\n                  : \"\";\n              });\n              const billOrNonBillRow = billOrNonBillTasks.subRows[0];\n              clickedCellStates.forEach((stateId) => {\n                billOrNonBillRow[stateId]\n                  ? (billOrNonBillRow[stateId] = statusCode)\n                  : \"\";\n              });\n            });\n          });\n        } else {\n          projectRow.subRows.forEach((resourceRow) => {\n            if (resourceRow.resource_id === clickedRow.resource_id) {\n              clickedCellStates.forEach((stateId) => {\n                resourceRow[stateId] ? (resourceRow[stateId] = statusCode) : \"\";\n              });\n              resourceRow.subRows?.forEach((billOrNonBillTasks) => {\n                clickedCellStates.forEach((stateId) => {\n                  billOrNonBillTasks[stateId]\n                    ? (billOrNonBillTasks[stateId] = statusCode)\n                    : \"\";\n                });\n                const billOrNonBillRow = billOrNonBillTasks.subRows[0];\n                clickedCellStates.forEach((stateId) => {\n                  billOrNonBillRow[stateId]\n                    ? (billOrNonBillRow[stateId] = statusCode)\n                    : \"\";\n                });\n              });\n            }\n          });\n        }\n      }\n    });\n  };\n\n  //Handing approve onClick event\n  const handleApprove = () => {\n    const statusCode = 4;\n    updateStatus([...projectWiseRows], clickedRow, statusCode);\n    setProjectWiseRows([...projectWiseRows]); // Trigger state update to re-render the component\n\n    const updatedRejectedIDs = rejectedIDs.filter(\n      (id) => !clickedCellIds.includes(id)\n    );\n    setRejectedIDs(updatedRejectedIDs);\n    setApprovalIDs((prevIds) => {\n      // Create a new Set from the previous IDs array to easily check for duplicates\n      const existingIds = new Set(prevIds);\n\n      // Filter out any clicked cell IDs that already exist in the set\n      const uniqueClickedCellIds = clickedCellIds.filter(\n        (id) => !existingIds.has(id)\n      );\n\n      // Concatenate the unique clicked cell IDs with the previous IDs array\n      return [...prevIds, ...uniqueClickedCellIds];\n    });\n  };\n\n  //Handing reject onClick event\n  const handleReject = () => {\n    const statusCode = 2;\n    updateStatus([...projectWiseRows], clickedRow, statusCode);\n    setProjectWiseRows([...projectWiseRows]); // Trigger state update to re-render the component\n\n    const updatedApprovalIDs = approvalIDs.filter(\n      (id) => !clickedCellIds.includes(id)\n    );\n    setApprovalIDs(updatedApprovalIDs);\n    setRejectedIDs((prevIds) => {\n      // Create a new Set from the previous IDs array to easily check for duplicates\n      const existingIds = new Set(prevIds);\n\n      // Filter out any clicked cell IDs that already exist in the set\n      const uniqueClickedCellIds = clickedCellIds.filter(\n        (id) => !existingIds.has(id)\n      );\n\n      // Concatenate the unique clicked cell IDs with the previous IDs array\n      return [...prevIds, ...uniqueClickedCellIds];\n    });\n  };\n\n  const handleCancel = () => {\n    const currStDte = tableDetails?.tsDtls.startDate;\n    const currEdDate = moment(currStDte).endOf(\"month\").format(\"YYYY-MM-DD\");\n    getPrjTeamTimesheet(globalReportRunId, currStDte, currEdDate);\n  };\n\n  const isUserFM = async () => {\n    await axios\n      .get(baseUrl + `/timeandexpensesms/tmOpen/fmUserRole`, {\n        params: {\n          userId: loggedUserId,\n          source: searchFilters.prjSource,\n        },\n      })\n      .then((response) => {\n        setIsFM(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const isPMThenPrjIds = () => {\n    axios\n      .get(baseUrl + `/timeandexpensesms/tmOpen/userRole`, {\n        params: {\n          userId: loggedUserId,\n          source: searchFilters.prjSource,\n        },\n      })\n      .then((response) => {\n        // Handle the response data\n        setIsPMPrjIds(response.data);\n      })\n      .catch((error) => {\n        // Handle the error\n        console.error(error);\n      });\n  };\n\n  //Switch statement to fetch the header associated value.\n  let getHeaderValueForExcel = (header, rowData) => {\n    const taskRow = tableDetails.tsDates.find(\n      (obj) =>\n        obj.resource_id === rowData.resource_id &&\n        (obj.level === 3 || obj.level === 4)\n    );\n    const projectRow = tableDetails.tsDates.find(\n      (obj) => obj.project_id === rowData.project_id && obj.level === 0\n    );\n    let headerAssociatedValue = \"\";\n    let headerAssociatedValueTemp = \"\";\n    switch (header) {\n      case \"Task Name\":\n        headerAssociatedValue = taskRow?.name;\n        break;\n\n      case \"Project Name\":\n        headerAssociatedValue = projectRow?.name;\n        break;\n      case \"Resource Name\":\n        headerAssociatedValue = rowData?.name;\n        break;\n\n      case \"Task Type\":\n        headerAssociatedValue = taskRow?.row_type;\n        break;\n\n      case \"Role Name\":\n        headerAssociatedValue = rowData?.type;\n        break;\n\n      case \"Rate\":\n        if (rowData[\"rate\"] === null)\n          headerAssociatedValueTemp =\n            rowData[\"currency\"] + \" \" + (0.0).toFixed(2);\n        else\n          headerAssociatedValueTemp =\n            rowData[\"currency\"] + \" \" + rowData[\"rate\"].toFixed(2);\n        headerAssociatedValue = new DOMParser().parseFromString(\n          headerAssociatedValueTemp,\n          \"text/html\"\n        ).body.textContent;\n\n        break;\n\n      case \"Logged Hours\":\n        headerAssociatedValue =\n          rowData[\"logged_hours\"] !== null\n            ? rowData[\"logged_hours\"].toFixed(1)\n            : (0.0).toFixed(1);\n        break;\n\n      case \"Rejected Hours\":\n        headerAssociatedValue =\n          rowData[\"rejected_hours\"] !== null\n            ? rowData[\"rejected_hours\"].toFixed(1)\n            : (0.0).toFixed(1);\n        break;\n\n      case \"Pending Hours\":\n        headerAssociatedValue =\n          rowData[\"pending_hours\"] !== null\n            ? rowData[\"pending_hours\"].toFixed(1)\n            : (0.0).toFixed(1);\n        break;\n\n      case \"Invoiced\":\n        headerAssociatedValue =\n          rowData[\"invoiced\"] !== null\n            ? rowData[\"invoiced\"].toFixed(1)\n            : (0.0).toFixed(1);\n        break;\n\n      case \"To Invoice\":\n        headerAssociatedValue =\n          rowData[\"to_invoice\"] !== null\n            ? rowData[\"to_invoice\"].toFixed(1)\n            : (0.0).toFixed(1);\n        break;\n\n      case \"Invoice Amount\":\n        if (rowData[\"invoice_amount\"] === null) {\n          headerAssociatedValueTemp =\n            rowData[\"currency\"] + \" \" + (0.0).toFixed(2);\n        } else {\n          headerAssociatedValueTemp =\n            rowData[\"currency\"] + \" \" + rowData[\"invoice_amount\"].toFixed(2);\n        }\n        headerAssociatedValue = new DOMParser().parseFromString(\n          headerAssociatedValueTemp,\n          \"text/html\"\n        ).body.textContent;\n        break;\n\n      case \"Yet To Invoice Hours\":\n        headerAssociatedValue =\n          rowData[\"yet_to_invoice_hrs\"] !== null\n            ? rowData[\"yet_to_invoice_hrs\"].toFixed(1)\n            : (0.0).toFixed(1);\n        break;\n\n      case \"Yet To Invoice Amount\":\n        if (rowData[\"yet_to_invoice_amount\"] === null) {\n          headerAssociatedValueTemp =\n            rowData[\"currency\"] + \" \" + (0.0).toFixed(2);\n        } else {\n          headerAssociatedValueTemp =\n            rowData[\"currency\"] +\n            \" \" +\n            rowData[\"yet_to_invoice_amount\"].toFixed(2);\n        }\n\n        headerAssociatedValue = new DOMParser().parseFromString(\n          headerAssociatedValueTemp,\n          \"text/html\"\n        ).body.textContent;\n        break;\n\n      default:\n        break;\n    }\n    return headerAssociatedValue;\n  };\n\n  const handleOnExport = () => {\n    const resourcesData = tableDetails.tsDates.filter(\n      (obj) => obj.row_type == \"Resource\"\n    );\n\n    //Giving the header values static. Dates are the dynamic values, hence adding them using tableDetails\n    const headerRow = [\n      \"Resource Name\",\n      \"Project Name\",\n      \"Role Name\",\n      \"Task Name\",\n      \"Task Type\",\n      \"Rate\",\n      \"Logged Hours\",\n      \"Rejected Hours\",\n      \"Pending Hours\",\n      \"To Invoice\",\n      \"Invoiced\",\n      \"Invoice Amount\",\n      \"Yet To Invoice Hours\",\n      \"Yet To Invoice Amount\",\n    ];\n    tableDetails?.tsDtls?.tsInfo?.forEach((obj) => {\n      if (obj.format_date) headerRow.push(obj.format_date);\n    });\n\n    const updatedRowData = [];\n\n    //Iterating over resource rows to build rows for excel\n    resourcesData.forEach((row) => {\n      let newArray = [];\n      headerRow.forEach((header) => {\n        if (!header.includes(\"_\")) {\n          //Fetching the header associated value for excel\n          const headerAssocialtedVal = getHeaderValueForExcel(header, row);\n          headerAssocialtedVal\n            ? newArray.push(\"\" + headerAssocialtedVal)\n            : header.includes(\"Amount\") ||\n              header === \"Rate\" ||\n              header === \"To Invoice\"\n            ? newArray.push((0.0).toFixed(1))\n            : newArray.push(\"\" + headerAssocialtedVal);\n        } else {\n          row[\"ts_\" + header]\n            ? newArray.push(row[\"ts_\" + header].toFixed(1))\n            : newArray.push((0.0).toFixed(1));\n        }\n      });\n      updatedRowData.push(newArray);\n    });\n\n    const workbook = new ExcelJS.Workbook();\n\n    //Create new worksheet\n    const worksheet = workbook.addWorksheet(\"Timesheet\");\n\n    //Replacing \"_\" with \"-\" in the headers\n    const updatedHeaderRow = headerRow.map((row) => {\n      if (row.includes(\"_\")) return row.replace(/_/g, \"-\");\n      else return row;\n    });\n    worksheet.addRow(updatedHeaderRow);\n\n    //Adding rows to the worksheet\n    updatedRowData.forEach((row) => {\n      worksheet.addRow(row);\n    });\n\n    //Bolding the first row which contains headers\n    worksheet.getRow(1).font = { bold: true };\n\n    //Saving the sheet\n    workbook.xlsx.writeBuffer().then((buffer) => {\n      saveAs(new Blob([buffer]), \"Timesheet.xlsx\");\n    });\n  };\n\n  //Switch statement to fetch the accessor key based on table details data\n  let getAccessorKey = (header) => {\n    let columnKey = \"\";\n    switch (header) {\n      case \"Project\":\n        columnKey = \"name\";\n        break;\n\n      case \"Task Type/Role\":\n        columnKey = \"type\";\n        break;\n\n      case \"Billing Rate\":\n        columnKey = \"rate\";\n        break;\n\n      case \"Logged Hrs\":\n        columnKey = \"logged_hours\";\n        break;\n\n      case \"Rejected Hrs\":\n        columnKey = \"rejected_hours\";\n        break;\n\n      case \"Pending Approval Hrs\":\n        columnKey = \"pending_hours\";\n        break;\n\n      case \"Already Invoiced Hrs\":\n        columnKey = \"invoiced\";\n        break;\n\n      case \"To be Invoiced Hrs\":\n        columnKey = \"to_invoice\";\n        break;\n\n      case \"Invoiceable Amount\":\n        columnKey = \"invoice_amount\";\n        break;\n\n      case \"Approvals\":\n        columnKey = \"approvals\";\n        break;\n\n      case \"Total Invoice Hrs\":\n        columnKey = \"yet_to_invoice_hrs\";\n        break;\n\n      case \"Yet to be Invoiced\":\n        columnKey = \"yet_to_invoice_amount\";\n        break;\n\n      case \"Total Amount\":\n        columnKey = \"total_amount\";\n        break;\n\n      case \"Invoice Amount\":\n        columnKey = \"prjInvoiceAmount\";\n        break;\n\n      default:\n        break;\n    }\n    return columnKey;\n  };\n\n  const ArrowRenderer = ({ expanded }) => (\n    <>\n      {expanded ? (\n        <FaCaretDown className=\"chevronIcon\" />\n      ) : (\n        <FaCaretDown className=\"chevronIcon\" />\n      )}\n    </>\n  );\n  const generateDropdownLabel = (selectedOptions, allOptions) => {\n    const selectedValues = selectedOptions.map((option) => option.value);\n\n    const allValues = allOptions.map((item) => item.value);\n\n    if (\n      selectedValues.length != 0 &&\n      selectedValues.length === allValues.length\n    ) {\n      return \"<< ALL >>\";\n    } else {\n      return selectedOptions.map((option) => option.label).join(\", \");\n    }\n  };\n\n  //==========Help Document=======================\n  const HelpPDFName = \"TMOpen.pdf\";\n  const Headername = \"Project Timesheet Help\";\n  // ====================================Function calls End===============================\n\n  return (\n    <div>\n      {message && message.includes(\"projects\") ? (\n        <div className=\"statusMsg error\">\n          <span>\n            <BiErrorCircle className=\"error-icon\" />\n            {message}\n          </span>\n        </div>\n      ) : message ? (\n        <div className=\"statusMsg success\">\n          <span>\n            <BiCheck />\n            {message}\n          </span>\n        </div>\n      ) : null}\n      <div className=\"col-md-12\">\n        <div className=\"pageTitle\">\n          <div className=\"childOne\"></div>\n          <div className=\"childTwo\">\n            <h2>Project Timesheet</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n      </div>\n      <ScreenBreadcrumbs\n        routes={routes}\n        currentScreenName={currentScreenName}\n      />{\" \"}\n      <div className=\"group mb-3 customCard\">\n        <div className=\"col-md-12 collapseHeader\">\n          <h2>Search Filters</h2>\n          <div className=\"helpBtn\">\n            <GlobalHelp pdfname={HelpPDFName} name={Headername} />\n          </div>\n          <div\n            onClick={() => {\n              setVisible(!visible);\n              visible\n                ? setCheveronIcon(FaChevronCircleUp)\n                : setCheveronIcon(FaChevronCircleDown);\n            }}\n          >\n            <span>{cheveronIcon}</span>\n          </div>\n        </div>\n        <CCollapse visible={!visible}>\n          <div className=\"group-content row\">\n            <div className=\"col-md-4 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"email-input\">\n                  Source<span style={{ color: \"red\" }}>*</span>\n                </label>\n                <span className=\"col-1\">:</span>\n                <div className=\"col-6\">\n                  <select\n                    id=\"project-select\"\n                    onChange={(event) => {\n                      const selectedValue = event.target.value;\n                      setSelectedProjects([]);\n                      setSelectedProjectIds([]);\n                      setFirstSelProject(\"\");\n                      setInitialProjectSelectChange(true);\n                      setSearchFilters((prevSearchFilters) => ({\n                        ...prevSearchFilters,\n                        prjSource: selectedValue,\n                      }));\n                    }}\n                    style={selectBoxStyle}\n                  >\n                    <option value=\"PPM\">PPM</option>\n                    <option value=\"Projector\">Projector</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-4 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"email-input\">\n                  Status<span style={{ color: \"red\" }}>*</span>\n                </label>\n                <span className=\"col-1\">:</span>\n                <div className=\"col-6\">\n                  <select\n                    id=\"status-select\"\n                    onChange={(event) => {\n                      const selectedValue = event.target.value;\n                      setSelectedProjects([]);\n                      setSelectedProjectIds([]);\n                      setFirstSelProject(\"\");\n                      setInitialProjectSelectChange(true);\n                      setSearchFilters((prevSearchFilters) => ({\n                        ...prevSearchFilters,\n                        prjStatus: selectedValue,\n                      }));\n                    }}\n                    style={selectBoxStyle}\n                  >\n                    <option value=\"\">All</option>\n                    <option value=\"1\" selected>\n                      In progress\n                    </option>\n                    <option value=\"2\">Completed</option>\n                    <option value=\"3\">On hold</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-4 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"country-select\">\n                  Approval Status\n                </label>\n                <span className=\"col-1\">:</span>\n                <div className=\"col-6\">\n                  <MultiSelect\n                    ArrowRenderer={ArrowRenderer}\n                    id=\"appStatus\"\n                    options={appStatusOptions}\n                    value={selectedAppStats}\n                    valueRenderer={generateDropdownLabel}\n                    hasSelectAll={true}\n                    isLoading={false}\n                    shouldToggleOnHover={false}\n                    disableSearch={false}\n                    disabled={false}\n                    onChange={(selected) => {\n                      setSelectedProjects([]);\n                      setSelectedProjectIds([]);\n                      setFirstSelProject(\"\");\n                      setInitialProjectSelectChange(true);\n                      setSelectedAppStats(selected);\n                      const selectedValues = selected.map(\n                        (option) => option.value\n                      );\n                      setSearchFilters((prevSearchFilters) => ({\n                        ...prevSearchFilters,\n                        appStatus: selectedValues,\n                      }));\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-4 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"email-input\">\n                  Month\n                </label>\n                <span className=\"col-1\">:</span>\n                <div className=\"col-6 z-4\">\n                  <DatePicker\n                    selected={startDate}\n                    onChange={handleDateChange}\n                    dateFormat=\"MMM yyyy\"\n                    showMonthYearPicker\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-md-4 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"email-input\">\n                  Period\n                </label>\n                <span className=\"col-1\">:</span>\n                <div className=\"col-6\">\n                  <select\n                    id=\"country-select\"\n                    value={selectedPeriod}\n                    disabled={selectedPeriod == \"653\"}\n                    style={selectBoxStyle}\n                  >\n                    <option\n                      value=\"biweekly\"\n                      disabled={selectedPeriod !== \"biweekly\"}\n                    >\n                      {\" \"}\n                      Biweekly\n                    </option>\n                    <option\n                      value=\"custom\"\n                      disabled={selectedPeriod !== \"custom\"}\n                    >\n                      Custom\n                    </option>\n                    <option value=\"653\" disabled={selectedPeriod !== \"653\"}>\n                      Monthly\n                    </option>\n                    <option\n                      value=\"special1\"\n                      disabled={selectedPeriod !== \"special1\"}\n                    >\n                      Special 1\n                    </option>\n                    <option\n                      value=\"weekly\"\n                      disabled={selectedPeriod !== \"weekly\"}\n                    >\n                      Weekly\n                    </option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-4 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"project_select\">\n                  Project<span style={{ color: \"red\" }}>*</span>\n                </label>\n                <span className=\"col-1\">:</span>\n                <div className=\"col-6\">\n                  <MultiSelect\n                    id=\"project_select\"\n                    ArrowRenderer={ArrowRenderer}\n                    options={projectData}\n                    hasSelectAll={false}\n                    isLoading={false}\n                    shouldToggleOnHover={false}\n                    disableSearch={false}\n                    disabled={false}\n                    value={selectedProjects}\n                    valueRenderer={generateDropdownLabel}\n                    onChange={handleProjectSelectChange}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-md-12 col-sm-12 col-xs-12 no-padding d-flex justify-content-center\">\n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                title=\"Search\"\n                onClick={handleSearch}\n              >\n                <FaSearch /> Search\n              </button>\n            </div>\n          </div>\n        </CCollapse>\n      </div>\n      {loader && <Loader handleAbort={handleAbort} />}\n      {tableDetails && (\n        <>\n          <div className=\"materialReactExpandableTable darkHeader toHead timesheetTable\">\n            <MaterialReactTable\n              enableExpanding\n              // enableStickyHeader\n              enablePagination={false}\n              enableBottomToolbar={false}\n              enableColumnFilterModes={false}\n              enableDensityToggle={false}\n              enableColumnActions={false}\n              enableFilters={false}\n              enableSorting={false}\n              enableFullScreenToggle={false}\n              enableHiding={false}\n              filterFromLeafRows //apply filtering to all rows instead of just parent rows\n              initialState={{\n                expanded: false,\n                density: \"compact\",\n                columnVisibility: { ...hiddenColumns },\n                enablePinning: true,\n              }} //expand all rows by default\n              state={{ columnVisibility: { ...hiddenColumns } }}\n              // defaultColumn={{ minSize: 10, maxSize: 100, size: 10 }} //units are in px\n              localization={{\n                noRecordsToDisplay: (\n                  <span style={{ fontWeight: \"bold\" }}>No records found</span>\n                ),\n              }}\n              columns={columnData}\n              data={projectWiseRows}\n              muiTableContainerProps={{\n                sx: {\n                  maxHeight: projectWiseRows.length === 0 ? \"30vh\" : \"50vh\", // Adjust the maxHeight value as needed\n                  width: \"auto\",\n                  maxWidth: \"fit-content\",\n                  marginBottom: \"10px\",\n                },\n              }}\n              muiTableBodyCellProps={({ row }) => ({\n                sx: {\n                  backgroundColor:\n                    row.original.row_type === \"Billable Tasks\" ||\n                    row.original.row_type === \"Non Billable Tasks\"\n                      ? \"rgba(52, 210, 235, 0.1)\"\n                      : \"white\",\n                  borderRight: \"2px solid #e0e0e0\",\n                  fontSize: \"13px\",\n                  borderTop: \"1px solid #ccc\",\n                  borderRight: \"2px solid #e0e0e0\",\n                  padding: \"2px 8px\",\n                  verticalAlign: \"middle\",\n                  textAlign: \"center\",\n                  fontWeight: 550,\n                },\n              })}\n              muiTableHeadProps={{\n                sx: {\n                  \"&\": {\n                    position: \"sticky\",\n                    top: \"0\",\n                    zIndex: \"5\",\n                  },\n                  \"& th\": {\n                    borderTop: \"1px solid #ccc\",\n                    borderRight: \"2px solid #e0e0e0\",\n                    background: \"#f4f4f4 \",\n                    fontSize: \"13px\",\n                    padding: \"2px 8px\",\n                    verticalAlign: \"middle\",\n                    textAlign: \"center\",\n                  },\n                },\n              }}\n              renderTopToolbarCustomActions={({ table }) => (\n                <div\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\n                >\n                  <Box\n                    sx={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      gap: \"0.1rem\",\n                      p: \"0.1rem\",\n                      flexWrap: \"wrap\",\n                    }}\n                  >\n                    <IconButton\n                      onClick={() => {\n                        handlePrevMonthIcon();\n                      }}\n                    >\n                      <AiFillLeftCircle />\n                    </IconButton>\n                    <b style={{ margin: 0 }}>\n                      {moment(tableDetails?.tsDtls?.startDate).format(\"MMM\")}\n                    </b>\n                    <IconButton\n                      onClick={() => {\n                        handleNextMonthIcon();\n                      }}\n                    >\n                      <AiFillRightCircle />\n                    </IconButton>\n                  </Box>\n                </div>\n              )}\n              renderToolbarInternalActions={({ table }) => (\n                <div\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\n                >\n                  <Box\n                    sx={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      gap: \"0.1rem\",\n                      p: \"0.1rem\",\n                      flexWrap: \"wrap\",\n                    }}\n                  >\n                    <RiFileExcel2Line\n                      size=\"1.5em\"\n                      title=\"Export to Excel\"\n                      style={{ color: \"green\" }}\n                      cursor=\"pointer\"\n                      onClick={handleOnExport}\n                    />\n                  </Box>\n                </div>\n              )}\n            />\n          </div>\n\n          {(dataAccess === 1000 || dataAccess === 250) && (\n            <div\n              className=\"col-md-12 col-sm-12 col-xs-12 no-padding d-flex justify-content-center\"\n              style={{ paddingTop: \"10px\" }}\n            >\n              <button\n                type=\"button\"\n                className=\"btn btn-primary mr-2\"\n                title=\"save\"\n                onClick={handleSave}\n              >\n                <FaSave /> Save\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                title=\"cancel\"\n                onClick={handleCancel}\n              >\n                <ImCross size={\"10px\"} /> Cancel\n              </button>\n            </div>\n          )}\n\n          <div>\n            <Popover\n              className=\"approvalBtns\"\n              open={isPopoverOpen}\n              anchorEl={anchorEl}\n              onClose={() => setPopoverOpen(false)}\n              anchorOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"left\",\n              }}\n            >\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"success\"\n                  size=\"small\"\n                  style={{ fontSize: \"10px\" }}\n                  onClick={() => {\n                    handleApprove();\n                    setPopoverOpen(false);\n                  }}\n                >\n                  Approve &#10004;\n                </Button>\n                <br />\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  size=\"small\"\n                  style={{ fontSize: \"10px\", width: \"82px\" }}\n                  onClick={() => {\n                    handleReject();\n                    setPopoverOpen(false);\n                  }}\n                >\n                  Reject &#10006;\n                </Button>\n              </div>\n            </Popover>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default TMOpen;\n"],"names":["currentDate","Date","startOfMonth","getFullYear","getMonth","useState","isPopoverOpen","setPopoverOpen","cancelClicked","message","setMessage","abortControllerRef","useRef","AbortController","loader","setLoader","tableDetails","setTableDetails","startDate","setStartDate","setEndDate","globalReportRunId","setGlobalReportRunId","visible","setVisible","FaChevronCircleUp","cheveronIcon","setCheveronIcon","projectData","setProjectData","projectIds","setProjectIds","selectedProjects","setSelectedProjects","selectedProjectIds","setSelectedProjectIds","firstSelProject","setFirstSelProject","selectedPeriod","setSelectedPeriod","columnData","setColumnData","isFM","setIsFM","setApprovalStates","initialHiddenColumns","setInitialHiddenColumns","projectWiseRows","setProjectWiseRows","anchorEl","setAnchorEl","clickedCellIds","setClickedCellIds","clickedCellStates","setClickedCellStates","clickedRow","setClickedRow","isPMPrjIds","setIsPMPrjIds","FaChevronCircleRight","setChevronIconHeader","hiddenColumns","setHiddenColumns","approvalIDs","setApprovalIDs","rejectedIDs","setRejectedIDs","weekBasedColExpFlags","setWeekBasedColExpFlags","updatedWeekBasedCols","setUpdatedWeekBasedCols","initialProjectSelectChange","setInitialProjectSelectChange","label","value","disabled","appStatusOptions","selectBoxStyle","width","selectedAppStats","setSelectedAppStats","baseUrl","environment","loggedUserId","localStorage","getItem","routes","setRoutes","prjStates","setPrjStates","prjSource","prjStatus","appStatus","period","searchFilters","setSearchFilters","dataAccess","setDataAccess","useEffect","getProjectByStatus","apiUrl","requestBody","data","selectedvalue","projects","axios","then","response","invoiceCycle","catch","error","console","getInvoicePeriod","defineColumns","defineTableData","defWkBasedFlagsForExpCol","isPMThenPrjIds","isUserFM","updatedPrjStates","forEach","projectRow","newObj","getMenus","getIsContractTermsType","projectId","method","url","resp","log","userId","stDate","moment","format","Response","updatedData","map","obj","id","projectName","rest","projectValues","res","text","updatedWkBasedFlagsForExpCols","tsDtls","tsInfo","columnObj","week_no","push","uniqueSet","Set","JSON","stringify","newUpdatedWkBasedFlagsForExpCols","Array","from","parse","handlePopOver","wkNoOrColDteVal","isWkNoOrColDte","billingStatus","tsDates","find","foundId","isContractTermType","project_id","columns","index","newColumnObject","week_day","format_date","header","muiTableHeadCellProps","sx","textAlign","accessorKey","display_date","enableColumnActions","enableHiding","minSize","maxSize","size","muiTableBodyCellProps","row","backgroundColor","original","row_type","borderRight","fontSize","borderTop","padding","verticalAlign","fontWeight","Cell","cell","onClick","event","currentTarget","colID","rowData","updatedApprIds","updatedCellStates","subRows","resourceRow","billOrNonBillTasks","billOrNonBillRow","getClickedCellDetails","title","getValue","toFixed","columnKey","getAccessorKey","includes","style","display","justifyContent","dangerouslySetInnerHTML","__html","toLocaleString","minimumFractionDigits","maximumFractionDigits","splitHeaderArray","split","foundWeekObject","weekObj","hasOwnProperty","Header","column","className","updateHiddenColumns","weekNum","level","updatedWeekBasedColStates","element","replace","getClickedCellWkDetails","updatedWeekBasedColumns","reduce","result","item","updatedInitialHiddenCols","rowObjectsArray","groupedRowObjects","acc","groupedRowsByProject","updatedApprovalStates","tsStates","e","approvalObj","name","updatedProjectWiseRows","arrayOfRowObjects","mainRow","isStateEnable","prjInvoiceAmount","type","onChange","isChecked","target","checked","prevPrjStates","invOldAmt","handleInvoiceSelect","approvals","handleOnChangeForSelect","selectedOption","state","option","defaultValue","selected","hidden","resourceRows","filter","billableTasks","nonBillableTasks","billableRows","nonBillableRows","resourceBillableTasks","task","resource_id","resourceNonBillableTasks","slice","resourceBillableRows","resourceNonBillableRows","weekNo","columnsByWeekNo","weekBasedColumns","prevHiddenColumns","updatedHiddenCols","prevIcon","FaChevronCircleLeft","prevState","display_name","TMExpensesSubMenu","subMenus","subMenu","accessLevel","access_level","savePtjTsReportRuns","requestData","filterName","toString","UserId","signal","current","reportRunId","month","calculatedEndDate","endOf","getPrjTeamTimesheet","endDate","abort","FaChevronCircleDown","handleSave","postData","Approved","Rejected","setTimeout","updateStatus","nestedRows","statusCode","stateId","params","source","handleOnExport","resourcesData","headerRow","updatedRowData","newArray","headerAssocialtedVal","taskRow","headerAssociatedValue","headerAssociatedValueTemp","DOMParser","parseFromString","body","textContent","getHeaderValueForExcel","workbook","ExcelJS","worksheet","addWorksheet","updatedHeaderRow","addRow","getRow","font","bold","xlsx","writeBuffer","buffer","saveAs","Blob","ArrowRenderer","expanded","generateDropdownLabel","selectedOptions","allOptions","selectedValues","allValues","length","join","ScreenBreadcrumbs","currentScreenName","GlobalHelp","pdfname","htmlFor","color","selectedValue","prevSearchFilters","options","valueRenderer","hasSelectAll","isLoading","shouldToggleOnHover","disableSearch","selectedDate","dateFormat","showMonthYearPicker","selectedProjIds","window","scrollTo","top","behavior","Loader","handleAbort","enableExpanding","enablePagination","enableBottomToolbar","enableColumnFilterModes","enableDensityToggle","enableFilters","enableSorting","enableFullScreenToggle","filterFromLeafRows","initialState","density","columnVisibility","enablePinning","localization","noRecordsToDisplay","muiTableContainerProps","maxHeight","maxWidth","marginBottom","muiTableHeadProps","position","zIndex","background","renderTopToolbarCustomActions","table","Box","alignItems","gap","p","flexWrap","IconButton","currentStDte","prevStDate","subtract","prevEdDate","handlePrevMonthIcon","margin","nextStDate","add","nextEdDate","handleNextMonthIcon","renderToolbarInternalActions","cursor","paddingTop","currStDte","currEdDate","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Button","variant","updatedRejectedIDs","prevIds","existingIds","uniqueClickedCellIds","has","handleApprove","updatedApprovalIDs","handleReject"],"sourceRoot":""}