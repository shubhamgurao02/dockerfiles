{"version":3,"file":"static/js/714.3787896c.chunk.js","mappings":"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","sources":["views/FullfimentComponent/ResourceForcastSupply.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport {\n  FaChevronCircleDown,\n  FaChevronCircleUp,\n  FaSearch,\n  FaCheck,\n} from \"react-icons/fa\";\nimport { CCollapse } from \"@coreui/react\";\nimport { MultiSelect } from \"react-multi-select-component\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { environment } from \"../../environments/environment\";\nimport SelectCustDialogBox from \"../Customer/SelectCustDialogBox\";\n\nfunction ResourceForcastSupply() {\n  const [startDate, setStartDate] = useState(new Date());\n  const [visible, setVisible] = useState(false);\n  const [cheveronIcon, setCheveronIcon] = useState(FaChevronCircleUp);\n  const [country, setCountry] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState([]);\n  const [action, setAction] = useState(\"view\");\n  const [searchtype, setSearchtype] = useState(\"customer\");\n  const [customer, setCustomer] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([]);\n  const ref = useRef([]);\n\n  const [dp, setDp] = useState([]);\n  const [selectedDp, setSelectedDp] = useState([]);\n  const [csl, setCsl] = useState([]);\n\n  const [customerIds, setCustomerIds] = useState(-1);\n  const [custVisible, setCustVisible] = useState(false);\n  const selectedCust = JSON.parse(localStorage.getItem(\"selectedCust\"))\n    ?.map((d) => d.id)\n    ?.toString();\n  let flag = 1;\n\n  const baseUrl = environment.baseUrl;\n\n  const defaultDate = () => {\n    const now = new Date();\n    const quarter = Math.floor(now.getMonth() / 3);\n    const firstDate = new Date(now.getFullYear(), quarter * 3, 1);\n    return firstDate.toLocaleDateString(\"en-CA\");\n  };\n\n  const [formData, setFormData] = useState({\n    month: moment(defaultDate()).format(\"yyyy-MM-DD\"),\n    actType: \"-1\",\n    duration: \"3\",\n    countries: \"-1\",\n    searchType: \"-1\",\n    customers: \"oppt\",\n  });\n\n  const getCountries = () => {\n    axios\n      .get(baseUrl + `/CostMS/cost/getCountries`)\n      .then((Response) => {\n        let countries = [];\n        let data = Response.data;\n        //console.log(data);\n        data.push({ id: 0, country_name: \"Others\" });\n        data.length > 0 &&\n          data.forEach((e) => {\n            let countryObj = {\n              label: e.country_name,\n              value: e.id,\n            };\n            e.country_name == \"NM\" ? \"\" : countries.push(countryObj);\n          });\n        setCountry(countries);\n        if (id == null) {\n          setSelectedCountry(countries);\n        }\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const handleCsl = () => {\n    const loggedUser = \"0\";\n    axios({\n      method: \"get\",\n      url:\n        baseUrl +\n        `/SalesMS/MasterController/getCslDropDownData?userId=${loggedUser}`,\n    }).then((res) => {\n      let custom = [];\n\n      let data = res.data;\n      data?.length > 0 &&\n        data.forEach((e) => {\n          let cslObj = {\n            label: e.PersonName,\n            value: e.id,\n          };\n          custom.push(cslObj);\n        });\n      console.log(custom, \"CSL\");\n      setCsl(custom);\n      // setSelectedCsl(custom);\n      setFormData((prevVal) => ({\n        ...prevVal,\n        [\"csl\"]: custom,\n      }));\n    });\n  };\n\n  const handleDp = () => {\n    const loggedUser = \"0\";\n    axios({\n      method: \"get\",\n      url: baseUrl + `/CommonMS/master/getDPDropDownData?userId=${loggedUser}`,\n    }).then((res) => {\n      let custom = [];\n\n      let data = res.data;\n      data?.length > 0 &&\n        data.forEach((e) => {\n          let dpObj = {\n            label: e.PersonName,\n            value: e.id,\n          };\n          custom.push(dpObj);\n        });\n\n      setDp(custom);\n      setSelectedDp(custom);\n\n      setFormData((prevVal) => ({\n        ...prevVal,\n        [\"Dp\"]: custom,\n      }));\n    });\n  };\n\n  const getCustomerData = () => {\n    axios\n      .get(`${baseUrl}/CommonMS/master/geActiveCustomerList`)\n      .then((response) => {\n        const data = response.data;\n        const customers = data.map((e) => ({\n          label: e.fullName,\n          value: e.id,\n        }));\n        setCustomer(customers);\n      })\n      .catch((error) => {});\n  };\n\n  useEffect(() => {\n    getCountries();\n    getCustomerData();\n  }, []);\n\n  const handleChange1 = (e) => {\n    const { id, name, value } = e.target;\n    if (name == \"custIds\" && value === \"0\") {\n      setCustomerIds(value);\n    }\n    if (name == \"custIds\" && value === \"1\") {\n      setCustomerIds(value);\n    }\n    if (name == \"custIds\" && value === \"select\") {\n      setCustomerIds(selectedCust);\n      setCustVisible(true);\n    }\n    setFormData((prev) => {\n      return { ...prev, [name]: value };\n    });\n  };\n\n  const handleActionChange = (e) => {\n    setAction(e.target.value);\n  };\n\n  const ArrowRenderer = ({ expanded }) => (\n    <FaCaretDown className=\"chevronIcon\" />\n  );\n\n  const handleSearchTypeChange = (e) => {\n    setSearchtype(e.target.value);\n  };\n\n  return (\n    <div>\n      <div className=\"col-md-12\">\n        <div className=\"pageTitle\">\n          <div className=\"childOne\"></div>\n          <div className=\"childTwo\">\n            <h2>Resource Forecast/Supply</h2>\n          </div>\n          <div className=\"childThree\"></div>\n        </div>\n      </div>\n      <div className=\"group mb-3 customCard\">\n        <div className=\"col-md-12 collapseHeader\">\n          <h2>Search Filters</h2>\n\n          <div\n            onClick={() => {\n              setVisible(!visible);\n\n              visible\n                ? setCheveronIcon(FaChevronCircleUp)\n                : setCheveronIcon(FaChevronCircleDown);\n            }}>\n            <span>{cheveronIcon}</span>\n          </div>\n        </div>\n        <CCollapse visible={!visible}>\n          <div className=\"group-content row\">\n            <div className=\"col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"customers\">\n                  Action\n                  <span className=\"required\" style={{ color: \"red\" }}>\n                    *\n                  </span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <select\n                    className=\"form-control\"\n                    id=\"action\"\n                    value={action}\n                    onChange={handleActionChange}>\n                    <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                    <option value=\"view\" selected>\n                      Supply&Demand View\n                    </option>\n                    <option value=\"supplyEdit\">Supply Edit</option>\n                    <option value=\"demandEdit\">Demand Add/Edit</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            {action === \"view\" ? (\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"FromQuarter\">\n                    From Quarter\n                    <span className=\"required\" style={{ color: \"red\" }}>\n                      *\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\" style={{ height: \"23px\" }}>\n                    <DatePicker\n                      selected={startDate}\n                      onChange={(e) => {\n                        setStartDate(e);\n                        const date = new Date(e.getTime());\n                        const fiscalYear =\n                          date.getMonth() < 3\n                            ? date.getFullYear() - 1\n                            : date.getFullYear();\n                        const quarter = Math.floor(date.getMonth() / 3) + 1;\n                        const formattedDate = `FY ${fiscalYear}-Q${quarter}`;\n                        onFilterChange({\n                          id: \"from\",\n                          value: formattedDate,\n                        });\n                      }}\n                      dateFormat=\"yyyy-QQQ\"\n                      showQuarterYearPicker\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"FromQuarter\">\n                    Start Month\n                    <span className=\"required\" style={{ color: \"red\" }}>\n                      *\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\" style={{ height: \"23px\" }}>\n                    <DatePicker\n                      name=\"month\"\n                      id=\"StartDt\"\n                      selected={startDate}\n                      onChange={(date) => setMonth(date)}\n                      dateFormat=\"MMM-yyyy\"\n                      showMonthYearPicker\n                      placeholderText=\"Select Month\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n            {action === \"view\" && (\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"duration\">\n                    Duration\n                    <span className=\"required\" style={{ color: \"red\" }}>\n                      *\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\">\n                    <select\n                      className=\"text\"\n                      id=\"duration\"\n                      value={formData.duration}\n                      onChange={(e) => {\n                        const { value, id } = e.target;\n                        setFormData({ ...formData, [id]: value });\n                      }}>\n                      <option value=\"\">&lt;&lt;Please Select&gt;&gt;</option>\n                      <option value=\"1\" selected>\n                        1\n                      </option>\n                      <option value=\"2\">2</option>\n                      <option value=\"3\">3</option>\n                      <option value=\"4\">4</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {action === \"supplyEdit\" || action === \"demandEdit\" ? (\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"duration\">\n                    Duration\n                    <span className=\"required\" style={{ color: \"red\" }}>\n                      *\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\">\n                    <select\n                      className=\"text\"\n                      id=\"duration\"\n                      value={formData.duration}\n                      onChange={(e) => {\n                        const { value, id } = e.target;\n                        setFormData({ ...formData, [id]: value });\n                      }}>\n                      <option value=\"\">&lt;&lt;Please Select&gt;&gt;</option>\n                      <option value=\"1\">1</option>\n                      <option value=\"2\">2</option>\n                      <option value=\"3\" selected>\n                        3\n                      </option>\n                      <option value=\"4\">4</option>\n                      <option value=\"5\">5</option>\n                      <option value=\"6\">6</option>\n                      <option value=\"7\">7</option>\n                      <option value=\"8\">8</option>\n                      <option value=\"9\">9</option>\n                      <option value=\"10\">10</option>\n                      <option value=\"11\">11</option>\n                      <option value=\"12\">12 </option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            ) : null}\n\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"countries\">\n                  Country\n                  <span className=\"required\" style={{ color: \"red\" }}>\n                    *\n                  </span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <MultiSelect\n                    id=\"countries\"\n                    options={country}\n                    hasSelectAll={true}\n                    value={selectedCountry}\n                    isLoading={false}\n                    shouldToggleOnHover={false}\n                    disableSearch={false}\n                    disabled={false}\n                    overrideStrings={{\n                      selectAllFiltered: \"Select All\",\n                      selectSomeItems: \"<< All>>\",\n                    }}\n                    onChange={(e) => {\n                      setSelectedCountry(e);\n                      let filteredCountry = [];\n                      e.forEach((d) => {\n                        filteredCountry.push(d.value);\n                      });\n                      setFormData((prevVal) => ({\n                        ...prevVal,\n                        [\"countries\"]: filteredCountry.toString(),\n                      }));\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"serachType\">\n                  Search Type\n                  <span className=\"required\" style={{ color: \"red\" }}>\n                    *\n                  </span>\n                </label>\n                <span className=\"col-1 p-0\">:</span>\n                <div className=\"col-6\">\n                  <select\n                    className=\"form-control\"\n                    id=\"action\"\n                    value={searchtype}\n                    onChange={handleSearchTypeChange}>\n                    <option value=\"\"> &lt;&lt;Please Select&gt;&gt;</option>\n                    <option value=\"customer\" selected>\n                      Customer/Prospect\n                    </option>\n                    <option value=\"csl\">CSL</option>\n                    <option value=\"dp\">Delivery Partner</option>\n                  </select>{\" \"}\n                </div>\n              </div>\n            </div>\n\n            {searchtype === \"csl\" ? (\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"Dropdown2\">\n                    CSL&nbsp;\n                    <span className=\"required\" style={{ color: \"red\" }}>\n                      *\n                    </span>\n                  </label>\n                  <span className=\"col-1\">:</span>\n                  <div\n                    className=\"col-6 multiselect\"\n                    ref={(ele) => {\n                      ref.current[4] = ele;\n                    }}>\n                    <MultiSelect\n                      ArrowRenderer={ArrowRenderer}\n                      id=\"csl\"\n                      options={csl}\n                      hasSelectAll={true}\n                      value={formData.csl}\n                      shouldToggleOnHover={false}\n                      disableSearch={false}\n                      disabled={false}\n                      onChange={(e) => {\n                        setFormData((prevVal) => ({\n                          ...prevVal,\n                          [\"csl\"]: e,\n                        }));\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : null}\n\n            <div className=\" col-md-3 mb-2\">\n              <div className=\"form-group row\">\n                <label className=\"col-5\" htmlFor=\"customers\">\n                  Customer&nbsp;\n                  <span className=\"required\" style={{ color: \"red\" }}>\n                    *\n                  </span>\n                </label>\n                <span className=\"col-1\">:</span>\n                <div className=\"col-6\">\n                  <select\n                    className=\"text cancel\"\n                    name=\"custIds\"\n                    id=\"searchType\"\n                    onChange={handleChange1}\n                    ref={(ele) => {\n                      ref.current[4] = ele;\n                    }}>\n                    {selectedItems.length + \"selected\"}\n                    <option value=\"-1\">&lt;&lt;All&gt;&gt;</option>\n                    <option value=\"0\">Active Customers</option>\n                    <option value=\"select\">Select</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            {action === \"view\" ? (\n              <div className=\" col-md-3 mb-2\">\n                <div className=\"form-group row\">\n                  <label className=\"col-5\" htmlFor=\"customer\">\n                    View By\n                    <span className=\"required\" style={{ color: \"red\" }}>\n                      *\n                    </span>\n                  </label>\n                  <span className=\"col-1 p-0\">:</span>\n                  <div className=\"col-6\">\n                    <select className=\"form-control\" id=\"customer\">\n                      <option value=\"country\">Country</option>\n                      <option value=\"customer\">Customer</option>\n                      <option value=\"csl\">CSL</option>\n                      <option value=\"dp\">DP</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            ) : null}\n\n            <div className=\"col-md-12 col-sm-12 col-xs-12 btn-container center my-3 mb-2\">\n              <button className=\"btn btn-primary \">Search</button>\n            </div>\n          </div>\n        </CCollapse>\n      </div>\n      <SelectCustDialogBox\n        flag={flag}\n        variance={1}\n        visible={custVisible}\n        setVisible={setCustVisible}\n        setSelectedItems={setSelectedItems}\n        selectedItems={selectedItems}\n      />\n    </div>\n  );\n}\n\nexport default ResourceForcastSupply;\n"],"names":["useState","Date","startDate","setStartDate","visible","setVisible","FaChevronCircleUp","cheveronIcon","setCheveronIcon","country","setCountry","selectedCountry","setSelectedCountry","action","setAction","searchtype","setSearchtype","setCustomer","selectedItems","setSelectedItems","ref","useRef","csl","setCustomerIds","custVisible","setCustVisible","selectedCust","JSON","parse","localStorage","getItem","map","d","id","toString","baseUrl","environment","month","moment","now","quarter","Math","floor","getMonth","getFullYear","toLocaleDateString","defaultDate","format","actType","duration","countries","searchType","customers","formData","setFormData","useEffect","axios","then","Response","data","push","country_name","length","forEach","e","countryObj","label","value","catch","error","console","log","response","fullName","className","onClick","FaChevronCircleDown","htmlFor","style","color","onChange","target","selected","height","date","getTime","fiscalYear","formattedDate","onFilterChange","dateFormat","showQuarterYearPicker","name","setMonth","showMonthYearPicker","placeholderText","options","hasSelectAll","isLoading","shouldToggleOnHover","disableSearch","disabled","overrideStrings","selectAllFiltered","selectSomeItems","filteredCountry","prevVal","ele","current","ArrowRenderer","expanded","FaCaretDown","prev","flag","variance"],"sourceRoot":""}