################################For Integration Runtime ###############################
name: omstest
barURL:
  - https://dev.azure.com/RL-Integration/ACE/_apis/build/builds/8752/artifacts?artifactName=output&fileId=B38F4C6EBB4FFBD38D4ED69153EFEA0A26AFBB0B8C2B32D22B64E0A0EFF923F501&fileName=dev-omsrleu-ordercreateapp.bar&api-version=7.1-preview.5

namespace: ace-apac  #no need throgh cli only
configurations:
  - oms-policy-project
  - oms-serverconf
  - azureartifacts-barauth
  - application.kdb
  - application.sth

productName: "IBM App Connect Enterprise for non-production"
productID: ""
productChargedContainers: "All"
productMetric: "VIRTUAL_PROCESSOR_CORE"
productCloudpakRatio: "2:3"
cloudpakName: "IBM Cloud Pak for Integration"
cloudpakId: ""

license: L-QECF-MBXVLU 
use: CloudPakForIntegrationNonProduction

limits:
  cpu: 500m
  memory: 2000Mi
requests:
    cpu: 100m
    memory: 500Mi

replicas: 1
router:
  timeout: 120ms
service:
  endpointType: http
  type: ClusterIP
version: '12.0.12.0-r1'


################################For azureartifacts-barauth #############################
barauthname: azureartifacts-barauth
barauthnamespace: ace-apac

barauthdata: eyJhdXRoVHlwZSI6IkJBU0lDX0FVVEgiLCJjcmVkZW50aWFscyI6eyJ1c2VybmFtZSI6InNndXJhbyIsInBhc3N3b3JkIjoiN2xydXc0aGlnbWdtaXdnc3N0c2RweWd5bGlibXR2dWNlZmtnMnp1Y3BybWR3eWcyc3NmcSIgfX0=
  


################################# For Truststore #######################################
truststorename: oms-truststore.jks   ##no need
truststoredata: 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



################################# For policy project ####################################

policyprojectname: oms-policy-project
#policyprojectnamespace: ace-apac
policyprojectdata: UEsDBBQAAAAIAOBAtViR48gdlwAAAPoAAAAhAAAARGVmYXVsdFBvbGljaWVzL3BvbGljeS5kZXNjcmlwdG9yjY7BCsIwEETvgv8Q9m6inqQ09lI8e9APaNOtRpLdkg1i/96IIHgRzzPz5tXNIwZ1xySeycJGr0EhOR48XSycT4fVDpTkjoYuMKGFGQWa/XJRk2yriYN38zHxDV1uUVzyU+akCpPEwjXnqTLGcdS+jxozcxAdx6yHT1f3nSC8F1Vh/rn6eobio1SdcMRU5FHMS9D8MCz5E1BLAwQUAAAACABwNbdYdFOoHFYBAAB+AgAAJgAAAERlZmF1bHRQb2xpY2llcy9STE1RRW5kcG9pbnQucG9saWN5eG1sfVJRb4IwEH438T8Q3qFi3OJDxTBkwQSdCnsmtVy0SSm1FDP//YqwhE2zp+t993139+WKl18lt66galaJhe25E9sCQauCidPC/szenbm99McjLCvOKIPavC2ry25WF7KbhIW92UeikBUT2u7xLSkNfkgeKxmUkhP9W9VOoZUQQLXZxQ+TdbTNMBpAhlBArZkgbbpvoIENEeQEqh3lB2EU7FYTD6P/WKbJZYDFVa1FixMKRBYTz2HH0ikvbnlxiCTUra/UpbypNSiXV5RwjJ7qTV/ODEuA2lVKb5vyCMr3Zt4MoyeF1uyZGGv8Z/cwTozbAWYoNdBGMX1bFyC0iT5GD5ChNTWkaeJr1QBGfWJgE3bQ28ZomHXFkMkzqFQC9aNwFUf5IQ3yIEpzbzrPw7cwT+Ng+vJ6lw64RqygP8uHvF8GBDlyKDD6W7j/FtRdvRWiwT8aj74BUEsBAhQAFAAAAAgA4EC1WJHjyB2XAAAA+gAAACEAAAAAAAAAAQAgAAAAAAAAAERlZmF1bHRQb2xpY2llcy9wb2xpY3kuZGVzY3JpcHRvclBLAQIUABQAAAAIAHA1t1h0U6gcVgEAAH4CAAAmAAAAAAAAAAEAIAAAANYAAABEZWZhdWx0UG9saWNpZXMvUkxNUUVuZHBvaW50LnBvbGljeXhtbFBLBQYAAAAAAgACAKMAAABwAgAAAAA=



################################# For key store #########################################

keystorename: oms-keystore.jks
keystoredata: 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


################################# For server conf #######################################
serverconfname: oms-serverconf ###is name  no need
serverconfdata:  


########################################################################################