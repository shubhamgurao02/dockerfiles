---
apiVersion: appconnect.ibm.com/v1beta1
kind: Configuration
metadata:
  name: oms-serverconf
  namespace: ace-apac
spec:
  data: LS0tDQojIEFDRSBJbnRlZ3JhdGlvbiBTZXJ2ZXIgY29uZmlndXJhdGlvbiBmaWxlDQojDQojIEdlbmVyYWwgbm90ZXMgOg0KIyAgLSBJbnRlZ3JhdGlvbiBTZXJ2ZXIgd2lsbCBsb2FkIHNlcnZlci5jb25mLnlhbWwgZnJvbSBkaXJlY3Rvcnkgc2V0IHZpYSAtLXdvcmstZGlyDQojICAtIFRvIGVuc3VyZSB2YWxpZCBZQU1MIGF2b2lkIGFueSB1c2Ugb2YgVEFCIGNoYXJhY3RlcnMNCiMgIC0gRmlsZSBwYXRocyBtYXkgYmUgdGFrZW4gYXMgYWJzb2x1dGUsIG9yIHJlbGF0aXZlIHRvIHRoZSBpbnRlZ3JhdGlvbiBzZXJ2ZXIncyB3b3JrIGRpcmVjdG9yeQ0KIw0KIyBXQVJOSU5HOiBBbnkgdmFsdWUgc3BlY2lmaWVkIGluIHRoZSAnb3ZlcnJpZGVzL3NlcnZlci5jb25mLnlhbWwnIHdpbGwgb3ZlcnJpZGUgdmFsdWVzIGhlcmUNCiMNCnNlcnZlckNvbmZWZXJzaW9uOiAxDQoNCiNsaWxQYXRoOiAnL29wdC9pYm0vU3RhbmRhcmRzUHJvY2Vzc2luZ0VuZ2luZTEwLjAuMS9JSUIvcnVudGltZS9saWwnICAgICAgICAgICAgICAgICAjIEEgbGlzdCBvZiBwYXRocyBmcm9tIHdoZXJlIFVzZXItZGVmaW5lZCBub2RlIExJTC9KQVIgZmlsZXMgYXJlIGxvYWRlZC4gKG11bHRpcGxlIGRpcmVjdG9yaWVzIGFyZSBzZXBhcmF0ZWQgYnkgcGxhdGZvcm0gcGF0aCBzZXBhcmF0b3IpDQoNCiNkZXBsb3lNb2RlOiAncmVwbGFjZScgICAgICAgIyBEZXBsb3kgbW9kZTogcmVwbGFjZSB8IG5vbmUgfCBtYW51YWwNCiNzY2FuRm9yS2V5d29yZHM6ICcnICAgICAgICAgIyBBIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIGZpbGUgdHlwZXMsIHNlbGVjdGVkIGZyb20NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBbZXNxbCwgeHNsLCB4c2x0XSwgdG8gc2NhbiBmb3Iga2V5d29yZHMuDQoNCiMgVGhlIHJlbW90ZURlZmF1bHRRdWV1ZU1hbmFnZXIgYW5kIGRlZmF1bHRRdWV1ZU1hbmFnZXIgcHJvcGVydGllcyBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLiBPbmx5IHVuY29tbWVudCBvbmUgb2YgdGhlc2UgdHdvIG9wdGlvbnMuDQojZGVmYXVsdFF1ZXVlTWFuYWdlcjogJ0lJQkExSEQwMScgICAgICAgICMgU2V0IG5vbi1lbXB0eSBzdHJpbmcgdG8gc3BlY2lmeSBhIGRlZmF1bHQgcXVldWUgbWFuYWdlcg0KI21xVHJ1c3RlZFF1ZXVlTWFuYWdlcjogJ25vJyAgICAjIFNldCB0byB5ZXMgdG8gZW5hYmxlIE1RIGNvbW11bmljYXRpb24gYXMgYSB0cnVzdGVkIChmYXN0cGF0aCkgYXBwbGljYXRpb24gKGRvZXMgbm90IGFwcGx5IHRvIHJlbW90ZSBRTSkNCg0KI3JlbW90ZURlZmF1bHRRdWV1ZU1hbmFnZXI6ICd7RGVmYXVsdFBvbGljaWVzfTpSTE1RRW5kcG9pbnQnICAjIFNwZWNpZnkgYW4gTVFFbmRwb2ludCBwb2xpY3kgaW4gdGhlIGZvcm1hdCB7cG9saWN5IHByb2plY3R9OnBvbGljeQ0KI3JlcGxhY2VtZW50UXVldWVQcmVmaXg6ICdNWVBSRUZJWCcgIyBXaGVuIHVzaW5nIGEgcmVtb3RlRGVmYXVsdFF1ZXVlTWFuYWdlciwgdXNlIHRoaXMgcHJlZml4IHRvIGVuYWJsZSB0aGUgc2FtZSBxdWV1ZSBtYW5hZ2VyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHRvIGJlIHVzZWQgZm9yIG11bHRpcGxlIHNlcGFyYXRlIGludGVncmF0aW9uIHNlcnZlcnMuIFRoZSBwcmVmaXggcmVwbGFjZXMgdGhlICJTWVNURU0uQlJPS0VSLiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgc2VjdGlvbiBvZiB0aGUgcXVldWUgbmFtZS4NCg0KdHJhY2U6ICdub25lJyAgICAgICAgICAgICAgICMgY2hvb3NlIDEgb2YgOiBub25lfGRlYnVnfGRpYWdub3N0aWMNCnRyYWNlU2l6ZTogJzFHJyAgICAgICAgICAgICAjIFNldCB0aGUgc2VydmljZSB0cmFjZSBzaXplDQoNCnRyYWNlTm9kZUxldmVsOiB0cnVlICAgICAgICAjIEVuYWJsZSBvciBkaXNhYmxlIG1lc3NhZ2UgZmxvdyAnVHJhY2Ugbm9kZXMnDQoNCnVzZXJUcmFjZTogJ25vbmUnICAgICAgICAgICAjIGNob29zZSAxIG9mIDogbm9uZXxkZWJ1Z3xkaWFnbm9zdGljDQp1c2VyVHJhY2VTaXplOiAnMUcnICAgICAgICAgIyBTZXQgdGhlIHNlcnZpY2UgdHJhY2Ugc2l6ZQ0KDQojZm9yY2VTZXJ2ZXJIVFRQOiAgICAgICAgICAgICAgIGZhbHNlICAjIFNldCB0cnVlIHRvIG92ZXJyaWRlIGFuZCBmb3JjZSB1bnNlY3VyZWQgSFRUUCBvbiBhbGwgSFRUUC9TT0FQIGlucHV0IG5vZGVzIGRlcGxveWVkIGluIHRoaXMgc2VydmVyLiBEZWZhdWx0cyB0byBmYWxzZS4NCiNmb3JjZVNlcnZlckhUVFBTOiAgICAgICAgICAgICAgZmFsc2UgICMgU2V0IHRydWUgdG8gb3ZlcnJpZGUgYW5kIGZvcmNlIHNlY3VyZWQgSFRUUFMgb24gYWxsIEhUVFAvU09BUCBpbnB1dCBub2RlcyBkZXBsb3llZCBpbiB0aGlzIHNlcnZlci4gRGVmYXVsdHMgdG8gZmFsc2UuDQojZm9yY2VTZXJ2ZXJIVFRQU2VjdXJpdHlQcm9maWxlOiAnJyAgICAjIFNldCBhIHNlY3VyaXR5IHByb2ZpbGUsIHs8cG9saWN5IHByb2plY3QgbmFtZT59OjxzZWN1cml0eSBwcm9maWxlIGJhc2VuYW1lPiwgdG8gb3ZlcnJpZGUgYW5kIGZvcmNlIGFsbCBIVFRQL1NPQVAgdHJhbnNwb3J0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGlucHV0IG5vZGVzIGRlcGxveWVkIGluIHRoaXMgc2VydmVyIHRvIGFwcGx5IHRoZSBzZWN1cml0eSBzZXQgaW4gdGhlIHByb2ZpbGUuIERlZmF1bHQgaXMgdW5zZXQsIHNvIGZsb3cgb3Igbm9kZSBzZXR0aW5nIGFwcGxpZXMNCg0KTG9nOg0KICBjb25zb2xlTG9nOiB0cnVlICAgICAgICAgICMgQ29udHJvbCB3cml0aW5nIEJJUCBtZXNzYWdlcyB0byBzdGFuZGFyZCBvdXQuIFNldCB0byB0cnVlIG9yIGZhbHNlLCBkZWZhdWx0IGlzIHRydWUuDQogICNvdXRwdXRGb3JtYXQ6ICd0ZXh0JyAgICAgICMgQ29udHJvbCB0aGUgZm9ybWF0IG9mIEJJUCBtZXNzYWdlcyB3cml0dGVuIHRvIHN0YW5kYXJkIG91dCBhbmQgZmlsZS4gU2V0IHRvIGlibWpzb24gb3IgdGV4dCwgZGVmYXVsdCBpcyB0ZXh0Lg0KICAjZXZlbnRMb2c6ICdbaWliLnN5c3RlbS13b3JrLWRpcl0vbG9nL1tpaWIuc3lzdGVtLW5vZGUtbGFiZWxdLltpaWIuc3lzdGVtLXNlcnZlci1sYWJlbF0uZXZlbnRzLnR4dCcgICAgICMgQ29udHJvbCB3cml0aW5nIEJJUCBtZXNzYWdlcyB0byBmaWxlLiBTZXQgdG8gJycgdG8gZGlzYWJsZSwgZGVmYXVsdCBpcyBhcyBzaG93bi4NCiAgI2V2ZW50TG9nRmlsZVNpemU6IDEwICAgICAgIyBUaGUgbWF4aW11bSBzaXplIGluIE1CIG9mIGFuIGV2ZW50IGxvZyBmaWxlIGJlZm9yZSBpdCBpcyByb3RhdGVkIGludG8gYSBuZXcgZmlsZQ0KICAjZXZlbnRMb2dGaWxlQ291bnQ6IDEwICAgICAjIFRoZSBtYXhpbXVtIG51bWJlciBvZiBldmVudCBsb2cgZmlsZXMgdGhhdCBzaG91bGQgYmUgcm90YXRlZCBiZXR3ZWVuLg0KICBlbGtMb2c6IHRydWUgICAgICAgICAgICAgIyBDb250cm9sIHRoZSBwdWJsaWNhdGlvbiBvZiBCSVAgbWVzc2FnZXMgdG8gYW4gRUxLIChFbGFzdGljc2VhcmNoLCBMb2dzdGFzaCwgS2liYW5hKSBzdGFjay4gU2V0IHRvIHRydWUgb3IgZmFsc2UsIGRlZmF1bHQgaXMgZmFsc2UuDQogIGVsa0Nvbm5lY3Rpb25zOiAnZWxrQ29ubmVjdGlvbjEnICAgICAgICAjIE5hbWUgb2YgdGhlIEVMSyBjb25uZWN0aW9uIHRvIHVzZSwgZm9yIGV4YW1wbGUgJ2Vsa0Nvbm5lY3Rpb24xJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEVhY2ggbmFtZWQgRUxLIENvbm5lY3Rpb24gbXVzdCBiZSBkZWZpbmVkIGluIHRoZSBFTEtDb25uZWN0aW9ucyBzZWN0aW9uIGJlbG93Lg0KDQpSZXN0QWRtaW5MaXN0ZW5lcjoNCiAgcG9ydDogNzYwMCAgICAgICAgICAgICAgICAjIFNldCB0aGUgQWRtaW4gUkVTVCBBUEkgUG9ydCBmb3IgQUNFIFdlYiBVSSBhbmQgVG9vbGtpdCBvciAtMSB0byBkaXNhYmxlLiBEZWZhdWx0cyB0byA3NjAwLg0KDQogICMgTm90ZSB0aGUgQWRtaW4gUkVTVCBBUEkgd2lsbCBiZSBpbnNlY3VyZSB3aXRob3V0IHRoZSBmb2xsb3dpbmcgYmVpbmcgc2V0DQogICNob3N0OiAnbG9jYWxob3N0JyAgICAgICAgICMgU2V0IHRoZSBob3N0bmFtZSBvdGhlcndpc2Ugd2UgYmluZCB0byB0aGUgdW5zcGVjaWZpZWQgYWRkcmVzcw0KDQogICMgU1NMIFNlcnZlciBhdXRoDQogICNzc2xDZXJ0aWZpY2F0ZTogJy9wYXRoL3RvL3NlcnZlclBLQ1MucDEyJyAgIyBTZWUgY29tbWVudCBiZWxvdw0KICAjc3NsUGFzc3dvcmQ6ICdhZG1pblJlc3RBcGk6OnNzbHB3ZCcgICAgICAgICMgU2VlIGNvbW1lbnQgYmVsb3cNCg0KICAjIElmIHVzaW5nIGEgcGVtIGNlcnRpZmljYXRlOg0KICAgICMgc3NsQ2VydGlmaWNhdGUgaXMgdGhlIGZ1bGwgcGF0aCB0byB0aGUgc2VydmVyIGNlcnRpZmljYXRlIGtleQ0KICAgICMgc3NsUGFzc3dvcmQgaXMgdGhlIGZ1bGwgcGF0aCB0byB0aGUgc2VydmVyIHByaXZhdGUga2V5LCB3aGljaCBtdXN0IGJlIGEgc3RhbmRhcmQgcHJpdmF0ZSBrZXkgYW5kIG5vdCBhbiBlbmNyeXB0ZWQgb25lDQogICAgIyBUaGUgZmlsZSBuYW1lcyBtdXN0IGVuZCB3aXRoICcucGVtJw0KICAjIElmIHVzaW5nIHAxMi9wZnggY2VydGlmaWNhdGU6DQogICAgIyBzc2xDZXJ0aWZpY2F0ZSBpcyB0aGUgZnVsbCBwYXRoIHRvIHRoZSBzZXJ2ZXIgY2VydGlmaWNhdGUgc3RvcmUgZmlsZQ0KICAgICMgc3NsUGFzc3dvcmQgaXMgdGhlIHBhc3NwaHJhc2Ugb3IgYWxpYXMgdG8gdGhlIHBhc3NwaHJhc2Ugb2YgdGhlIGNlcnRpZmljYXRlIHN0b3JlDQoNCiAgIyBTU0wgQ2xpZW50IGF1dGgNCiAgI3JlcXVpcmVDbGllbnRDZXJ0OiB0cnVlICAgICAgICAgICAgICAgICAgICAjIFJlcXVlc3QgYSBjZXJ0aWZpY2F0ZSBmcm9tIHRoZSBjbGllbnQNCiAgI2NhUGF0aDogJy9wYXRoL3RvL0NBL2NlcnRpZmljYXRlcycgICAgICAgICAjIENBIGNlcnRzLCBhbGwgZmlsZXMgYXQgdGhpcyBwYXRoIHdpbGwgYmUgcmVhZA0KDQogICMgQWRtaW4gU2VjdXJpdHkNCiAgIyAgQXV0aGVudGljYXRpb24NCiAgI2Jhc2ljQXV0aDogdHJ1ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIENsaWVudHMgd2ViIHVzZXIgbmFtZSBhbmQgcGFzc3dvcmQgd2lsbCBiZSBhdXRoZW50aWNhdGVkIHdoZW4gc2V0IHRydWUNCiAgI3Nlc3Npb25UaW1lb3V0OiA4NjQwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFNldCB0aGUgdGltZW91dCBpbiBzZWNvbmRzIHRoYXQgUkVTVCBBUEkvV2ViIFVJIHNlc3Npb25zIGNhbiBiZSBpbmFjdGl2ZSBiZWZvcmUgYmVjb21pbmcgaW52YWxpZC4gRGVmYXVsdCBpcyA4NjQwMCBzZWNvbmRzICgyNCBob3VycykuDQogICNsZGFwVXJsOiBsZGFwW3NdOi8vc2VydmVyWzpwb3J0XS9iYXNlRE5bP1t1aWRfYXR0cl1bP1tiYXNlfHN1Yl1dXSAgIyBsZGFwIGF1dGhlbnRpY2F0aW9uIHVybA0KICAjbGRhcEJpbmREbjogbGRhcDo6YWRtaW5BdXRoZW50aWNhdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUmVzb3VyY2UgYWxpYXMgb3IgZnVsbCBiaW5kIGRuDQogICNsZGFwQmluZFBhc3N3b3JkOiBsZGFwOjphZG1pbkF1dGhlbnRpY2F0aW9uICAgICAgICAgICAgICAgICAgICAgICAgIyBSZXNvdXJjZSBhbGlhcyBvciBiaW5kIHBhc3N3b3JkDQogICMgIEF1dGhvcml6YXRpb24NCiAgI2F1dGhvcml6YXRpb25FbmFibGVkOiBmYWxzZSAgICAgIyBDbGllbnRzIHdlYiB1c2VyIHJvbGUgd2lsbCBiZSBhdXRob3JpemVkIHdoZW4gc2V0IHRydWUNCiAgI2F1dGhvcml6YXRpb25Nb2RlOiAnZmlsZScgICAgICAgIyBTZXQgYXV0aG9yaXphdGlvbiBtb2RlLiBDaG9vc2UgMSBvZiA6IGxkYXAsIGZpbGUNCiAgI2xkYXBBdXRob3JpemVVcmw6IGxkYXBbc106Ly9zZXJ2ZXJbOnBvcnRdL2Jhc2VETls/W2F0dHJfbmFtZV1bP1tiYXNlfHN1Yl1dWz9maWx0ZXJfZXhwcl1dICAjIGxkYXAgYXV0aG9yaXphdGlvbiBzZWFyY2ggdXJsDQoNCg0KU2VjdXJpdHk6DQogIExkYXBBdXRob3JpemVBdHRyaWJ1dGVUb1JvbGVNYXA6DQogICAgIyBXaGVuICdhdXRoTW9kZScgaXMgbGRhcCwgc2V0IHRoZSBtYXBwaW5nIGZyb20gYSBtYXRjaGVkIExEQVAgYXV0aG9yaXphdGlvbiBhdHRyaWJ1dGUsIGFzDQogICAgIyBjb25maWd1cmVkIGluICdsZGFwQXV0aG9yaXplVXJsJyB0byB0aGUgQUNFIHdlYiB1c2VyIHJvbGUgbmFtZQ0KICAgICMgZS5nLiBtYXAgdGhlIGZvbGxvd2luZyBMREFQIGdyb3VwIEROcyB0byB3ZWIgdXNlciByb2xlcyAnYWRtaW5Sb2xlJywgJ3ZpZXdSb2xlJw0KICAgICMnY249YWRtaW5zLGNuPWdyb3VwLG91PWFjZSc6ICdhZG1pblJvbGUnDQogICAgIydjbj1tb25pdG9ycyxjbj1ncm91cCxvdT1hY2UnOiAndmlld1JvbGUnDQogIFBlcm1pc3Npb25zOg0KICAgICMgU2V0IEFkbWluIFNlY3VyaXR5IEF1dGhvcml6YXRpb24gZmlsZSBwZXJtaXNzaW9ucyBieSB3ZWIgdXNlciByb2xlIHVzaW5nICdyZWFkKzp3cml0ZSs6ZXhlY3V0ZSsnICwgb3IgJ2FsbCsnDQogICAgIyAnKycgZ3JhbnRzIHBlcm1pc3Npb24sICctJyBkZW5pZXMgcGVybWlzc2lvbg0KICAgICMgZS5nLiBkZWZpbmUgdGhlIGZvbGxvd2luZyB3ZWIgdXNlciByb2xlcyAndmlld1JvbGUnIGFuZCAnYWRtaW5Sb2xlJw0KICAgICN2aWV3Um9sZTogICdyZWFkKzp3cml0ZS06ZXhlY3V0ZS0nDQogICAgI2FkbWluUm9sZTogJ2FsbCsnDQogIERhdGFQZXJtaXNzaW9uczoNCiAgICAjIFNldCBBZG1pbiBTZWN1cml0eSBBdXRob3JpemF0aW9uIGZpbGUgcGVybWlzc2lvbnMgZm9yIFJlY29yZCBhbmQgUmVwbGF5IHdlYiB1c2VyIHJvbGUgdXNpbmcgJ3JlYWQrOndyaXRlKzpleGVjdXRlKycgLCBvciAnYWxsKycNCiAgICAjICcrJyBncmFudHMgcGVybWlzc2lvbiwgJy0nIGRlbmllcyBwZXJtaXNzaW9uLiAgUmVjb3JkIGFuZCBSZXBsYXkgcm9sZXMgYWxzbyByZXF1aXJlICdyZWFkKycgcGVybWlzc2lvbiB0byBiZSBkZWZpbmVkDQogICAgIyBpbiB0aGUgUGVybWlzc2lvbnMgc2VjdGlvbiBhYm92ZS4NCiAgICAjIGUuZy4gZGVmaW5lIHRoZSBmb2xsb3dpbmcgd2ViIHVzZXIgcm9sZXMgJ2RhdGFWaWV3ZXInLCAnZGF0YVJlcGxheWVyJyBhbmQgJ2FkbWluUm9sZScNCiAgICAjZGF0YVZpZXdlcjogICdyZWFkKzp3cml0ZS06ZXhlY3V0ZS0nDQogICAgI2RhdGFSZXBsYXllcjogJ3JlYWQrOndyaXRlLTpleGVjdXRlKycNCiAgICAjYWRtaW5Sb2xlOiAnYWxsKycNCg0KRGVmYXVsdHM6DQogICNkZWZhdWx0QXBwbGljYXRpb246ICcnICAgICAgICAgICAgIyBOYW1lIGEgZGVmYXVsdCBhcHBsaWNhdGlvbiB1bmRlciB3aGljaCBpbmRlcGVuZGVudCByZXNvdXJjZXMgd2lsbCBiZSBwbGFjZWQNCiAgI3BvbGljeVByb2plY3Q6ICdEZWZhdWx0UG9saWNpZXMnICAjIE5hbWUgb2YgdGhlIFBvbGljeSBwcm9qZWN0IHRoYXQgd2lsbCBiZSB1c2VkIGZvciB1bnF1YWxpZmllZCBQb2xpY3kgcmVmZXJlbmNlcywgZGVmYXVsdCBpcyAnRGVmYXVsdFBvbGljaWVzJw0KICBQb2xpY2llczoNCiAgICAjIFNldCBkZWZhdWx0IHBvbGljeSBuYW1lcywgb3B0aW9uYWxseSBxdWFsaWZpZWQgd2l0aCBhIHBvbGljeSBwcm9qZWN0IGFzIHtwb2xpY3kgcHJvamVjdH06bmFtZQ0KICAgICNIVFRQQ29ubmVjdG9yOiAnJyAgICAgICAgICAgIyBEZWZhdWx0IEhUVFAgY29ubmVjdG9yIHBvbGljeQ0KICAgICNIVFRQU0Nvbm5lY3RvcjogJycgICAgICAgICAgIyBEZWZhdWx0IEhUVFBTIGNvbm5lY3RvciBwb2xpY3kNCiAgICAjbW9uaXRvcmluZ1Byb2ZpbGU6ICcnICAgICAgICMgRGVmYXVsdCBNb25pdG9yaW5nIHByb2ZpbGUNCiAgQ3JlZGVudGlhbHM6DQogICAgIyBOYW1lcyBhIGRlZmF1bHQgY3JlZGVudGlhbCBuYW1lIHRvIGJlIHVzZWQgd2hlbiBhIG1vcmUgc3BlY2lmaWMgY3JlZGVudGlhbCBpcyBub3QgYXZhaWxhYmxlIGZvciB0aGUgY3JlZGVudGlhbCB0eXBlLg0KICAgICNodHRwcHJveHk6ICcnDQogICAgI2pkYmM6ICcnDQogICAgI2thZmthOiAnJw0KICAgICNrZXJiZXJvczogJycNCiAgICAjbGRhcDogJycNCiAgICAjb2RiYzogJycNCiAgICAjbXE6ICcnDQogICAgI3dzcnI6ICcnDQoNCkV2ZW50czoNCiAgT3BlcmF0aW9uYWxFdmVudHM6ICMgTWVzc2FnZSBmbG93IGFuZCBSZXNvdXJjZSBzdGF0aXN0aWNzIHBsdXMgV29ya2xvYWQgbWFuYWdlbWVudA0KICAgIE1ROg0KICAgICAgcG9saWN5OiAne0RlZmF1bHRQb2xpY2llc306UkxNUUVuZHBvaW50JyAgICAgICAgICAgICAgICMgU3BlY2lmeSBhIHtwb2xpY3kgcHJvamVjdH06cG9saWN5IGlmIG5vdCB1c2luZyAgJ2RlZmF1bHRRdWV1ZU1hbmFnZXInDQogICAgICBlbmFibGVkOiB0cnVlICAgICAgICAgICAjIFNldCB0cnVlIG9yIGZhbHNlLCBkZWZhdWx0IGZhbHNlDQogICAgICAjZm9ybWF0OiAnJyAgICAgICAgICAgICAgICMgU2V0IHN0cmluZyBvciBub25lDQogICAgICAjcHVibGlzaFJldHJ5SW50ZXJ2YWw6IDAgICNTZXQgdGhlIHJldHJ5IGludGVydmFsIChpbiBtaWxsaXNlY29uZHMpLCB0byBwYXVzZSBhbGwgcHVibGljYXRpb25zIGFuZCByZXRyeSwgd2hlbiBwdWJsaWNhdGlvbiBmYWlsdXJlcyBhcmUgY2F1c2luZyBzZXJpb3VzIGRlbGF5IHRvIHRoZSB0cmFuc2FjdGlvbi4gIA0KICAgIE1RVFQ6DQogICAgICAjcG9saWN5OiAnJyAgICAgICAgICAgICAgICMgU3BlY2lmeSBhIHtwb2xpY3kgcHJvamVjdH06cG9saWN5DQogICAgICAjZW5hYmxlZDogZmFsc2UgICAgICAgICAgICMgU2V0IHRydWUgb3IgZmFsc2UsIGRlZmF1bHQgZmFsc2UNCiAgICAgICNmb3JtYXQ6ICcnICAgICAgICAgICAgICAgIyBTZXQgc3RyaW5nIG9yIG5vbmUNCiAgICAgICNwdWJsaXNoUmV0cnlJbnRlcnZhbDogMCAgI1NldCB0aGUgcmV0cnkgaW50ZXJ2YWwgKGluIG1pbGxpc2Vjb25kcyksIHRvIHBhdXNlIGFsbCBwdWJsaWNhdGlvbnMgYW5kIHJldHJ5LCB3aGVuIHB1YmxpY2F0aW9uIGZhaWx1cmVzIGFyZSBjYXVzaW5nIHNlcmlvdXMgZGVsYXkgdG8gdGhlIHRyYW5zYWN0aW9uLiAgDQogIEJ1c2luZXNzRXZlbnRzOiAjIEJ1c2luZXNzIG1vbml0b3JpbmcgZXZlbnRzDQogICAgTVE6DQogICAgICBwb2xpY3k6ICd7RGVmYXVsdFBvbGljaWVzfTpSTE1RRW5kcG9pbnQnICAgICAgICAgICAgICAgIyBTcGVjaWZ5IGEge3BvbGljeSBwcm9qZWN0fTpwb2xpY3kgaWYgbm90IHVzaW5nICAnZGVmYXVsdFF1ZXVlTWFuYWdlcicNCiAgICAgIGVuYWJsZWQ6IHRydWUgICAgICAgICAgICMgU2V0IHRydWUgb3IgZmFsc2UsIGRlZmF1bHQgZmFsc2UNCiAgICAgICNmb3JtYXQ6ICcnICAgICAgICAgICAgICAgIyBTZXQgc3RyaW5nIG9yIG5vbmUNCiAgICAgICNwdWJsaXNoUmV0cnlJbnRlcnZhbDogMCAgI1NldCB0aGUgcmV0cnkgaW50ZXJ2YWwgKGluIG1pbGxpc2Vjb25kcyksIHRvIHBhdXNlIGFsbCBwdWJsaWNhdGlvbnMgYW5kIHJldHJ5LCB3aGVuIHB1YmxpY2F0aW9uIGZhaWx1cmVzIGFyZSBjYXVzaW5nIHNlcmlvdXMgZGVsYXkgdG8gdGhlIHRyYW5zYWN0aW9uLiAgDQogICAgTVFUVDoNCiAgICAgICNwb2xpY3k6ICcnICAgICAgICAgICAgICAgIyBTcGVjaWZ5IGEge3BvbGljeSBwcm9qZWN0fTpwb2xpY3kNCiAgICAgICNlbmFibGVkOiBmYWxzZSAgICAgICAgICAgIyBTZXQgdHJ1ZSBvciBmYWxzZSwgZGVmYXVsdCBmYWxzZQ0KICAgICAgI2Zvcm1hdDogJycgICAgICAgICAgICAgICAjIFNldCBzdHJpbmcgb3Igbm9uZQ0KICAgICAgI3B1Ymxpc2hSZXRyeUludGVydmFsOiAwICAjU2V0IHRoZSByZXRyeSBpbnRlcnZhbCAoaW4gbWlsbGlzZWNvbmRzKSwgdG8gcGF1c2UgYWxsIHB1YmxpY2F0aW9ucyBhbmQgcmV0cnksIHdoZW4gcHVibGljYXRpb24gZmFpbHVyZXMgYXJlIGNhdXNpbmcgc2VyaW91cyBkZWxheSB0byB0aGUgdHJhbnNhY3Rpb24uICANCg0KI01vbml0b3Jpbmc6DQojICBNZXNzYWdlRmxvdzoNCiMgICAgcHVibGljYXRpb25PbjogJ2FjdGl2ZScgICAgICAgICAjIGNob29zZSAxIG9mIDogYWN0aXZlfGluYWN0aXZlLCBkZWZhdWx0IGluYWN0aXZlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEVuc3VyZSBFdmVudHMuQnVzaW5lc3NFdmVudHMuTVF8TVFUVCBpcyBzZXQNCiMgICAgZXZlbnRGb3JtYXQ6ICdNb25pdG9yaW5nRXZlbnRWMicgICMgY2hvb3NlIDEgb2YgOiBNb25pdG9yaW5nRXZlbnRWMnxXTUINCg0KU3RhdGlzdGljczoNCiAgIyBBbGwgYXBwbGljYXRpb25zIGFuZCBtZXNzYWdlIGZsb3dzIHdpbGwgaW5oZXJpdCB0aGUgU25hcHNob3QgYW5kIEFyY2hpdmUgdmFsdWVzIHNldCBoZXJlLCB1bmxlc3MgdGhleSBoYXZlIGJlZW4gc2V0DQogICMgdG8gYSBzcGVjaWZpYyB2YWx1ZSBvdGhlciB0aGFuIGluaGVyaXQgdmlhIHRoZSBXZWJVSSwgbXFzaWNoYW5nZWZsb3dzdGF0cyBjb21tYW5kLCBUb29sa2l0IG9yIGFwaXYyIFJFU1QNCiAgIyBOb3Rlcw0KICAjICAtIHZhbHVlcyBoZXJlIGNhbiBiZSBvdmVycmlkZGVuIGJ5ICdvdmVycmlkZXMvc2VydmVyLmNvbmYueWFtbCcNCiAgIyAgLSB0byBwdWJsaXNoIG9uIE1RIG9yIE1RVFQsIGFsc28gY29uZmlndXJlIEV2ZW50cy5PcGVyYXRpb25hbEV2ZW50cywgYW5kIHNldCBvdXRwdXRGb3JtYXQgIHRvIGluY2x1ZGUganNvbiBhbmQvb3IgeG1sDQogICMgIC0gdG8gZGlzcGxheSBpbiB0aGUgV2ViVUkgU25hcHNob3Qub3V0cHV0Rm9ybWF0IG11c3QgaW5jbHVkZSBqc29uOyBub2RlRGF0YUxldmVsIG5lZWRzIHRvIGJlIHNldCB0byBiYXNpYyBvciBhZHZhbmNlZA0KICBTbmFwc2hvdDoNCiAgICBwdWJsaWNhdGlvbk9uOiAnYWN0aXZlJyAgICAgICMgY2hvb3NlIDEgb2YgOiBhY3RpdmV8aW5hY3RpdmUsIGV4cGxpY3RseSBzZXQgJ2FjdGl2ZScuIElmIHVuc2V0IHdpbGwgZGVmYXVsdCB0byAnaW5hY3RpdmUnDQogICAgYWNjb3VudGluZ09yaWdpbjogJ25vbmUnICAgICMgY2hvb3NlIDEgb2YgOiBub25lfGJhc2ljLCBkZWZhdWx0IG5vbmUNCiAgICBub2RlRGF0YUxldmVsOiAnYWR2YW5jZWQnICAgICAgICMgY2hvb3NlIDEgb2YgOiBub25lfGJhc2ljfGFkdmFuY2VkLCBleHBsaWN0bHkgc2V0ICdiYXNpYycuIElmIHVuc2V0IHdpbGwgZGVmYXVsdCB0byAnbm9uZScNCiAgICBvdXRwdXRGb3JtYXQ6ICdqc29uJyAgICAgICAgICMgY2hvb3NlIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIG9uZSBvciBtb3JlIG9mIDogY3N2LGpzb24seG1sLHVzZXJ0cmFjZS4gRXhwbGljdGx5IHNldCB0byAnanNvbicgZm9yIFdlYlVJLiBJZiB1bnNldCB3aWxsIGRlZmF1bHQgdG8gJycNCiAgICAjdGhyZWFkRGF0YUxldmVsOiAnbm9uZScgICAgICMgY2hvb3NlIDEgb2YgOiBub25lfGJhc2ljLiBJZiB1bnNldCB3aWxsIGRlZmF1bHQgdG8gJ25vbmUnDQogIEFyY2hpdmU6DQogICAgYXJjaGl2YWxPbjogJ2FjdGl2ZScgICAgICAjIGNob29zZSAxIG9mIDogYWN0aXZlfGluYWN0aXZlLCBkZWZhdWx0IGluYWN0aXZlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEFsc28gc2V0IEV2ZW50cy5PcGVyYXRpb25hbEV2ZW50cy5NUXxNUVRUIGZvciBvdXRwdXRGb3JtYXQgeG1sIHRvIGJlIHB1Ymxpc2hlZCB0byBNUS9NUVRUDQogICAgYWNjb3VudGluZ09yaWdpbjogJ2Jhc2ljJyAgICAjIGNob29zZSAxIG9mIDogbm9uZXxiYXNpYw0KICAgIG1ham9ySW50ZXJ2YWw6IDYwICAgICAgICAgICAjIFNldHMgdGhlIGludGVydmFsIGluIG1pbnV0ZXMgYXQgd2hpY2ggYXJjaGl2ZSBzdGF0aXN0aWNzIGFyZSBwdWJsaXNoZWQNCiAgICBub2RlRGF0YUxldmVsOiAnYWR2YW5jZWQnICAgICAgICMgY2hvb3NlIDEgb2YgOiBub25lfGJhc2ljfGFkdmFuY2VkDQogICAgb3V0cHV0Rm9ybWF0OiAneG1sJyAgICMgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgOiBjc3YseG1sLHVzZXJ0cmFjZQ0KICAgIHRocmVhZERhdGFMZXZlbDogJ2Jhc2ljJyAgICAgIyBjaG9vc2UgMSBvZiA6IG5vbmV8YmFzaWMNCiAgUmVzb3VyY2U6DQogICAgcmVwb3J0aW5nT246IHRydWUgICAgICAgICAgICAjIGNob29zZSAxIG9mIDogdHJ1ZXxmYWxzZSwgU2V0IHRvICd0cnVlJy4gSWYgdW5zZXQgd2lsbCBkZWZhdWx0IHRvICdmYWxzZScNCiAgICAjb3V0cHV0Rm9ybWF0OiAnJyAgICAgICAgICAgICMgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgOiBmaWxlDQoNClVzZXJFeGl0czoNCiAgI2FjdGl2ZVVzZXJFeGl0TGlzdDogJycgICAgICAgICMgU3BlY2lmeSB0aGUgbmFtZSBvZiBhbiBpbnN0YWxsZWQgdXNlciBleGl0IHRvIGFjdGl2YXRlLg0KICAjdXNlckV4aXRQYXRoOiAnJyAgICAgICAgICAgICAgIyBTcGVjaWZ5IHRoZSBwYXRoIG9yIHBhdGhzIGNvbnRhaW5pbmcgdGhlIHVzZXIgZXhpc3RzIHRvIGJlIGxvYWRlZC4gTXVsdGlwbGUgcGF0aHMgc2hvdWxkIGJlIHNlcGFyYXRlZCBieSBjb2xvbnMgb24gVW5peCBhbmQgc2VtaS1jb2xvbnMgb24gV2luZG93cy4NCg0KQnJva2VyUmVnaXN0cnk6DQogICNicm9rZXJLZXlzdG9yZVR5cGU6ICdKS1MnICAgICAgICAgICAgICAgICAgICAgICAgICAjIEtleSBzdG9yZSB0eXBlDQogICNicm9rZXJLZXlzdG9yZUZpbGU6ICcnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIExvY2F0aW9uIG9mIHRoZSBicm9rZXIga2V5IHN0b3JlDQogICNicm9rZXJLZXlzdG9yZVBhc3M6ICdicm9rZXJLZXlzdG9yZTo6cGFzc3dvcmQnICAgICAjIFJlc291cmNlIGFsaWFzIGNvbnRhaW5pbmcgdGhlIGtleSBzdG9yZSBwYXNzd29yZA0KICAjYnJva2VyVHJ1c3RzdG9yZVR5cGU6ICdKS1MnICAgICAgICAgICAgICAgICAgICAgICAgIyBUcnVzdCBzdG9yZSB0eXBlDQogICNicm9rZXJUcnVzdHN0b3JlRmlsZTogJycgICAgICAgICAgICAgICAgICAgICAgICAgICAjIExvY2F0aW9uIG9mIHRoZSBicm9rZXIgdHJ1c3Qgc3RvcmUNCiAgI2Jyb2tlclRydXN0c3RvcmVQYXNzOiAnYnJva2VyVHJ1c3RzdG9yZTo6cGFzc3dvcmQnICMgUmVzb3VyY2UgYWxpYXMgY29udGFpbmluZyB0aGUgdHJ1c3Qgc3RvcmUgcGFzc3dvcmQNCiAgI2Jyb2tlckNSTEZpbGVMaXN0OiAnJw0KICAjYnJva2VyRW5hYmxlQ1JMRFA6ICcnDQogICNhbGxvd1NTTHYzOiAnJw0KICAjYWxsb3dTTkk6ICcnDQogICNyZWVuYWJsZVRyYW5zcG9ydEFsZ29yaXRobXM6ICcnDQogICNyZWVuYWJsZUNlcnRpZmljYXRlQWxnb3JpdGhtczogJycNCiAgI21xQ0NEVDogJy9ob21lL2FjZXVzZXIvYWNlLXNlcnZlci9BTVFDTENITC5UQUInDQogICNodHRwQ29ubmVjdG9yUG9ydFJhbmdlOiAnJw0KICAjaHR0cHNDb25uZWN0b3JQb3J0UmFuZ2U6ICcnDQogICNicm9rZXJLZXJiZXJvc0NvbmZpZ0ZpbGU6ICcnDQogICNicm9rZXJLZXJiZXJvc0tleXRhYkZpbGU6ICcnDQogICNtcUtleVJlcG9zaXRvcnk6ICcvaG9tZS9hY2V1c2VyL2FjZS1zZXJ2ZXIva2V5Jw0KDQpSZXNvdXJjZU1hbmFnZXJzOg0KICBKVk06DQogICAgI2p2bVZlcmJvc2VPcHRpb246ICdub25lJw0KICAgICNqdm1EaXNhYmxlQ2xhc3NHQzogJycNCiAgICAjanZtRW5hYmxlSW5jR0M6ICcnDQogICAgI2p2bVNoYXJlQ2xhc3NlczogJycNCiAgICAjanZtTmF0aXZlU3RhY2tTaXplOiAtMQ0KICAgICNqdm1KYXZhT1NTdGFja1NpemU6IC0xDQogICAganZtTWluSGVhcFNpemU6IDY3MTA4ODY0ICAgICAgICAjIG1pbmltdW0gSlZNICBoZWFwIHNpemUgaW4gYnl0ZXMgKDMyTUIpDQogICAganZtTWF4SGVhcFNpemU6IDEwNzM3NDE4MjQgICAgICAgIyBtYXhpbXVtIEpWTSBoZWFwIHNpemUgaW4gYnl0ZXMgKDI1Nk1CKQ0KICAgIGp2bURlYnVnUG9ydDogNjY4NyAgICAgICAgICAgICAgICAjIFNldCBub24temVybyB0byBhY3RpdmF0ZSBKVk0gZGVidWcgcG9ydCBmb3IgVG9vbGtpdCBkZWJ1Z2dpbmcNCiAgICAjanZtU3lzdGVtUHJvcGVydHk6ICctRHNwZWlpYnByb3BzPS9vcHQvaWJtL1N0YW5kYXJkc1Byb2Nlc3NpbmdFbmdpbmUxMC4wLjEvc3BlaWliLnByb3BlcnRpZXMsLURqYXZhLmxpYnJhcnkucGF0aD0vb3B0L21xbS9qYXZhL2xpYjY0Jw0KICAgICNrZXlzdG9yZVR5cGU6ICcnICAgICAgICAgICAgICAgICMgSlZNIGtleSBzdG9yZSB0eXBlDQogICAgI2tleXN0b3JlRmlsZTogJycgICAgICAgICAgICAgICAgIyBKVk0gbG9jYXRpb24gb2YgdGhlIGtleSBzdG9yZQ0KICAgICNrZXlzdG9yZVBhc3M6ICcnICAgICAgICAgICAgICAgICMgSlZNIHJlc291cmNlIGFsaWFzIGNvbnRhaW5pbmcgdGhlIGtleSBzdG9yZSBwYXNzd29yZA0KICAgICN0cnVzdHN0b3JlVHlwZTogJyAgICAgICAgICAgICAgICMgSlZNIHRydXN0IHN0b3JlIHR5cGUNCiAgICAjdHJ1c3RzdG9yZUZpbGU6ICcnICAgICAgICAgICAgICAjIEpWTSBsb2NhdGlvbiBvZiB0aGUgdHJ1c3Qgc3RvcmUNCiAgICAjdHJ1c3RzdG9yZVBhc3M6ICcnICAgICAgICAgICAgICAjIEpWTSByZXNvdXJjZSBhbGlhcyBjb250YWluaW5nIHRoZSB0cnVzdCBzdG9yZSBwYXNzd29yZA0KICAgICNjcmxGaWxlTGlzdDogJycNCiAgICAjZW5hYmxlQ1JMRFA6ICcnDQogICAgI2tlcmJlcm9zQ29uZmlnRmlsZTogJycNCiAgICAja2VyYmVyb3NLZXl0YWJGaWxlOiAnJw0KICAgICN0cnVzdHN0b3JlVHlwZTogJ0pLUycgICAgICAgICAgICAgICAjIEpWTSB0cnVzdCBzdG9yZSB0eXBlDQogICAgI3RydXN0c3RvcmVGaWxlOiAnL2hvbWUvYWNldXNlci9hY2Utc2VydmVyL3RydXN0c3RvcmUuamtzJyAgICAgICAgICAgICAgIyBKVk0gbG9jYXRpb24gb2YgdGhlIHRydXN0IHN0b3JlDQogICAgI3RydXN0c3RvcmVQYXNzOiAncG9sb1BvMTAnICAgICAgICAgICAgICAjIEpWTSByZXNvdXJjZSBhbGlhcyBjb250YWluaW5nIHRoZSB0cnVzdCBzdG9yZSBwYXNzd29yZA0KDQogIEhUVFBDb25uZWN0b3I6DQogICAgI0xpc3RlbmVyUG9ydDogMCAgICAgICAgICAgICAgIyBTZXQgbm9uLXplcm8gdG8gc2V0IGEgc3BlY2lmaWMgcG9ydCwgZGVmYXVsdHMgdG8gNzgwMA0KICAgICNMaXN0ZW5lckFkZHJlc3M6ICcwLjAuMC4wJyAgICMgU2V0IHRoZSBJUCBhZGRyZXNzIGZvciB0aGUgbGlzdGVuZXIgdG8gbGlzdGVuIG9uLiBEZWZhdWx0IGlzIHRvIGxpc3RlbiBvbiBhbGwgYWRkcmVzc2VzDQogICAgI0F1dG9SZXNwb25kVG9IVFRQSEVBRFJlcXVlc3RzOiBmYWxzZSAjIEF1dG9tYXRpY2FsbHkgcmVzcG9uZCB0byBIVFRQIEhFQUQgcmVxdWVzdHMgd2l0aG91dCBpbnZva2luZyB0aGUgbWVzc2FnZSBmbG93LiBTZXQgdG8gdHJ1ZSBvciBmYWxzZSwgZGVmYXVsdCBpcyBmYWxzZS4NCiAgICAjU2VydmVyTmFtZTogJycgICAgICAgICAgICAgICAjIFNldCB0aGUgdmFsdWUgdG8gYmUgcmV0dXJuZWQgaW4gdGhlICdTZXJ2ZXInIEhUVFAgaGVhZGVyLg0KICAgICNDT1JTRW5hYmxlZDogZmFsc2UgICAgICAgICAgICMgU2V0IHRoZSB2YWx1ZSB0byB0cnVlIHRvIG1ha2UgdGhlIGxpc3RlbmVyIHJlc3BvbmQgdG8gdmFsaWQgSFRUUCBDT1JTIHJlcXVlc3RzDQogICAgI0NPUlNBbGxvd09yaWdpbnM6ICcqJw0KICAgICNDT1JTQWxsb3dDcmVkZW50aWFsczogZmFsc2UNCiAgICAjQ09SU0V4cG9zZUhlYWRlcnM6ICdDb250ZW50LVR5cGUnDQogICAgI0NPUlNNYXhBZ2U6IC0xDQogICAgI0NPUlNBbGxvd01ldGhvZHM6ICdHRVQsSEVBRCxQT1NULFBVVCxQQVRDSCxERUxFVEUsT1BUSU9OUycNCiAgICAjQ09SU0FsbG93SGVhZGVyczogJ0FjY2VwdCxBY2NlcHQtTGFuZ3VhZ2UsQ29udGVudC1MYW5ndWFnZSxDb250ZW50LVR5cGUnDQoNCiAgSFRUUFNDb25uZWN0b3I6DQogICAgI0xpc3RlbmVyUG9ydDogMCAgICAgICAgICAgICAgICAgIyBTZXQgbm9uLXplcm8gdG8gc2V0IGEgc3BlY2lmaWMgcG9ydCwgZGVmYXVsdHMgdG8gNzg0Mw0KICAgICNMaXN0ZW5lckFkZHJlc3M6ICcwLjAuMC4wJyAgICAgICMgU2V0IHRoZSBJUCBhZGRyZXNzIGZvciB0aGUgbGlzdGVuZXIgdG8gbGlzdGVuIG9uLiBEZWZhdWx0IGlzIHRvIGxpc3RlbiBvbiBhbGwgYWRkcmVzc2VzDQogICAgI1JlcUNsaWVudEF1dGg6IHRydWUNCiAgICAjS2V5QWxpYXM6ICcnDQogICAgI0tleVBhc3N3b3JkOiAnUDRzNXcwcmQnICAgICAgICAgIyBTZXQgdGhlIHBhc3N3b3JkIG9yIGFsaWFzIHRvIHRoZSBwYXNzd29yZCBvZiB0aGUga2V5DQogICAgI0tleXN0b3JlRmlsZTogJy9wYXRoL3RvL2tleXN0b3JlLmprcycNCiAgICAjS2V5c3RvcmVQYXNzd29yZDogJ1A0czV3MHJkJyAgICAjIFNldCB0aGUgcGFzc3dvcmQgb3IgYWxpYXMgdG8gdGhlIHBhc3N3b3JkIG9mIHRoZSBrZXlzdG9yZQ0KICAgICNLZXlzdG9yZVR5cGU6ICdKS1MnICAgICAgICAgICAgICMgU2V0IHRoZSBrZXlzdG9yZSB0eXBlLCBjYW4gYmUgJ0pLUycgb3IgJ1AxMicuIERlZmF1bHQgaXMgSktTLg0KICAgICNUcnVzdHN0b3JlRmlsZTogL3BhdGgvdHAvdHJ1c3RzdG9yZS5qa3MNCiAgICAjVHJ1c3RzdG9yZVBhc3N3b3JkOiAnUDRzNXcwcmQnICAjIFNldCB0aGUgcGFzc3dvcmQgb3IgYWxpYXMgdG8gdGhlIHBhc3N3b3JkIG9mIHRoZSBrZXlzdG9yZQ0KICAgICNUcnVzdHN0b3JlVHlwZTogJ0pLUycgICAgICAgICAgICMgU2V0IHRoZSB0cnVzdHN0b3JlIHR5cGUsIGNhbiBiZSAnSktTJyBvciAnUEVNJy4gRGVmYXVsdCBpcyBKS1MuDQogICAgI0NpcGhlclNwZWM6ICcnICAgICAgICAgICAgICAgICAgIyBDb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBhbGxvd2FibGUgY2lwaGVycy4gSUFOQSBjaXBoZXIgbmFtZXMgYXJlIGFjY2VwdGVkLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRXhhbXBsZTogJ1RMU19FQ0RIRV9FQ0RTQV9XSVRIX0FFU18xMjhfQ0JDX1NIQSxUTFNfRUNESEVfRUNEU0FfV0lUSF9BRVNfMjU2X0dDTV9TSEEzODQnLg0KICAgICNBdXRvUmVzcG9uZFRvSFRUUEhFQURSZXF1ZXN0czogZmFsc2UgIyBBdXRvbWF0aWNhbGx5IHJlc3BvbmQgdG8gSFRUUCBIRUFEIHJlcXVlc3RzIHdpdGhvdXQgaW52b2tpbmcgdGhlIG1lc3NhZ2UgZmxvdy4gU2V0IHRvIHRydWUgb3IgZmFsc2UsIGRlZmF1bHQgaXMgZmFsc2UuDQogICAgI1NlcnZlck5hbWU6ICcnICAgICAgICAgICAgICAgICAgIyBTZXQgdGhlIHZhbHVlIHRvIGJlIHJldHVybmVkIGluIHRoZSAnU2VydmVyJyBIVFRQIGhlYWRlci4NCiAgICAjQ09SU0VuYWJsZWQ6IGZhbHNlICAgICAgICAgICAgICAjIFNldCB0aGUgdmFsdWUgdG8gdHJ1ZSB0byBtYWtlIHRoZSBsaXN0ZW5lciByZXNwb25kIHRvIHZhbGlkIEhUVFAgQ09SUyByZXF1ZXN0cw0KICAgICNDT1JTQWxsb3dPcmlnaW5zOiAnKicNCiAgICAjQ09SU0FsbG93Q3JlZGVudGlhbHM6IGZhbHNlDQogICAgI0NPUlNFeHBvc2VIZWFkZXJzOiAnQ29udGVudC1UeXBlJw0KICAgICNDT1JTTWF4QWdlOiAtMQ0KICAgICNDT1JTQWxsb3dNZXRob2RzOiAnR0VULEhFQUQsUE9TVCxQVVQsUEFUQ0gsREVMRVRFLE9QVElPTlMnDQogICAgI0NPUlNBbGxvd0hlYWRlcnM6ICdBY2NlcHQsQWNjZXB0LUxhbmd1YWdlLENvbnRlbnQtTGFuZ3VhZ2UsQ29udGVudC1UeXBlJw0KICAgICNFbmFibGVUTFNUcmFjZTogZmFsc2UgICAgICAgICAgICMgRW5hYmxlcyB0cmFjaW5nIG9mIFRMUyBoYW5kc2hha2UgbWVzc2FnZXMgdG8gdGhlIGNvbnNvbGUNCg0KICBBY3Rpdml0eUxvZ01hbmFnZXI6DQogICAgYWN0aXZpdHlMb2dFbmFibGVkOiB0cnVlDQogICAgZGVmYXVsdExvZ1NpemVQZXJUaHJlYWQ6IDEwMDANCiAgICBtaW5TZXZlcml0eUxldmVsOiAnSU5GTycgICAgICAgICMgY2hvb3NlIG9uZSBvZiBJTkZPfFdBUk58RVJST1INCg0KICBEYXRhYmFzZUNvbm5lY3Rpb25NYW5hZ2VyOg0KICAgICNtYXhDb25uZWN0aW9uQWdlOiA2MCAgICAgICAgICAgICAgICAgICAgICAgIyBTZXQgdG8gLTEgdG8gbmV2ZXIgcmVsZWFzZSBjb25uZWN0aW9ucw0KICAgICN1c2VEZWZhdWx0U2NoZW1hRm9yU3RvcmVkUHJvY2VkdXJlczogdHJ1ZQ0KDQogIFNvY2tldENvbm5lY3Rpb25NYW5hZ2VyOg0KICAgICNhbGxvd2VkQXV0aFR5cGVzOiAncGxhdGZvcm0gZGVmYXVsdCcgICAjIFNldHMgdGhlIGFsbG93YWJsZSBhdXRoZW50aWNhdGlvbiBtZWNoYW5pc21zIHdoZW4gcmVzcG9uZGluZyB0byBhIEhUVFAgNDAxIHJlc3BvbnNlIGR1cmluZyBhIEhUVFAgYmFzZWQgcmVxdWVzdC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIHNwZWNpZmllZCBhbmQgc2hvdWxkIGJlIHNlbWktY29sb24gc2VwYXJhdGVkLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFZhbGlkIHZhbHVlcyBhcmUgJ2Jhc2ljJywgJ250bG0nLCAnbmVnb3RpYXRlJywgJ25lZ28yJywgJ2FsbCcsICdpd2EnLCAncGxhdGZvcm0gZGVmYXVsdCcuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVW5peCBvbmx5IHN1cHBvcnRzICdiYXNpYycuIFdpbmRvd3Mgc3VwcG9ydHMgYWxsIHZhbHVlcy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAncGxhdGZvcm0gZGVmYXVsdCcgaXMgZXhwYW5kZWQgdG8gImJhc2ljIiBvbiB1bml4IGFuZCAiYmFzaWM7IG50bG07IG5lZ290aWF0ZTsgbmVnbzIiIG9uIHdpbmRvd3MuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgJ2l3YScgaXMgZXhwYW5kZWQgdG8gbWVhbiAibnRsbTsgbmVnb3RpYXRlOyBuZWdvMiINCiAgICAjYWxsb3dOdGxtTmVnb3RpYXRpb246IHRydWUgICAjIFNldCB0byAnZmFsc2UnIHRvIHByZXZlbnQgTlRMTSBmcm9tIGJlaW5nIG5lZ290aWF0ZWQgd2l0aCB0aGUgU1BORUdPIGFuZCBTUE5FR08tMiBwcm90b2NvbHMuDQogICAgI25lZ290aWF0ZU11dHVhbEF1dGg6IGZhbHNlICAgIyBTZXQgdG8gJ3RydWUnIGlmIHlvdSByZXF1aXJlIG11dHVhbCBhdXRoZW50aWNhdGlvbiB3aGVuIHRoZSBLZXJiZXJvcyBwcm90b2NvbCBpcyBuZWdvdGlhdGVkLg0KICAgICNwcmVlbXB0aXZlQXV0aFR5cGU6ICcnICAjIENvbmZpZ3VyZSB0aGUgYXV0aGVudGljYXRpb24gbWVjaGFuaXNtIHRvIHVzZSBwcmVlbXB0aXZlbHkgd2hlbiBtYWtpbmcgYSBIVFRQIGJhc2VkIHJlcXVlc3QuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVmFsaWQgdmFsdWVzIGFyZSAnJywgJ2Jhc2ljJywgJ250bG0nLCAnbmVnb3RpYXRlJywgJ25lZ28yJy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTZXQgdG8gdGhlIGRlZmF1bHQgdmFsdWUgb2YgJycgdG8gZGlzYWJsZSBwcmVlbXB0aXZlIGF1dGhlbnRpY2F0aW9uLg0KICAgICN0Y3BOb0RlbGF5OiB0cnVlICAgICAjIFNldCB0byAnZmFsc2UnIHRvIGRpc2FibGUgdGhlIHRjcG5vZGVsYXkgc2V0dGluZyBmb3Igbm9uLVNTTCBzb2NrZXRzIGNyZWF0ZWQgZm9yIEhUVFAgYmFzZWQgcmVxdWVzdHMuDQogICAgI3RjcE5vRGVsYXlTU0w6IHRydWUgICMgU2V0IHRvICdmYWxzZScgdG8gZGlzYWJsZSB0aGUgdGNwbm9kZWxheSBzZXR0aW5nIGZvciBTU0wgc29ja2V0cyBjcmVhdGVkIGZvciBIVFRQIGJhc2VkIHJlcXVlc3RzLg0KDQogIENvbnRlbnRCYXNlZEZpbHRlcmluZzoNCiAgICAjY2JmRW5hYmxlZDogZmFsc2UgICAgICMgU2V0IHRvIHRydWUgdG8gZW5hYmxlIGNvbnRlbnQtYmFzZWQgZmlsdGVyaW5nDQogICAgI2V2YWx1YXRpb25UaHJlYWRzOiAxICAjIENvbmZpZ3VyZXMgdGhlIG51bWJlciBvZiBldmFsdWF0aW9uIHRocmVhZHMgYXZhaWxhYmxlIGZvciBjb250ZW50LWJhc2VkIGZpbHRlcmluZw0KICAgICN2YWxpZGF0aW9uVGhyZWFkczogMSAgIyBDb25maWd1cmVkIHRoZSBudW1iZXIgb2YgdmFsaWRhdGlvbiB0aHJlYWRzIGF2YWlsYWJsZSBmb3IgY29udGVudC1iYXNlZCBmaWx0ZXJpbmcNCg0KICBGVEVBZ2VudDoNCiAgICAjY29vcmRpbmF0aW9uUU1ncjogJycgIyBTZXQgdG8gdGhlIG5hbWUgb2YgdGhlIGNvb3JkaW5hdGlvbiBRdWV1ZSBNYW5hZ2VyIHRvIGJlIHVzZWQgYnkgdGhlIGVtYmVkZGVkIEZURSBBZ2VudCBpZiBub3QgdXNpbmcgdGhlIGRlZmF1bHQgUXVldWUgTWFuYWdlciBhcyB0aGUgY29vcmRpbmF0aW9uIFF1ZXVlIE1hbmFnZXIuDQoNCiAgUGFyc2VyTWFuYWdlcjoNCiAgICAjcGFyc2VyV2FybmluZ1RocmVzaG9sZDogMTAwMCAgICMgU2V0cyB0aGUgZnJlcXVlbmN5LCBiYXNlZCBvbiBwYXJzZXJzIHBlciB0aHJlYWQsIHdpdGggd2hpY2ggYSBwYXJzZXIgY3JlYXRpb24gd2FybmluZyBtZXNzYWdlIGlzIHdyaXR0ZW4gdG8gYWN0aXZpdHkgbG9nDQogICAgI2ZpZWxkV2FybmluZ1RocmVzaG9sZDogMTAwMDAwICAjIFNldHMgdGhlIGZyZXF1ZW5jeSwgYmFzZWQgb24gZmllbGRzIHBlciBwYXJzZXIsIHdpdGggd2hpY2ggYSBmaWVsZCBjcmVhdGlvbiB3YXJuaW5nIG1lc3NhZ2UgaXMgd3JpdHRlbiB0byBhY3Rpdml0eSBsb2cNCiAgICAjZnJlZU1hc3RlclBhcnNlcnM6IGZhbHNlICAgICAgICMgU2V0cyB3aGV0aGVyIHBhcnNlcnMgd2lsbCBiZSBmcmVlZCBhZnRlciBlYWNoIGlucHV0IG1lc3NhZ2UgaGFzIGJlZW4gcHJvY2Vzc2VkLg0KDQogIEVTUUw6DQogICAgI2Nhc3RXaXRoQWNjdXJhdGVab25lT2Zmc2V0czogZmFsc2UgICAgICAgIyBTZXQgRVNRTCB0byB1c2UgdGhlIHRpbWUgem9uZXMgdGhhdCBhcmUgc3RvcmVkIHdpdGggVGltZSwgVGltZXN0YW1wLCBhbmQgRGF0ZSBkYXRhIHR5cGVzIHdoZW4geW91IGNhc3QgdG8gYW5kIGZyb20gR01UVGltZSBhbmQgR01UVGltZXN0YW1wIGRhdGEgdHlwZXMuDQogICAgI2Fsd2F5c0Nhc3RUb0xvY2FsOiB0cnVlICAgICAgICAgICAgICAgICAgIyBTZXQgRVNRTCB0byBjb252ZXJ0IHRoZSBzcGVjaWZpZWQgdGltZSBpbnRvIHRoZSBsb2NhbCB0aW1lIHpvbmUgb2YgdGhlIGludGVncmF0aW9uIG5vZGUvc2VydmVyIHdoZW4gYSBTdHJpbmcgaXMgY2FzdCB0byBhIFRpbWUgb3IgVGltZVN0YW1wIHdpdGggYSBGb3JtYXQuDQogICAgI3VzZUlDVVN0cmluZ01hbmlwdWxhdGlvbjogZmFsc2UgICAgICAgICAgIyBTZXQgRVNRTCB0byBwcm92aWRlIGZ1bGwgc3VwcG9ydCBmb3IgVVRGLTE2IHN1cnJvZ2F0ZSBwYWlycy4NCiAgICAjYWxsb3dQcm9wYWdhdGVXaXRoU2hhcmVkTG9ja0hlbGQ6IGZhbHNlICAjIFNldCBFU1FMIHRvIHByb3BhZ2F0ZSB0aGUgbWVzc2FnZSBldmVuIGlmIGEgbG9jayBpcyBoZWxkIG9uIGEgc2hhcmVkIHZhcmlhYmxlLg0KICAgICNwZXJmb3JtYW5jZVN0YXRzUmVwb3J0aW5nT246IGZhbHNlICAgICAgICMgU2V0IEVTUUwgdG8gY2FwdHVyZSBwZXJmb3JtYW5jZSBzdGF0aXN0aWNzDQogICAgI3BlcmZvcm1hbmNlU3RhdHNPdXRwdXRQYXRoOiAnJyAgICAgICAgICAgIyBTZXRzIHRoZSBwYXRoIHRoYXQgRVNRTCBwZXJmb3JtYW5jZSBzdGF0aXN0aWNzIGFyZSBjYXB0dXJlZCB0bw0KDQogIFhNTE5TQzoNCiAgICAjaW52YWxpZENoYXJhY3RlckVzY2FwZVR5cGU6IG5vbmUgICMgU2V0cyB0aGUgd2F5IFhNTE5TQyBzZXJpYWxpemF0aW9uIHJlbmRlcnMgY2hhcmFjdGVycyB0aGF0IGRvIG5vdCBleGlzdCBpbiB0aGUgdGFyZ2V0IGNvZGUgcGFnZS4gQ2hvb3NlIG9uZSBvZiBub25lfGhleHxkZWNpbWFsfHVuaWNvZGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVGhlIHZhbHVlIG9mIG5vbmUgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIGFuIGludmFsaWQgY2hhcmFjdGVyLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDaG9vc2luZyBoZXh8ZGVjaW1hbHx1bmljb2RlIHdpbGwgd3JpdGUgdGhlIGNoYXJhY3RlciBlaXRoZXIgaW4gaGV4LCBkZWNpbWFsIG9yIHVuaWNvZGUgY2hhcmFjdGVyIGVudGl0eSBmb3JtYXQuDQogICAgI3N0b3JlVGltZVpvbmVJblZhbHVlOiB0cnVlICAgICAgICAjIFNldHMgWE1MTlNDIHBhcnNlcnMgdG8gc3RvcmUgdGltZXpvbmUgaW5mb3JtYXRpb24gYXMgcGFydCBvZiB0aGUgRGF0ZXRpbWUgdmFsdWUgdGhhdCBpcyBwYXJzZWQuDQogICAgI3dyaXRlVGltZVpvbmU6IHdoZW5TZXQgICAgICAgICAgICAjIFNldHMgWE1MTlNDIHBhcnNlcnMgdG8gd3JpdGUgdGltZXpvbmUgaW5mb3JtYXRpb24gd2hlbiBhbiBYTUwgZG9jdW1lbnQgaXMgc2VyaWFsaXplZC4gQ2hvb3NlIG9uZSBvZiBuZXZlcnx3aGVuU2V0fG5vblVUQ3xub25Mb2NhbHxhbHdheXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgV2hlbiB0aGUgdmFsdWUgb2YgbmV2ZXIgaXMgc2V0IHRpbWV6b25lcyB3aWxsIG5vdCBiZSB3cml0dGVuIGluIHRoZSBYTUwgZG9jdW1lbnQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFdoZW4gdGhlIHZhbHVlIG9mIGFsd2F5cyBpcyBzZXQgdGltZXpvbmVzIHdpbGwgYWx3YXlzIGJlIHdyaXR0ZW4gd2hlcmUgdGhlIGxvY2FsIHRpbWV6b25lIHdpbGwgYmUgdXNlZCBpZiByZXF1aXJlZC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgd2hlblNldCBjYW4gYmUgdXNlZCB0byBvbmx5IHdyaXRlIHRpbWV6b25lcyBpZiB0aGV5IHdlcmUgcGFyc2VkIGZyb20gYW4gWE1MTlNDIG1lc3NhZ2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVGhlIHZhbHVlcyBvZiBub25VVEMgYW5kIG5vbkxvY2FsIGNhbiBiZSB1c2VkIHRvIGF2b2lkIHdyaXRpbmcgdGltZXpvbmVzIGZvciBsb2NhbCBvciBVVEMgdGltZXpvbmVzLg0KICAgICNjZGF0YUZpZWxkTWVyZ2luZzogZmFsc2UgICAgICAgICAgIyBTZXRzIFhNTE5TQyBwYXJzZXJzIHRvIHJlcHJlc2VudCBDREFUQSBzZWN0aW9ucyBpbiBvbmUgbWVzc2FnZSB0cmVlIGZpZWxkLg0KDQogIEpTT046DQogICAgI2VzY2FwZU1vZGU6IHN0cmljdCAgIyBTcGVjaWZpZXMgd2hldGhlciB0aGUgSlNPTiBwYXJzZXIgZXNjYXBlcyBmb3J3YXJkIHNsYXNoIGNoYXJhY3RlcnMgd2hlbiBpdCBpcyBzZXJpYWxpemluZyBhIG1lc3NhZ2UgdHJlZS4gQ2hvb3NlIG9uZSBvZiBwcmVzZXJ2ZUZvcndhcmRTbGFzaGVzfHN0cmljdC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAjIFRvIHNwZWNpZnkgdGhhdCB0aGUgSlNPTiBwYXJzZXIgbXVzdCBsZWF2ZSBmb3J3YXJkIHNsYXNoZXMgdW5jaGFuZ2VkIGluIHRoZSBvdXRwdXQsIHNldCB0aGUgdmFsdWUgdG8gcHJlc2VydmVGb3J3YXJkU2xhc2hlcy4NCg0KICBNUUNvbm5lY3Rpb25NYW5hZ2VyOg0KICAgICNlbmFibGVCcm93c2VGb3JBbGxJbnB1dFF1ZXVlczogZmFsc2UgICMgU2V0cyB0aGUgTVFPT19CUk9XU0Ugb3BlbiBvcHRpb24gd2hlbiBhbGwgaW5wdXQgcXVldWVzIGFyZSBvcGVuZWQuDQogICAgI2V4cGlyeUNvbXBlbnNhdGlvbjogZmFsc2UgICAgICAgICAgICAgIyBTZXQgdG8gdHJ1ZSB0byByZWR1Y2UgdGhlIE1RT3V0cHV0IE1RUFVUIE1RTUQuRXhwaXJ5IGJ5IHRoZSBhbW91bnQgb2YgbWVzc2FnZSBmbG93IHByb2Nlc3NpbmcgdGltZS4NCiAgICAjdXNlSXNvbGF0ZWRCaW5kaW5nczogZmFsc2UgICAgICAgICAgICAjIFNldHMgdGhlIE1RQ05PX0lTT0xBVEVEX0JJTkRJTkcgY29ubmVjdGlvbiBvcHRpb24gd2hlbiB0aGUgTVEgY29ubmVjdGlvbiBpcyBjcmVhdGVkLg0KICAgICNxdWV1ZUNhY2hlTWF4U2l6ZTogMTAgICAgICAgICAgICAgICAgICMgU2V0cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgYSBxdWV1ZSBoYW5kbGVzIHRoYXQgYSBtZXNzYWdlIGZsb3cgdGhyZWFkIGNhbiBtYWludGFpbi4NCiAgICAjcXVldWVDYWNoZVRpbWVvdXQ6IDMwMCAgICAgICAgICAgICAgICAjIFNldHMgdGhlIHRpbWUgKGluIHNlY29uZHMpIHRoYXQgYSBmcmVlZCBxdWV1ZSBoYW5kbGUgd2lsbCBzdGF5IGNhY2hlZCB1bnRpbCBpdCByZW1vdmVkIGZyb20gdGhlIGNhY2hlLg0KICAgICNxdWV1ZU1heFRpbWVvdXQ6IDYwICAgICAgICAgICAgICAgICAgICMgU2V0cyB0aGUgbWF4aW11bSB0aW1lIChpbiBzZWNvbmRzKSB0aGF0IGFuIE1RIGhhbmRsZSBpcyBpZGxlIGJlZm9yZSBpdCBpcyBjb25zaWRlcmVkIGZvciBjbG9zaW5nLg0KDQogIFhQYXRoQ2FjaGU6DQogICAgI21pbmltdW1TaXplOiA2MDAwICAgICAgICAgICAgIyBjb250cm9scyB0aGUgbWluaW11bSBudW1iZXIgb2YgY29tcGlsZWQgWFBhdGggZXhwcmVzc2lvbnMgdGhhdCBjYW4gYmUgc3RvcmVkIGluIHRoZSBYUGF0aCBjYWNoZS4NCiAgICAjbWF4aW11bVNpemU6IDEwMDAwICAgICAgICAgICAjIGNvbnRyb2xzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBjb21waWxlZCBYUGF0aCBleHByZXNzaW9ucyB0aGF0IGNhbiBiZSBzdG9yZWQgaW4gdGhlIFhQYXRoIGNhY2hlDQogICAgI2VudHJ5V2FybmluZ1RocmVzaG9sZDogMTAwMCAgIyBjb250cm9scyBob3cgZnJlcXVlbnRseSBhY3Rpdml0eSBsb2cgbWVzc2FnZXMgYXJlIGVtaXR0ZWQgYnkgdGhlIFhQYXRoIGNhY2hlIGFzIGl0IGdyb3dzIGluIHNpemUuDQogICAgI21vZGU6IHRydWUgICAgICAgICAgICAgICAgICAgIyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBYUGF0aCBjYWNoaW5nDQoNCiAgQXN5bmNIYW5kbGVNYW5hZ2VyOg0KICAgICNhc3luY0hhbmRsZVRpbWVvdXRTZWNvbmRzOiAtMSAgIyBTZXRzIHRoZSBleHBpcnkgdGltZSAoaW4gc2Vjb25kcykgd2hlbiB0aGUgcmVwbHkgaWRlbnRpZmllcnMgZXhwaXJlIGZvciBhc3luY2hyb25vdXMgaGFuZGxlcyB1c2VkIGZvciBIVFRQLCBTT0FQLCBTQVAgYW5kIENhbGxhYmxlIGZsb3cgbm9kZXMuDQoNCiAgR2xvYmFsQ2FjaGU6DQogICAgI2NhY2hlT246IGZhbHNlICAgICAgICAgICAgICAgICAgICAgIyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgR2xvYmFsIENhY2hlIGZ1bmN0aW9uYWxpdHkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFdoZW4gdXNpbmcgR2xvYmFsIENhY2hlIGl0IGlzIGFkdmlzYWJsZSB0byBjaGFuZ2UgeW91ciBqdm1NaW5IZWFwU2l6ZSBhbmQganZtTWF4SGVhcFNpemUgZGVwZW5kaW5nIG9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB0aGUgbnVtYmVyIG9mIGxpdmUgb2JqZWN0cyBpbiB0aGUgaGVhcCwgY29tcGxleGl0eSBvZiBsaXZlIG9iamVjdHMgaW4gdGhlIGhlYXAgYW5kIG51bWJlciBvZiBhdmFpbGFibGUgY29yZXMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBzZWUgaHR0cHM6Ly93d3cuaWJtLmNvbS9zdXBwb3J0L2tub3dsZWRnZWNlbnRlci9TU1RWTFVfOC42LjAvY29tLmlibS53ZWJzcGhlcmUuZXh0cmVtZXNjYWxlLmRvYy9jeHNqdm10dW5lLmh0bWwNCiAgICAjY2FjaGVTZXJ2ZXJOYW1lOiAnJyAgICAgICAgICAgICAgICAjIFRoZSBuYW1lIG9mIHRoaXMgY2FjaGUgc2VydmVyIGNvbXBvbmVudCAoYSBjYWNoZSBzZXJ2ZXIgY29tcG9uZW50IGNhbiBiZSBhIGNhdGFsb2cgYW5kL29yIGEgY29udGFpbmVyKTsgaXQgbXVzdCBiZSB1bmlxdWUgaW4geW91ciBnbG9iYWwgY2FjaGUgc3lzdGVtDQogICAgI2NhdGFsb2dTZXJ2aWNlRW5kUG9pbnRzOiAnJyAgICAgICAgIyBDb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBob3N0bmFtZXMgYW5kIHBvcnRzIGZvciB0aGUgY2F0YWxvZyBzZXJ2ZXJzIHRvIHVzZSwgZS5nLiAnbG9jYWxob3N0OjI4MDAnDQogICAgI2NhdGFsb2dEb21haW5OYW1lOiAnJyAgICAgICAgICAgICAgIyBOYW1lIG9mIHRoZSBzaGFyZWQgZ2xvYmFsIGNhY2hlIGRvbWFpbjsgdGhpcyB2YWx1ZSBzaG91bGQgYmUgc2hhcmVkIGJ5IGFsbCBjYXRhbG9nIHNlcnZlcnMgaW4gdGhlIHNhbWUgZG9tYWluLCBlLmcuICdXTUJfTXlDYWNoZURvbWFpbicNCiAgICAjY2F0YWxvZ0NsdXN0ZXJFbmRQb2ludHM6ICcnICAgICAgICAjIENvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGNhdGFsb2cgc2VydmVyIGNvbm5lY3Rpb24gZGV0YWlscyBpbiB0aGUgZm9ybWF0ICdjYWNoZVNlcnZlck5hbWU6Y2F0YWxvZ0NhY2hlU2VydmVySG9zdDpIQVBvcnQ6Y2xpZW50UG9ydCcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIElmIHRoaXMgaXMgYSBjYXRhbG9nIHNlcnZlciwgY2FjaGVTZXJ2ZXJOYW1lIHNob3VsZCBtYXRjaCB0aGUgdmFsdWUgYWJvdmUsIGFuZCBpZiBub3QsIGl0IHdpbGwgYmUgdGhlIHZhbHVlIHVzZWQgb24gdGhlIGludGVncmF0aW9uIHNlcnZlciBob3N0aW5nIGl0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBUaGUgbGlzdCBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgZm9yIGFsbCBjYXRhbG9nIGFuZCBjb250YWluZXIgc2VydmVycyB3aGljaCBhcmUgaW50ZXJhY3RpbmcgdG9nZXRoZXIgaW4gdGhlIHNhbWUgZG9tYWluDQogICAgI2NsaWVudHNEZWZhdWx0VG9TU0w6IGZhbHNlICAgICAgICAgIyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgU1NMIGZvciBhbnkgY2xpZW50IGNvbm5lY3Rpb25zIHRvIHRoZSBjYWNoZSBzZXJ2ZXJzDQogICAgI2RlcGxveW1lbnRQb2xpY3lDdXN0b21GaWxlOiAnJyAgICAgIyBPdmVycmlkZSB0aGUgZGVwbG95bWVudCBwb2xpY3kgZmlsZSAoZGVmYXVsdCBpcyAnPGluc3RhbGwgZGlyZWN0b3J5Pi9zZXJ2ZXIvY2FjaGVzdXBwb3J0L2NvbmZpZy9kZXBsb3ltZW50LnhtbCcpDQogICAgI2VuYWJsZUNhdGFsb2dTZXJ2aWNlOiBmYWxzZSAgICAgICAgIyBTZXQgdG8gdHJ1ZSB0byBsYXVuY2ggYSBjYXRhbG9nIHNlcnZpY2UgY2FjaGUgc2VydmVyIGNvbXBvbmVudCBpbiB0aGlzIGludGVncmF0aW9uIHNlcnZlcg0KICAgICNlbmFibGVDb250YWluZXJTZXJ2aWNlOiBmYWxzZSAgICAgICMgU2V0IHRvIHRydWUgdG8gbGF1bmNoIGEgY29udGFpbmVyIHNlcnZpY2UgY2FjaGUgc2VydmVyIGNvbXBvbmVudCBpbiB0aGlzIGludGVncmF0aW9uIHNlcnZlcg0KICAgICNlbmFibGVKTVg6IHRydWUgICAgICAgICAgICAgICAgICAgICMgQWxsb3cgYWRtaW4gYWNjZXNzIHRvIHRoaXMgY29udGFpbmVyIHNlcnZpY2UgdmlhIEpNWA0KICAgICNsaXN0ZW5lckhvc3Q6ICcnICAgICAgICAgICAgICAgICAgICMgQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgaG9zdG5hbWVzIGZvciB0aGlzIGNhY2hlU2VydmVyIGNvbXBvbmVudCwgZS5nLiAnbG9jYWxob3N0LG15c2VydmVyLm15Y29tcGFueS5jb20nDQogICAgI2xpc3RlbmVyUG9ydDogMCAgICAgICAgICAgICAgICAgICAgIyBQb3J0IG51bWJlciB0aGlzIGNhY2hlIHNlcnZlciBsaXN0ZW5zIG9uOyBpdCBtdXN0IGJlIHVuaXF1ZSBvbiB0aGlzIG1hY2hpbmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEZvdXIgY29uc2VjdXRpdmUgcG9ydHMgYXJlIGFzc2lnbmVkLCBlLmcuIDI4MDAgZm9yIGNhdGFsb2dDYWNoZVNlcnZlckxpc3RlbmVyUG9ydCwgMjgwMSBmb3IgY2xpZW50UG9ydCwgMjgwMiBmb3IgSk1YU2VydmljZVBvcnQsIDI4MDMgZm9yIEhBUG9ydA0KICAgICNvYmplY3RHcmlkQ3VzdG9tRmlsZTogJycgICAgICAgICAgICMgT3ZlcnJpZGUgdGhlIE9iamVjdEdyaWQgZmlsZSAoZGVmYXVsdCBpcyAnPGluc3RhbGwgZGlyZWN0b3J5Pi9zZXJ2ZXIvY2FjaGVzdXBwb3J0L2NvbmZpZy9vYmplY3RncmlkX3hpby54bWwnKQ0KICAgICNvdmVycmlkZVRyYWNlU3BlYzogJycgICAgICAgICAgICAgICMgU2V0IGEgdHJhY2UgbGV2ZWwgZm9yIHRoZSBjYWNoZSBzZXJ2ZXIgY29tcG9uZW50cywgZS5nLiBPYmplY3RHcmlkKj1ldmVudD1lbmFibGVkDQogICAgI3NzbEFsaWFzOiAnJyAgICAgICAgICAgICAgICAgICAgICAgIyBTU0wgQWxpYXMgdG8gdXNlIGZvciB0aGUgY2FjaGUgc2VydmVyIGNvbXBvbmVudHMNCiAgICAjc3NsUHJvdG9jb2w6ICcnICAgICAgICAgICAgICAgICAgICAjIFNTTCBQcm90b2NvbCB0byB1c2UgZm9yIFNTTCBjb25uZWN0aW9ucyBlZy4gZGVmYXVsdCBpcyAiVExTdjEuMiINCg0KICBFeGNlcHRpb25Mb2c6DQogICAgZW5hYmxlZDogdHJ1ZSAgICAgICAgICAgICAgICAgICMgRW5hYmxlcyBsb2dnaW5nIG9mIGV4Y2VwdGlvbnMgdG8gPHdvcmtkaXI+L2NvbmZpZy9jb21tb24vbG9nL2ludGVncmF0aW9uX3NlcnZlci48bmFtZT4uZXhjZXB0aW9uTG9nLnR4dA0KICAgIGluY2x1ZGVGbG93VGhyZWFkUmVwb3J0ZXI6IHRydWUgICAjIFRvZ2dsZXMgd2hldGhlciBleGNlcHRpb24gaW4gdGhlIGV4Y2VwdGlvbiBsb2cgaW5jbHVkZSBhIGZsb3cgc3RhY2sgYW5kIGhpc3RvcnkgZnJvbSB0aGUgZmxvdyB0aHJlYWQgcmVwb3J0ZXINCiAgICBzaG93TmVzdGVkRXhjZXB0aW9uRGV0YWlsczogdHJ1ZSAgIyBUb2dnbGVzIHdoZXRoZXIgbmVzdGVkIGV4Y2VwdGlvbnMgYXJlIHNob3duIGJ5IGRlZmF1bHQgaW4gdGhlIGV4Y2VwdGlvbiBsb2cNCiAgR3JvdXBEaXJlY3RvcjoNCiAgICAjbWFuYWdlclR5cGU6IGRlZmF1bHQgICAgICAgICAgICAgICAjIENvbnRyb2xzIHdoaWNoIGltcGxlbWVudGF0aW9uIG9mIGluIG1lbW9yeSBhZ2dyZWdhdGlvbiBzaG91bGQgYmUgdXNlZC4gVmFsaWQgdmFsdWVzIGFyZTogZGVmYXVsdA0KICAgICN0aW1lb3V0VGhyZWFkczogMSAgICAgICAgICAgICAgICAgICMgU2V0cyB0aGUgbnVtYmVyIG9mIHRocmVhZHMgd2hpY2ggd2lsbCBwcm9jZXNzIHRpbWVkLW91dCBncm91cHMgcGVyIHNldCBvZiBncm91cCBub2Rlcw0KICAgICN0aW1lb3V0SW50ZXJ2YWw6IDEwMCAgICAgICAgICAgICAgICMgU2V0cyB0aGUgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzIGJldHdlZW4gdGhlIGVuZCBvZiBvbmUgdGltZW91dCBwcm9jZXNzaW5nIHJ1biBhbmQgdGhlIHN0YXJ0IG9mIHRoZSBuZXh0DQogICAgI3Vua25vd25UaHJlYWRzOiAxICAgICAgICAgICAgICAgICAgIyBTZXRzIHRoZSBudW1iZXIgb2YgdGhyZWFkcyB3aGljaCB3aWxsIHByb2Nlc3MgdW5rbm93biBtZXNzYWdlcyBwZXIgc2V0IG9mIGdyb3VwIG5vZGVzDQogICAgI3Vua25vd25JbnRlcnZhbDogMTAwICAgICAgICAgICAgICAgIyBTZXRzIHRoZSBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZW5kIG9mIG9uZSB1bmtub3duIG1lc3NhZ2UgcHJvY2Vzc2luZyBydW4gYW5kIHRoZSBzdGFydCBvZiB0aGUgbmV4dA0KICAgICNtYXhpbXVtTnVtYmVyT2ZHcm91cHM6IC0xICAgICAgICAgICMgTGltaXRzIHRoZSB0b3RhbCBudW1iZXIgb2YgZ3JvdXBzIHRoYXQgY2FuIGJlIGFjdGl2ZSBhdCBhbnkgb25lIHRpbWUuIC0xIG1lYW5zIG5vIGxpbWl0Lg0KICAgIHJlcGx5Rm9ybWF0OiBtaXhlZC1jb250ZW50ICAgICAgICAgICMgQ29udHJvbHMgd2hpY2ggbWV0aG9kIHNob3VsZCBiZSB1c2VkIHRvIHN0b3JlIG1lc3NhZ2VzIHRoYXQgYXJlIHJlY2VpdmVkIGJ5IGEgR3JvdXBHYXRoZXIgbm9kZSBiZWZvcmUgYmVpbmcgb3V0cHV0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBpbiBhIEdyb3VwQ29tcGxldGUgbm9kZS4gVmFsaWQgdmFsdWVzIGFyZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgICAqIGJhc2ljIC0gU2VyaWFsaXplIHRoZSBlbnRpcmUgbWVzc2FnZSB0cmVlIGJhc2VkIG9uIHRoZSB2YWx1ZXMgaW4gdGhlIFByb3BlcnRpZXMgcGFyc2VyLiBUaGlzIHdhcyB0aGUgZGVmYXVsdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICBiZWhhdmlvdXIgYmVmb3JlIDExLjAuMC42DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgKiBtaXhlZC1jb250ZW50IC0gU2VyaWFsaXplIGVhY2ggZmlyc3QgbGV2ZWwgY2hpbGQgb2YgdGhlIG1lc3NhZ2Ugcm9vdCBpbmRpdmlkdWFsbHksIHVzaW5nIHRoZSBzdWJ0cmVlJ3Mgb3duIHBhcnNlcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgICAgIHRvIGRlY2lkZSB3aGF0IENDU0lEIGFuZCBlbmNvZGluZyB0byB1c2UuIFRoaXMgcmVxdWlyZXMgdGhhdCBlYWNoIGluZGl2aWR1YWwgc3VidHJlZSBiZSB2YWxpZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhhdCBwYXJzZXIuIFN1YnRyZWVzIHRoYXQgZG8gbm90IHNlcmlhbGl6ZSB3aWxsIG5vdCBiZSBzdG9yZWQuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgKiB0b29sa2l0IC0gU2VyaWFsaXplIHRoZSBtZXNzYWdlIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCB1c2VkIGJ5IHRoZSB0b29sa2l0IGZvciBtZXNzYWdlcyBpbiB0aGUgZmxvdyBleGVyY2lzZXIuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgICAgICAgICAgICAgVGhpcyBpcyBjYXBhYmxlIG9mIHJlcHJlc2VudGluZyBhcmJpdHJhcnkgbWVzc2FnZSB0cmVlcyBhY2N1cmF0ZWx5IGJ1dCBpcyBzbG93ZXIuDQoNCkNvbm5lY3RvclByb3ZpZGVyczoNCiAgU0FQQ29ubmVjdG9yUHJvdmlkZXI6DQogICAgI2phcnNVUkw6ICdkZWZhdWx0X1BhdGgnICAgICAjIFNldCB0byB0aGUgYWJzb2x1dGUgcGF0aCBjb250YWluaW5nIHRoZSBTQVAgSkNvIEpBUnMuDQogICAgI25hdGl2ZUxpYnM6ICdkZWZhdWx0X1BhdGgnICAjIFNldCB0byB0aGUgYWJzb2x1dGUgcGF0aCBjb250YWluaW5nIHRoZSBTQVAgSkNvIGxpYnJhcmllcy4NCiAgICAjZW5hYmxlU3RhbmRhbG9uZUlEb2NQYXJzaW5nOiBmYWxzZSAjIFNldCB0byB0cnVlIHRvIGVuYWJsZSB1c2luZyB0aGUgRGF0YU9iamVjdCBwYXJzZXIgaW4gU0FQIEFMRSBJRG9jIG1vZGUgd2l0aG91dCBoYXZpbmcgYWRhcHRlciBjb21wb25lbnRzIGRlcGxveWVkDQogIFNpZWJlbENvbm5lY3RvclByb3ZpZGVyOg0KICAgICNqYXJzVVJMOiAnZGVmYXVsdF9QYXRoJyAgICAgIyBTZXQgdG8gdGhlIGFic29sdXRlIHBhdGggY29udGFpbmluZyB0aGUgU2llYmVsIEpBUnMuDQogICAgI25hdGl2ZUxpYnM6ICdkZWZhdWx0X1BhdGgnICAjIFNldCB0byB0aGUgYWJzb2x1dGUgcGF0aCBjb250YWluaW5nIHRoZSBTaWViZWwgbGlicmFyaWVzLg0KICAgICNzaWViZWxQcm9wZXJ0aWVzVVJMOiAgJycgICMgU2V0IHRvIHRoZSBsb2NhdGlvbiBvZiB0aGUgc2llYmVsLnByb3BlcnRpZXMgZmlsZS4NCiAgUGVvcGxlU29mdENvbm5lY3RvclByb3ZpZGVyOg0KICAgICNqYXJzVVJMOiAnZGVmYXVsdF9QYXRoJyAgICAgIyBTZXQgdG8gdGhlIGFic29sdXRlIHBhdGggY29udGFpbmluZyB0aGUgUGVvcGxlU29mdCBKQVJzLg0KICBKREVkd2FyZHNDb25uZWN0b3JQcm92aWRlcjoNCiAgICAjamFyc1VSTDogJ2RlZmF1bHRfUGF0aCcgICAgICMgU2V0IHRvIHRoZSBhYnNvbHV0ZSBwYXRoIGNvbnRhaW5pbmcgdGhlIEpERWR3YXJkcyBKQVJzLg0KICAgICNuYXRpdmVMaWJzOiAnZGVmYXVsdF9QYXRoJyAgIyBTZXQgdG8gdGhlIGFic29sdXRlIHBhdGggY29udGFpbmluZyB0aGUgSkRFZHdhcmRzIGxpYnJhcmllcy4NCiAgI1dTUlJDb25uZWN0b3JQcm92aWRlcjogICAgIyBSZXF1aXJlcyB0aGUgb3B0aW9uYWwgV1NSUiBjb21wb25lbnQgaW5zdGFsbA0KICAgICNlbmRwb2ludEFkZHJlc3M6ICdodHRwczovL2hvc3Q6OTQ0My9XU1JSOF8wL3NlcnZpY2VzL1dTUlJDb3JlU0RPUG9ydCcgICAjIFdTUlIgc2VydmVyIGVuZHBvaW50IHVybA0KICAgICNuZWVkQ2FjaGU6IHRydWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGVuYWJsZSBXU1JSIGNhY2hlDQogICAgI3ByZWRlZmluZWRDYWNoZVF1ZXJpZXM6ICcnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgc2VtaWNvbG9uLXNlcGFyYXRlZCBYUGF0aCBxdWVyeXMgdG8gaW5pdGlhbGl6ZSBXU1JSIGNhY2hlIGF0IHN0YXJ0LXVwDQogICAgI2VuYWJsZUNhY2hlTm90aWZpY2F0aW9uOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgZW5hYmxlIFdTUlIgY2FjaGUgbm90aWZpY2F0aW9uDQogICAgI2xvY2F0aW9uSk5ESUJpbmRpbmc6ICAnaWlvcDovL2hvc3Q6MjgwOScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgV1NSUiBjYWNoZSBXQVMgSk1TIHByb3ZpZGVyIEpOREkgYmluZGluZ3MgdXJsDQogICNNeUN1c3RvbVByb3ZpZGVyOg0KICAgICNjb25uZWN0b3JDbGFzc05hbWU6ICdjb20uY29tcGFueS5jb25uZWN0b3IuaHlwZXIuTG9vcENvbm5lY3RvckZhY3RvcnknDQogICAgI2phcnNVUkw6ICdpbnN0YWxsYXRpb25fZGlyZWN0b3J5L3J1bnRpbWUvTG9vcENvbm5lY3RvcicgIyBhYnNvbHV0ZSBwYXRoDQogICAgI25hdGl2ZUxpYnM6ICdkZWZhdWx0X1BhdGgnICMgYWJzb2x1dGUgcGF0aCBvciBzcGVjaWFsIHZhbHVlICJkZWZhdWx0X1BhdGgiDQoNCiMgUmVjb3JkIGFuZCBSZXBsYXkgcmVxdWlyZXMgYSBkZWZhdWx0IHF1ZXVlIG1hbmFnZXIgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBpbnRlZ3JhdGlvbiBzZXJ2ZXIuDQojUmVjb3JkUmVwbGF5Og0KIyAgcmVjb3JkUmVwbGF5RW5hYmxlZDogZmFsc2UgICAgICAgICAgICMgU2V0IHRvIHRydWUgdG8gZW5hYmxlIGFsbCBSZWNvcmQgYW5kIFJlcGxheSBmdW5jdGlvbmFsaXR5LiBEZWZhdWx0IGlzIHRydWUuDQojICBTdG9yZXM6DQogICAgIyBDb3B5IGFuZCBjdXN0b21pemUgdGhlIFN0b3JlVGVtcGxhdGUgc2VjdGlvbiBmb3IgZWFjaCBSZWNvcmQgYW5kIFJlcGxheSBzdG9yZSB0aGF0IHlvdSB3YW50IHRvIGNyZWF0ZS4NCiAgICAjIFJlbmFtZSB0aGUgc2VjdGlvbiB0aXRsZSAnU3RvcmVUZW1wbGF0ZScgdG8gYmUgdGhlIG5hbWUgb2YgeW91ciBSZWNvcmQgYW5kIFJlcGxheSBzdG9yZS4gVGhpcyBuYW1lIG11c3QgYmUgdW5pcXVlLg0KICAgICMgICAgIFN0b3JlVGVtcGxhdGU6DQogICAgIyAgIGRhdGFTb3VyY2U6ICdNQlJFQ09SRCcgICAgICAgICAgICAgICAgICAgICMgVGhlIE9EQkMgZGF0YSBzb3VyY2UgbmFtZSAoRFNOKSB0aGF0IGlzIHVzZWQgdG8gY29ubmVjdCB0byB0aGUgZGF0YWJhc2UgdGhhdCBzdG9yZXMgdGhlIHJlY29yZGVkIGRhdGEuIFRoaXMgcHJvcGVydHkgaXMgbWFuZGF0b3J5IGFuZCBoYXMgbm8gZGVmYXVsdCB2YWx1ZS4NCiAgICAjICAgc2NoZW1hOiAnJyAgICAgICAgICAgICAgICAgICAgICAgICMgVGhlIHNjaGVtYSBuYW1lIHRoYXQgb3ducyB0aGUgZGF0YWJhc2UgdGFibGVzIHRoYXQgYXJlIHVzZWQgZm9yIHN0b3JpbmcgcmVjb3JkZWQgZGF0YS4gVGhpcyBwcm9wZXJ0eSBoYXMgbm8gZGVmYXVsdCB2YWx1ZS4gSWYgbm8gdmFsdWUgaXMgc2V0LCBlaXRoZXIgdGhlIGRlZmF1bHQgZGF0YWJhc2Ugc2NoZW1hIGlzIHVzZWQgKGlmIHRoZXJlIGlzIG9uZSksIG9yIG5vIHNjaGVtYSBpcyB1c2VkLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFiYXNlLg0KICAgICMgICBzdG9yZU1vZGU6ICdhbGwnICAgICAgICAgICAgICAgICAgIyBUaGUgbW9kZSBmb3IgdGhlIHN0b3JlIHRvIG9wZXJhdGUgaW4uIFZhbGlkIHZhbHVlcyBhcmUgcmVjb3JkLCB2aWV3LCBhbmQgYWxsLiBEZWZhdWx0IGlzIGFsbC4NCiAgICAjICAgcXVldWU6ICdTWVNURU0uQlJPS0VSLkRDLlJFQ09SRCcgICMgVGhlIG5hbWUgb2YgdGhlIHF1ZXVlIHRvIHdoaWNoIGV2ZW50IG1lc3NhZ2VzIHdpbGwgYmUgcHVibGlzaGVkIGJlZm9yZSBiZWluZyByZWNvcmRlZCB0byB0aGUgZGF0YWJhc2UuIFRoZSBxdWV1ZSBtdXN0IGV4aXN0Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIERlZmF1bHQgaXMgU1lTVEVNLkJST0tFUi5EQy5SRUNPUkQuIFRoZSBxdWV1ZSBTWVNURU0uQlJPS0VSLkRDLlJFQ09SRCBtdXN0IGJlIGNyZWF0ZWQgbWFudWFsbHkgaWYgeW91IHVzZSBSZWNvcmQgYW5kIFJlcGxheS4gVGhlIHNhbWUgcXVldWUgY2FuIGJlIHNwZWNpZmllZCBmb3IgbXVsdGlwbGUgUmVjb3JkIGFuZCBSZXBsYXkgc3RvcmVzLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIENoYW5nZSB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSB0byBkaXN0cmlidXRlIHRoZSBkYXRhIGZyb20gbXVsdGlwbGUgc291cmNlcyBhY3Jvc3MgbXVsdGlwbGUgcXVldWVzLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgYmFja291dFF1ZXVlOiAnU1lTVEVNLkJST0tFUi5EQy5CQUNLT1VUJyAgIyBUaGUgbmFtZSBvZiB0aGUgYmFja291dCBxdWV1ZSB1c2VkIGJ5IHRoZSByZWNvcmRlci4gTWVzc2FnZXMgdGhhdCBjYW5ub3QgYmUgcHJvY2Vzc2VkIChmb3IgZXhhbXBsZSwgYmVjYXVzZSB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlIGRvZXMgbm90IGV4aXN0KSBhcmUgc2VudCB0byB0aGlzIHF1ZXVlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgRGVmYXVsdCBpcyBTWVNURU0uQlJPS0VSLkRDLkJBQ0tPVVQuIFRoZSBxdWV1ZSBTWVNURU0uQlJPS0VSLkRDLkJBQ0tPVVQgbXVzdCBiZSBjcmVhdGVkIG1hbnVhbGx5IGlmIHlvdSB1c2UgUmVjb3JkIGFuZCBSZXBsYXkuIElmIGEgZGF0YSBjYXB0dXJlIHNvdXJjZSByZWZlcnMgdG8gdGhpcyBkYXRhIGNhcHR1cmUgc3RvcmUsIGFuZCBubyBiYWNrb3V0UXVldWUgaGFzIGJlZW4gc3BlY2lmaWVkLCBhbiBlcnJvciBvY2N1cnMuIFRoZSBzYW1lIGJhY2tvdXRRdWV1ZSBjYW4gYmUgc3BlY2lmaWVkIGZvciBtdWx0aXBsZSBSZWNvcmQgYW5kIFJlcGxheSBzdG9yZXMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgdXNlQ29vcmRpbmF0ZWRUcmFuc2FjdGlvbjogZmFsc2UgICMgU3BlY2lmaWVzIHdoZXRoZXIgcmVjb3JkZXIgdHJhbnNhY3Rpb25zIGFyZSBnbG9iYWxseSBjb29yZGluYXRlZCBhY3Jvc3MgSUJNIE1RIGFuZCBkYXRhYmFzZSByZXNvdXJjZXMuIERlZmF1bHQgaXMgZmFsc2UuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgICBjb21taXRDb3VudDogMTAgICAgICAgICAgICAgICAgICAgIyBUaGUgbnVtYmVyIG9mIGlucHV0IG1lc3NhZ2VzIHRoYXQgYXJlIHByb2Nlc3NlZCBvbiBhIHJlY29yZGVyIHRocmVhZCBiZWZvcmUgYSBzeW5jIHBvaW50IGlzIHRha2VuLiBEZWZhdWx0IGlzIDEwLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgICAgICAgdGhyZWFkUG9vbFNpemU6IDEwICAgICAgICAgICAgICAgICMgVGhlIG51bWJlciBvZiB0aHJlYWRzIHRoYXQgYXJlIHVzZWQgYnkgdGhlIHJlY29yZGVyIHRvIHByb2Nlc3MgdGhlIG1vbml0b3JpbmcgdG9waWMgc3Vic2NyaXB0aW9ucy4gRGVmYXVsdCBpcyAxMC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgICAgIGNvbW1pdEludGVydmFsU2VjczogNSAgICAgICAgICAgICAjIFRoZSB0aW1lIGludGVydmFsIChpbiBzZWNvbmRzKSBhdCB3aGljaCBhIGNvbW1pdCBpcyB0YWtlbiwgaWYgdGhlIGNvbW1pdENvdW50IHByb3BlcnR5IGlzIGdyZWF0ZXIgdGhhbiAxIGJ1dCB0aGUgbnVtYmVyIG9mIG1lc3NhZ2VzIHByb2Nlc3NlZCBoYXMgbm90IHJlYWNoZWQgdGhlIHZhbHVlIG9mIHRoZSBjb21taXRDb3VudCBwcm9wZXJ0eS4gRGVmYXVsdCBpcyA1Lg0KDQogICAgICAgICAgIyAgU291cmNlczoNCiAgICAjIENvcHkgYW5kIGN1c3RvbWl6ZSB0aGUgU291cmNlVGVtcGxhdGUgc2VjdGlvbiBmb3IgZWFjaCBSZWNvcmQgYW5kIFJlcGxheSBzb3VyY2UgdGhhdCB5b3Ugd2FudCB0byBjcmVhdGUuDQogICAgIyBSZW5hbWUgdGhlIHNlY3Rpb24gdGl0bGUgJ1NvdXJjZVRlbXBsYXRlJyB0byBiZSB0aGUgbmFtZSBvZiB5b3VyIFJlY29yZCBhbmQgUmVwbGF5IHNvdXJjZS4gVGhpcyBuYW1lIG11c3QgYmUgdW5pcXVlLg0KICAgICMgSWYgeW91IGFyZSBwdWJsaXNoaW5nIE1vbml0b3JpbmdFdmVudFYyIGZvcm1hdCBtb25pdG9yaW5nIGV2ZW50cywgdGhlIHZhbHVlIG9mIHRoZSB0b3BpYyBwcm9wZXJ0eSB0YWtlcyB0aGUgZm9ybTogJFNZUy9Ccm9rZXIvaW50ZWdyYXRpb25Ob2RlTmFtZS9Nb25pdG9yaW5nL2ludGVncmF0aW9uU2VydmVyL2FwcGxpY2F0aW9uL2xpYnJhcnkvbXNnRmxvdyAsd2hlcmUgaW50ZWdyYXRpb25Ob2RlTmFtZSwgaW50ZWdyYXRpb25TZXJ2ZXIsIGFwcGxpY2F0aW9uLCBsaWJyYXJ5LCBhbmQgbXNnRmxvdyByZXByZXNlbnQgdGhlIG5hbWVzIG9mIHlvdXIgaW50ZWdyYXRpb24gbm9kZSwgaW50ZWdyYXRpb24gc2VydmVyLCBhcHBsaWNhdGlvbiwgbGlicmFyeSwgYW5kIG1lc3NhZ2UgZmxvdy4gVGhlIGxpYnJhcnkgbmFtZSBpcyBvcHRpb25hbCBhbmQgd2lsbCBiZSByZXF1aXJlZCBvbmx5IGlmIHRoZSBtZXNzYWdlIGZsb3cgaXMgaW5zaWRlIGEgbGlicmFyeS4NCiAgICAjIElmIHlvdSBhcmUgcHVibGlzaGluZyBXTUIgZm9ybWF0IG1vbml0b3JpbmcgZXZlbnRzLCB0aGUgdmFsdWUgb2YgdGhlIHRvcGljIHByb3BlcnR5IHRha2VzIHRoZSBmb3JtOiAkU1lTL0Jyb2tlci9pbnRlZ3JhdGlvbk5vZGVOYW1lL01vbml0b3JpbmcvaW50ZWdyYXRpb25TZXJ2ZXIvbXNnRmxvdywgd2hlcmUgaW50ZWdyYXRpb25Ob2RlTmFtZSwgaW50ZWdyYXRpb25TZXJ2ZXIsIGFuZCBtc2dGbG93IHJlcHJlc2VudCB0aGUgbmFtZXMgb2YgeW91ciBpbnRlZ3JhdGlvbiBub2RlLCBpbnRlZ3JhdGlvbiBzZXJ2ZXIsIGFuZCBtZXNzYWdlIGZsb3cuDQogICAgIyBZb3UgY2FuIHVzZSB3aWxkY2FyZHMgaW4gdGhlIHRvcGljIHN0cmluZzsgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdXNpbmcgd2lsZGNhcmRzIGluIHRvcGljcywgc2VlICJTcGVjaWFsIGNoYXJhY3RlcnMgaW4gdG9waWNzIiB0b3BpYyBpbiB0aGUgS25vd2xlZGdlIENlbnRlci4NCiAgICAjIEEgZHVyYWJsZSBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBmb3IgZWFjaCBzb3VyY2UgYW5kIGlzIGNyZWF0ZWQgd2l0aCBhIHN1YmlkIG9mIEludGVncmF0aW9uU2VydmVyOltzZXJ2ZXJuYW1lXTpbc291cmNlbmFtZV0uIElmIG11bHRpcGxlIGluZGVwZW5kZW50IGludGVncmF0aW9uIHNlcnZlcnMgc2hhcmUgdGhlIHNhbWUgcXVldWUgbWFuYWdlciwgeW91IG11c3QgZW5zdXJlIHRoYXQgdGhlcmUgaXMgbm8gY2xhc2ggaW4gc2VydmVyIGFuZCBzb3VyY2UgbmFtZS4NCiAgICAjIElmIHlvdSBkZWxldGUgYSBzb3VyY2UsIHlvdSBtdXN0IG1hbnVhbGx5IGRlbGV0ZSB0aGUgZHVyYWJsZSBzdWJzY3JpcHRpb24gZm9yIHRoYXQgc291cmNlIHRvIGF2b2lkIG1lc3NhZ2VzIGJlaW5nIHB1Ymxpc2hlZCB0byB0aGUgUmVjb3JkIGFuZCBSZXBsYXkgc3RvcmUncyBxdWV1ZS4NCiAgICAjICAgICBTb3VyY2VUZW1wbGF0ZToNCiAgICAgICAjdG9waWM6ICckU1lTL0Jyb2tlci9bbm9kZW5hbWVdL01vbml0b3JpbmcvW3NlcnZlcm5hbWVdL1thcHBsaWNhdGlvbm5hbWVdL1tmbG93bmFtZV0nICAjIFNldHMgdGhlIHN1YnNjcmlwdGlvbiB0b3BpYyB0aGF0IGlzIHVzZWQgZm9yIGJ1c2luZXNzLWxldmVsIG1vbml0b3Jpbmcgb2YgYSBtZXNzYWdlIGZsb3cuDQogICAgICAgIyAgIHRvcGljOiAnJFNZUy9Ccm9rZXIvaW50ZWdyYXRpb25fc2VydmVyL01vbml0b3JpbmcvIy8jLyMnDQogICAgICAgI3N0b3JlOiAnU3RvcmVUZW1wbGF0ZScgIyBUaGUgUmVjb3JkIGFuZCBSZXBsYXkgc3RvcmUgdGhhdCBpcyB1c2VkIHRvIGNvbmZpZ3VyZSByZWNvcmQgYW5kIHJlcGxheSBmb3IgdGhlIG1lc3NhZ2UgZmxvd3Mgc3BlY2lmaWVkIGluIHRoZSB0b3BpYyBwcm9wZXJ0eS4gTXVsdGlwbGUgaW5zdGFuY2VzIG9mIFJlY29yZCBhbmQgUmVwbGF5IHNvdXJjZSBjYW4gcmVmZXIgdG8gb25lIGluc3RhbmNlIG9mIGEgUmVjb3JkIGFuZCBSZXBsYXkgc3RvcmUuDQoNCiAgICAgICAgICAjICBEZXN0aW5hdGlvbnM6DQogICAgIyBDb3B5IGFuZCBjdXN0b21pemUgdGhlIE1RRGVzdGluYXRpb25UZW1wbGF0ZSBzZWN0aW9uIGZvciBlYWNoIFJlY29yZCBhbmQgUmVwbGF5IGRlc3RpbmF0aW9uIHRoYXQgeW91IHdhbnQgdG8gY3JlYXRlLg0KICAgICMgUmVuYW1lIHRoZSBzZWN0aW9uIHRpdGxlICdNUURlc3RpbmF0aW9uVGVtcGxhdGUnIHRvIGJlIHRoZSBuYW1lIG9mIHlvdXIgUmVjb3JkIGFuZCBSZXBsYXkgZGVzdGluYXRpb24uIFRoaXMgbmFtZSBtdXN0IGJlIHVuaXF1ZS4NCiAgICAjIEZvciBkZXN0aW5hdGlvbnMgb2YgdHlwZSBXTVFEZXN0aW5hdGlvbiwgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSB0YWtlcyB0aGUgZm9ybTogd21xOi9tc2cvcXVldWUvcXVldWVOYW1lQHF1ZXVlTWFuYWdlck5hbWUsIHdoZXJlIHF1ZXVlTmFtZSBpZGVudGlmaWVzIHRoZSBkZXN0aW5hdGlvbiBxdWV1ZSBhbmQgcXVldWVNYW5hZ2VyTmFtZSBpZGVudGlmaWVzIHRoZSBxdWV1ZSBtYW5hZ2VyIHRoYXQgb3ducyB0aGUgcXVldWUuIFRoZSBxdWV1ZSBtYW5hZ2VyIHNwZWNpZmllZCBieSB0aGlzIHByb3BlcnR5IG11c3QgYmUgbG9jYWw7IGRhdGEgY2Fubm90IGJlIHJlcGxheWVkIHRvIGEgcXVldWUgdGhhdCBpcyBvbiBhIHJlbW90ZSBxdWV1ZSBtYW5hZ2VyLg0KICAgICMgICAgIE1RRGVzdGluYXRpb25UZW1wbGF0ZToNCiAgICAjICAgZW5kcG9pbnRUeXBlOiAnV01RRGVzdGluYXRpb24nICAgICAgICAgICAgICMgVGhlIHR5cGUgb2YgdGhlIHRhcmdldCBkZXN0aW5hdGlvbiB0byB3aGljaCBtZXNzYWdlcyB3aWxsIGJlIHJlcGxheWVkLiBUaGUgZGVmYXVsdCBpcyBXTVFEZXN0aW5hdGlvbiwgd2hpY2ggaXMgdGhlIG9ubHkgdmFsaWQgdmFsdWUuDQogICAgIyAgIGVuZHBvaW50OiAnd21xOi9tc2cvcXVldWUvUkVQTEFZUUBJSUJBMUhQMDEnICAjIFRoZSBkZXN0aW5hdGlvbiB0byB3aGljaCB5b3Ugd2FudCB0byByZXBsYXkgZGF0YS4gVGhpcyBwcm9wZXJ0eSBpcyBtYW5kYXRvcnkuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHdtcTovbXNnL3F1ZXVlL1tRVUVVRV1AW1FNR1JdLiBZb3UgbXVzdCByZXBsYWNlIFtRVUVVRV0gYW5kIFtRTUdSXSB3aXRoIHRoZSBuYW1lcyBvZiB5b3VyIHF1ZXVlIGFuZCBxdWV1ZSBtYW5hZ2VyLg0KDQpTZXJ2ZXJDcmVkZW50aWFsczoNCiAgIyBPcHRpb25hbGx5IGRlZmluZSBjcmVkZW50aWFscyBmb3IgdXNlIGJ5IHRoZSBJbnRlZ3JhdGlvbiBTZXJ2ZXIuDQogICMgQ3VzdG9taXplIHRoZSBDcmVkZW50aWFsVHlwZSBzZWN0aW9uIGZvciBlYWNoIHR5cGUgb2YgY3JlZGVudGlhbCB0aGF0IHlvdSB3YW50IHRvIGNyZWF0ZSBjcmVkZW50aWFscyBmb3IuDQogICMgWW91IG11c3QgZGVmaW5lIGVhY2ggQ3JlZGVudGlhbFR5cGUgYXQgbW9zdCBvbmNlLg0KICAjIEVhY2ggQ3JlZGVudGlhbE5hbWUgbXVzdCBiZSB1bmlxdWUgd2l0aGluIHRoZSBDcmVkZW50aWFsVHlwZS4NCiAgIyBFYWNoIENyZWRlbnRpYWxUeXBlIGhhcyBhIHNldCBvZiBhbGxvd2FibGUgcHJvcGVydGllcyB3aGljaCBhcmUgYSBzdWJzZXQgb2YgdXNlcm5hbWUsIHBhc3N3b3JkLCBwYXNzcGhyYXNlLCBhcGlLZXksIGNsaWVudElkLCBjbGllbnRTZWNyZXQsIHNzaElkZW50aXR5RmlsZS4NCiAgIyBGb3IgZnVsbCBkZXRhaWxzIG9mIGFsbG93ZWQgQ3JlZGVudGlhbFR5cGVzIGFuZCB0aGVpciBwcm9wZXJ0aWVzLCByZWZlciB0byB0aGUgS25vd2xlZGdlIENlbnRlci4NCiAgIyBGb3IgZXhhbXBsZToNCiAgIyBqZGJjOg0KICAjICAgVVNFUkRCOg0KICAjICAgICB1c2VybmFtZTogJ3VzZXIxJw0KICAjICAgICBwYXNzd29yZDogJ215UGFzc3cwcmQnDQogICMgICBPVEhFUkRCOg0KICAjICAgICB1c2VybmFtZTogJ3VzZXIyJw0KICAjICAgICBwYXNzd29yZDogJ215T3RoZXJQYXNzdzByZCcNCiAgIyByZXN0Og0KICAjICAgZW5kcG9pbnQxOg0KICAjICAgICB1c2VybmFtZTogJ3VzZXIxJw0KICAjICAgICBwYXNzd29yZDogJ215UGFzc3cwcmQnDQogICMgICAgIGFwaUtleTogJ2FuQXBpS2V5V2hpY2hNaWdodEJlQUxvbmdPbmUnDQogICMNCiAgIyAgc210cDoNCiAgIyAgICBlbXQ6DQogICMgICAgICB1c2VybmFtZTogInVzZXIxIg0KICAjICAgICAgcGFzc3dvcmQ6ICJwYXNzIg0KDQogICNDcmVkZW50aWFsVHlwZToNCiAgICAjQ3JlZGVudGlhbE5hbWU6DQogICAgICAjcHJvcGVydHk6ICd2YWx1ZScNCiAgICAgICNwcm9wZXJ0eTI6ICd2YWx1ZTInDQojRUxLQ29ubmVjdGlvbnM6DQojICBlbGtDb25uZWN0aW9uMToNCiMgICAgZWxrUHJvdG9jb2w6ICdodHRwJyAgICAgICAgICAgICMgTG9nc3Rhc2ggaW5wdXQgcHJvdG9jb2wuIFZhbGlkIHZhbHVlcyBhcmU6ICdiZWF0cycsICdiZWF0c1RscycsICdodHRwJywgb3IgJ2h0dHBzJy4NCiMgICAgaG9zdG5hbWU6ICcxMC45OC4zMy41NScgICAgICAgICAjIEhvc3RuYW1lIGZvciB0aGUgZWxrUHJvdG9jb2wgZW5kcG9pbnQuDQojICAgIHBvcnQ6IDU4ODggICAgICAgICAgICAgICAgICAgICAgICAgIyBQb3J0IGZvciB0aGUgZWxrUHJvdG9jb2wgZW5kcG9pbnQuDQojICAgIHVwbG9hZEludGVydmFsTWlsbGlTZWNzOiAxMDAwDQojICBlbGtDb25uZWN0aW9uQmVhdHM6DQojICAgIGVsa1Byb3RvY29sOiAnYmVhdHMnICAgICAgICAgICAgICAjIExvZ3N0YXNoIGlucHV0IHByb3RvY29sLiBWYWxpZCB2YWx1ZXMgYXJlOiAnYmVhdHMnLCAnYmVhdHNUbHMnLCAnaHR0cCcsIG9yICdodHRwcycuDQojICAgIGhvc3RuYW1lOiAnMTAuOTguMzMuNTUnICAgICAgICAgICAgICAjIEhvc3RuYW1lIGZvciB0aGUgZWxrUHJvdG9jb2wgZW5kcG9pbnQuDQojICAgIHBvcnQ6IDU0NDQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFBvcnQgZm9yIHRoZSBlbGtQcm90b2NvbCBlbmRwb2ludC4NCiMgICAgdXBsb2FkSW50ZXJ2YWxNaWxsaVNlY3M6IDEwMDAgICAgICAgICAgICAgIyBJbnRlcnZhbCBiZXR3ZWVuIHVwbG9hZGluZyBjYWNoZWQgZGF0YSwgc2V0IGluIG1pbGxpc2Vjb25kcy4NCg0KICAgICAgICAjRUxLQ29ubmVjdGlvbnM6DQogICAgICAgICNlbGtDb25uZWN0aW9uMToNCiAgICAgICAgI2Vsa1Byb3RvY29sOiAnaHR0cCcgICAgICAgICMgTG9nc3Rhc2ggaW5wdXQgcHJvdG9jb2wuIFZhbGlkIHZhbHVlcyBhcmU6ICdiZWF0cycsICdiZWF0c1RscycsICdodHRwJywgb3IgJ2h0dHBzJy4NCiAgICAgICAgI2hvc3RuYW1lOiAnbG9nc3Rhc2gnICAgICAgICAgIyBIb3N0bmFtZSBmb3IgdGhlIGVsa1Byb3RvY29sIGVuZHBvaW50Lg0KICAgICAgICAjcG9ydDogNTg4OCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUG9ydCBmb3IgdGhlIGVsa1Byb3RvY29sIGVuZHBvaW50Lg0KICAgICAgICAjdXBsb2FkSW50ZXJ2YWxNaWxsaVNlY3M6IDEwMDAgICAgICAgICAgICAgICMgSW50ZXJ2YWwgYmV0d2VlbiB1cGxvYWRpbmcgY2FjaGVkIGRhdGEsIHNldCBpbiBtaWxsaXNlY29uZHMuDQogICMgRGVzY3JpcHRpb24gZm9yIEVMSyBDb25uZWN0aW9ucy4NCiAgIyBlbGtDb25uZWN0aW9uMToNCiAgIyAgIGVsa1Byb3RvY29sOiAnYmVhdHMnICAgICAgICAgICAgICMgTG9nc3Rhc2ggaW5wdXQgcHJvdG9jb2wuIFZhbGlkIHZhbHVlcyBhcmU6ICdiZWF0cycsICdiZWF0c1RscycsICdodHRwJywgb3IgJ2h0dHBzJy4NCiAgIyAgIGhvc3RuYW1lOiAnbXlob3N0LmRvbWFpbi5jb20nICAgICAgICAgICAgICAjIEhvc3RuYW1lIGZvciB0aGUgZWxrUHJvdG9jb2wgZW5kcG9pbnQuDQogICMgICBwb3J0OiAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBQb3J0IGZvciB0aGUgZWxrUHJvdG9jb2wgZW5kcG9pbnQuDQogICMgICB1cGxvYWRJbnRlcnZhbE1pbGxpU2VjczogNjAwMDAgICAgICAgICAgICAgIyBJbnRlcnZhbCBiZXR3ZWVuIHVwbG9hZGluZyBjYWNoZWQgZGF0YSwgc2V0IGluIG1pbGxpc2Vjb25kcy4NCiAgIyAgIGVsa0NyZWRlbnRpYWw6ICcnICAgICAgICAgICAgICAgICAgICAgICAgICAjIFNldCBhbiAnZWxrJyBjcmVkZW50aWFsIGFsaWFzIG5hbWUgdG8gZW5hYmxlIGJhc2ljIGF1dGhlbnRpY2F0aW9uLCBpZiBpdCBpcyByZXF1aXJlZCBieSB0aGUgTG9nc3Rhc2ggaW5wdXQgcHJvdG9jb2wuDQogICMgICBrZXlzdG9yZUZpbGU6ICcvcGF0aC90by9rZXlzdG9yZS5qa3MnICAgICAgIyBTZXQgdGhlIHBhdGggdG8gdGhlIGtleXN0b3JlIHRvIGJlIHVzZWQsIGlmIGl0IGlzIHJlcXVpcmVkIGJ5IHRoZSBMb2dzdGFzaCBpbnB1dCBwcm90b2NvbC4NCiAgIyAgIGtleXN0b3JlUGFzczogJ1A0czV3MHJkJyAgICAgICAgICAgICAgICAgICAjIFNldCB0aGUgcGFzc3dvcmQsIG9yICdrZXlzdG9yZScgY3JlZGVudGlhbCBhbGlhcyB0byB0aGUgcGFzc3dvcmQsIG9mIHRoZSBrZXlzdG9yZS4NCiAgIyAgIGtleUFsaWFzOiAnJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFNldCB0aGUgYWxpYXMgbmFtZSBvZiB0aGUgcHJpdmF0ZSBrZXksIGlmIG11dHVhbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCBieSB0aGUgTG9nc3Rhc2ggaW5wdXQgcHJvdG9jb2wuDQogICMgICBrZXlQYXNzOiAnJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTZXQgdGhlIHBhc3N3b3JkLCBvciAna2V5c3RvcmVrZXknIGNyZWRlbnRpYWwgYWxpYXMgdG8gdGhlIHBhc3N3b3JkLCBmb3IgYWNjZXNzaW5nIHRoZSBwcml2YXRlIG11dHVhbCBhdXRoZW50aWNhdGlvbiBrZXkuDQogICMgICB0cnVzdHN0b3JlRmlsZTogJy9wYXRoL3RwL3RydXN0c3RvcmUuamtzJyAgIyBTZXQgdGhlIHBhdGggdG8gdGhlIHRydXN0c3RvcmUgdG8gYmUgdXNlZCwgaWYgaXQgaXMgcmVxdWlyZWQgYnkgdGhlIExvZ3N0YXNoIGlucHV0IHByb3RvY29sLg0KICAjICAgdHJ1c3RzdG9yZVBhc3M6ICdQNHM1dzByZCcgICAgICAgICAgICAgICAgICMgU2V0IHRoZSBwYXNzd29yZCwgb3IgJ3RydXN0c3RvcmUnIGNyZWRlbnRpYWwgYWxpYXMgdG8gdGhlIHBhc3N3b3JkLCBmb3IgYWNjZXNzaW5nIHRoZSB0cnVzdHN0b3JlLg0KDQpVc2VyVmFyaWFibGVzOg0KICAjVGhpbmcxOiAndmFsdWUnDQoNCg==
  description: "Server conf"
  type: serverconf